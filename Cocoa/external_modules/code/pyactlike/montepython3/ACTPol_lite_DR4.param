#------Experiments to test (separated with commas)-----

data.experiments=['ACTPol_lite_DR4', 'tau_prior']


#------ Parameter list -------

# data.parameters[class name] = [mean, min, max, 1-sigma, scale, role]
# - if min max irrelevant, put to None
# - if fixed, put 1-sigma to 0
# - if scale irrelevant, put to 1, otherwise to the appropriate factor
# - role is either 'cosmo', 'nuisance' or 'derived'. You should put the derived
# parameters at the end, and in case you are using the `-j fast` Cholesky
# decomposition, you should order your nuisance parameters from slowest to
# fastest.

# Cosmological parameters list

data.parameters['omega_b']      = [ 2.2253,   None, None,  0.028, 0.01, 'cosmo']
data.parameters['omega_cdm']    = [0.11919,   None, None, 0.0027,    1, 'cosmo']
data.parameters['100*theta_s']  = [ 1.0418,   None, None,   3e-4,    1, 'cosmo']
data.parameters['ln10^{10}A_s'] = [ 3.0753,   None, None, 0.0029,    1, 'cosmo']
data.parameters['n_s']          = [0.96229,   None, None, 0.0074,    1, 'cosmo']
data.parameters['tau_reio']     = [0.09463,   0.04, None,  0.013,    1, 'cosmo']

# Nuisance parameter list, same call, except the name does not have to be a class name

data.parameters['yp2']         = [0.97,    0.9, 1.1,   0.015, 1,  'nuisance'] 

# Derived parameters

data.parameters['h']              = [0, None, None, 0,     1,   'derived']

# data.parameters['z_reio']          = [1, None, None, 0,     1,   'derived']
# data.parameters['Omega_Lambda']    = [1, None, None, 0,     1,   'derived']
# data.parameters['YHe']             = [1, None, None, 0,     1,   'derived']
# data.parameters['H0']              = [0, None, None, 0,     1,   'derived']
# data.parameters['A_s']             = [0, None, None, 0,  1e-9,   'derived']
# data.parameters['sigma8']          = [0, None, None, 0,     1,   'derived']

# Other cosmo parameters (fixed parameters, precision parameters, etc.)

data.cosmo_arguments['sBBN file'] = data.path['cosmo']+'/bbn/sBBN.dat'
data.cosmo_arguments['k_pivot'] = 0.05

# The base model features two massless
# and one massive neutrino with m=0.06eV.
# The settings below ensures that Neff=3.046
# and m/omega = 93.14 eV
data.cosmo_arguments['N_ur'] = 2.0328
data.cosmo_arguments['N_ncdm'] = 1
data.cosmo_arguments['m_ncdm'] = 0.06
data.cosmo_arguments['T_ncdm'] = 0.71611
data.cosmo_arguments['non linear'] = 'halofit'

# These two are required to get sigma8 as a derived parameter
# (class must compute the P(k) until sufficient k)
# data.cosmo_arguments['output'] = 'mPk'
# data.cosmo_arguments['P_k_max_h/Mpc'] = 1.

#------ Mcmc parameters ----

data.N=10
data.write_step=5
