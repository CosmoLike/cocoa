/* Generated by Cython 0.29.35 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "src/cosmo.h",
            "src/emulator.h"
        ],
        "extra_compile_args": [
            "-std=c++11",
            "-D PRINT_FLAG=0",
            "-D PATH_TO_EE2_DATA_FILE1=\"/home/u8/vivianmiranda/data2/Vivian/test_cocoa3/new_cocoa3py38/cocoa3py38/Cocoa/.local/lib/python3.8/site-packages/euclidemu2/ee2_bindata.dat\"",
            "-D PATH_TO_EE2_DATA_FILE2=\"/home/u8/vivianmiranda/.local/lib/python3.8/site-packages/euclidemu2/ee2_bindata.dat\""
        ],
        "include_dirs": [
            "src",
            "../src/"
        ],
        "language": "c++",
        "libraries": [
            "gsl",
            "gslcblas"
        ],
        "name": "euclidemu2",
        "sources": [
            "src/euclidemu2.pyx",
            "src/cosmo.cxx",
            "src/emulator.cxx"
        ]
    },
    "module_name": "euclidemu2"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_35"
#define CYTHON_HEX_VERSION 0x001D23F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #if PY_VERSION_HEX < 0x03090000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PY_NOGIL)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #ifndef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS (PY_VERSION_HEX < 0x030C00A5)
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 0
  #elif !defined(CYTHON_FAST_THREAD_STATE)
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL (PY_VERSION_HEX < 0x030A0000)
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS ((PY_VERSION_HEX >= 0x030600B1) && (PY_VERSION_HEX < 0x030C00A5))
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if PY_VERSION_HEX >= 0x030B00A1
    static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *kwds=NULL, *argcount=NULL, *posonlyargcount=NULL, *kwonlyargcount=NULL;
        PyObject *nlocals=NULL, *stacksize=NULL, *flags=NULL, *replace=NULL, *call_result=NULL, *empty=NULL;
        const char *fn_cstr=NULL;
        const char *name_cstr=NULL;
        PyCodeObject* co=NULL;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        if (!(kwds=PyDict_New())) goto end;
        if (!(argcount=PyLong_FromLong(a))) goto end;
        if (PyDict_SetItemString(kwds, "co_argcount", argcount) != 0) goto end;
        if (!(posonlyargcount=PyLong_FromLong(0))) goto end;
        if (PyDict_SetItemString(kwds, "co_posonlyargcount", posonlyargcount) != 0) goto end;
        if (!(kwonlyargcount=PyLong_FromLong(k))) goto end;
        if (PyDict_SetItemString(kwds, "co_kwonlyargcount", kwonlyargcount) != 0) goto end;
        if (!(nlocals=PyLong_FromLong(l))) goto end;
        if (PyDict_SetItemString(kwds, "co_nlocals", nlocals) != 0) goto end;
        if (!(stacksize=PyLong_FromLong(s))) goto end;
        if (PyDict_SetItemString(kwds, "co_stacksize", stacksize) != 0) goto end;
        if (!(flags=PyLong_FromLong(f))) goto end;
        if (PyDict_SetItemString(kwds, "co_flags", flags) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_code", code) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_consts", c) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_names", n) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_varnames", v) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_freevars", fv) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_cellvars", cell) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_linetable", lnos) != 0) goto end;
        if (!(fn_cstr=PyUnicode_AsUTF8AndSize(fn, NULL))) goto end;
        if (!(name_cstr=PyUnicode_AsUTF8AndSize(name, NULL))) goto end;
        if (!(co = PyCode_NewEmpty(fn_cstr, name_cstr, fline))) goto end;
        if (!(replace = PyObject_GetAttrString((PyObject*)co, "replace"))) goto cleanup_code_too;
        if (!(empty = PyTuple_New(0))) goto cleanup_code_too; // unfortunately __pyx_empty_tuple isn't available here
        if (!(call_result = PyObject_Call(replace, empty, kwds))) goto cleanup_code_too;
        Py_XDECREF((PyObject*)co);
        co = (PyCodeObject*)call_result;
        call_result = NULL;
        if (0) {
            cleanup_code_too:
            Py_XDECREF((PyObject*)co);
            co = NULL;
        }
        end:
        Py_XDECREF(kwds);
        Py_XDECREF(argcount);
        Py_XDECREF(posonlyargcount);
        Py_XDECREF(kwonlyargcount);
        Py_XDECREF(nlocals);
        Py_XDECREF(stacksize);
        Py_XDECREF(replace);
        Py_XDECREF(call_result);
        Py_XDECREF(empty);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return co;
    }
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_READY(op)       (0)
  #else
    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                                0 : _PyUnicode_Ready((PyObject *)(op)))
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #else
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
    #else
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
    #endif
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__euclidemu2
#define __PYX_HAVE_API__euclidemu2
/* Early includes */
#include <string.h>
#include <stdlib.h>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include <string>
#include "cosmo.h"
#include "emulator.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "src/euclidemu2.pyx",
  "stringsource",
};

/*--- Type declarations ---*/
struct __pyx_obj_10euclidemu2_PyCosmology;
struct __pyx_obj_10euclidemu2_PyEuclidEmulator;

/* "euclidemu2.pyx":72
 * 
 * #Create new python classes for wrapping the c++ classes
 * cdef class PyCosmology:             # <<<<<<<<<<<<<<
 * 
 *      cdef Cosmology*cosm
 */
struct __pyx_obj_10euclidemu2_PyCosmology {
  PyObject_HEAD
  Cosmology *cosm;
};


/* "euclidemu2.pyx":94
 * 
 * 
 * cdef class PyEuclidEmulator:             # <<<<<<<<<<<<<<
 * 
 *     cdef EuclidEmulator*ee2
 */
struct __pyx_obj_10euclidemu2_PyEuclidEmulator {
  PyObject_HEAD
  EuclidEmulator *ee2;
};


/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* IncludeStringH.proto */
#include <string.h>

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if CYTHON_FAST_PYCALL
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif // CYTHON_FAST_PYCALL
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* PyFloatBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_TrueDivideObjC(PyObject *op1, PyObject *op2, double floatval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyFloat_TrueDivideObjC(op1, op2, floatval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceTrueDivide(op1, op2) : PyNumber_TrueDivide(op1, op2))
#endif

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  do {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  do {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* SliceObject.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'cython' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'euclidemu2' */
static PyTypeObject *__pyx_ptype_10euclidemu2_PyCosmology = 0;
static PyTypeObject *__pyx_ptype_10euclidemu2_PyEuclidEmulator = 0;
static std::vector<double>  __pyx_convert_vector_from_py_double(PyObject *); /*proto*/
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__Pyx_carray_to_py_double(double *, Py_ssize_t); /*proto*/
static CYTHON_INLINE PyObject *__Pyx_carray_to_tuple_double(double *, Py_ssize_t); /*proto*/
static int __Pyx_carray_from_py_double(PyObject *, double *, Py_ssize_t); /*proto*/
static CYTHON_INLINE PyObject *__Pyx_carray_to_py_double___5b_0x265_5d_(double (*)[0x265], Py_ssize_t); /*proto*/
static CYTHON_INLINE PyObject *__Pyx_carray_to_tuple_double___5b_0x265_5d_(double (*)[0x265], Py_ssize_t); /*proto*/
static int __Pyx_carray_from_py_double___5b_0x265_5d_(PyObject *, double (*)[0x265], Py_ssize_t); /*proto*/
#define __Pyx_MODULE_NAME "euclidemu2"
extern int __pyx_module_is_main_euclidemu2;
int __pyx_module_is_main_euclidemu2 = 0;

/* Implementation of 'euclidemu2' */
static PyObject *__pyx_builtin_ImportError;
static PyObject *__pyx_builtin_print;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_KeyError;
static PyObject *__pyx_builtin_max;
static PyObject *__pyx_builtin_min;
static PyObject *__pyx_builtin_any;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_zip;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_OverflowError;
static PyObject *__pyx_builtin_IndexError;
static const char __pyx_k_h[] = "h";
static const char __pyx_k_w[] = "w";
static const char __pyx_k_As[] = "As";
static const char __pyx_k_H0[] = "H0";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_ns[] = "ns";
static const char __pyx_k_pk[] = "pk";
static const char __pyx_k_w0[] = "w0";
static const char __pyx_k_wa[] = "wa";
static const char __pyx_k_A_s[] = "A_s";
static const char __pyx_k_Omb[] = "Omb";
static const char __pyx_k_Omc[] = "Omc";
static const char __pyx_k_Omm[] = "Omm";
static const char __pyx_k__13[] = ",";
static const char __pyx_k_any[] = "any";
static const char __pyx_k_csm[] = "csm";
static const char __pyx_k_exp[] = "exp";
static const char __pyx_k_mPk[] = "mPk";
static const char __pyx_k_max[] = "max";
static const char __pyx_k_min[] = "min";
static const char __pyx_k_mnu[] = "mnu";
static const char __pyx_k_n_s[] = "n_s";
static const char __pyx_k_set[] = "set";
static const char __pyx_k_sys[] = "_sys";
static const char __pyx_k_w_0[] = "w_0";
static const char __pyx_k_w_a[] = "w_a";
static const char __pyx_k_zip[] = "zip";
static const char __pyx_k_Bvec[] = "Bvec";
static const char __pyx_k_N_ur[] = "N_ur";
static const char __pyx_k_kvec[] = "kvec";
static const char __pyx_k_m_nu[] = "m_nu";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_om_b[] = "om_b";
static const char __pyx_k_om_m[] = "om_m";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_z_pk[] = "z_pk";
static const char __pyx_k_zvec[] = "zvec";
static const char __pyx_k_Class[] = "_Class";
static const char __pyx_k_array[] = "array";
static const char __pyx_k_log10[] = "log10";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_ombh2[] = "ombh2";
static const char __pyx_k_omch2[] = "omch2";
static const char __pyx_k_ommh2[] = "ommh2";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_shape[] = "shape";
static const char __pyx_k_sys_2[] = "sys";
static const char __pyx_k_N_ncdm[] = "N_ncdm";
static const char __pyx_k_classy[] = "classy";
static const char __pyx_k_hubble[] = "hubble";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_m_ncdm[] = "m_ncdm";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_output[] = "output";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_w0_fld[] = "w0_fld";
static const char __pyx_k_wa_fld[] = "wa_fld";
static const char __pyx_k_Class_2[] = "Class";
static const char __pyx_k_Omega_b[] = "Omega_b";
static const char __pyx_k_Omega_m[] = "Omega_m";
static const char __pyx_k_asarray[] = "asarray";
static const char __pyx_k_compute[] = "compute";
static const char __pyx_k_modules[] = "modules";
static const char __pyx_k_omega_b[] = "omega_b";
static const char __pyx_k_omega_m[] = "omega_m";
static const char __pyx_k_reshape[] = "reshape";
static const char __pyx_k_KeyError[] = "KeyError";
static const char __pyx_k_Sum_m_nu[] = "Sum_m_nu";
static const char __pyx_k_filename[] = "filename";
static const char __pyx_k_get_plin[] = "get_plin";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_redshift[] = "redshift";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_warnings[] = "warnings";
static const char __pyx_k_Omega_cdm[] = "Omega_cdm";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_get_boost[] = "get_boost";
static const char __pyx_k_omega_cdm[] = "omega_cdm";
static const char __pyx_k_ones_like[] = "ones_like";
static const char __pyx_k_redshifts[] = "redshifts";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_IndexError[] = "IndexError";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_make_class[] = "\t  'make class'";
static const char __pyx_k_n_redshift[] = "n_redshift";
static const char __pyx_k_warnings_2[] = "_warnings";
static const char __pyx_k_CubicSpline[] = "_CubicSpline";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_PyCosmology[] = "PyCosmology";
static const char __pyx_k_compute_nlc[] = "compute_nlc";
static const char __pyx_k_concatenate[] = "concatenate";
static const char __pyx_k_custom_kvec[] = "custom_kvec";
static const char __pyx_k_ln10_10_A_s[] = "ln10^{10}A_s";
static const char __pyx_k_Omega_Lambda[] = "Omega_Lambda";
static const char __pyx_k_Omega_baryon[] = "Omega_baryon";
static const char __pyx_k_Omega_matter[] = "Omega_matter";
static const char __pyx_k_cosmo_par_in[] = "cosmo_par_in";
static const char __pyx_k_CubicSpline_2[] = "CubicSpline";
static const char __pyx_k_OverflowError[] = "OverflowError";
static const char __pyx_k_P_k_max_1_Mpc[] = "P_k_max_1/Mpc";
static const char __pyx_k_emu_pars_dict[] = "emu_pars_dict";
static const char __pyx_k_neutrino_mass[] = "neutrino_mass";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_convert_to_emu[] = "convert_to_emu";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_PyEuclidEmulator[] = "PyEuclidEmulator";
static const char __pyx_k_arg_h_wrong_type[] = "arg h wrong type";
static const char __pyx_k_check_param_range[] = "check_param_range";
static const char __pyx_k_scipy_interpolate[] = "scipy.interpolate";
static const char __pyx_k_arg_A_s_wrong_type[] = "arg A_s wrong type";
static const char __pyx_k_arg_n_s_wrong_type[] = "arg n_s wrong type";
static const char __pyx_k_arg_w_0_wrong_type[] = "arg w_0 wrong type";
static const char __pyx_k_arg_w_a_wrong_type[] = "arg w_a wrong type";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_arg_Omega_b_wrong_type[] = "arg Omega_b wrong type";
static const char __pyx_k_arg_Omega_m_wrong_type[] = "arg Omega_m wrong type";
static const char __pyx_k_arg_Sum_m_nu_wrong_type[] = "arg Sum_m_nu wrong type";
static const char __pyx_k_Here_are_some_suggestions[] = "Here are some suggestions:\n";
static const char __pyx_k_full_power_spectra_though[] = "        full power spectra, though.";
static const char __pyx_k_Class_with_just_make_instead_of[] = "\t  Class with just ''make'' instead of ''make class''";
static const char __pyx_k_Classy_could_not_be_found_in_yo[] = "\nClassy could not be found in your system.";
static const char __pyx_k_Download_the_Class_from_class_c[] = "\t -Download the Class from class-code.net and install it";
static const char __pyx_k_If_you_know_that_Class_is_insta[] = "\t -If you know that Class is installed on your system";
static const char __pyx_k_Missing_parameter_Omega_b_Can_t[] = "Missing parameter Omega_b. Can't proceed.";
static const char __pyx_k_Missing_parameter_m_nu_Will_set[] = "Missing parameter m_nu. Will set to 0.";
static const char __pyx_k_Parameter_range_violation_Omega[] = "Parameter range violation: \nOmega_b is set to %f, but should be in the interval [0.04, 0.06].";
static const char __pyx_k_and_yet_classy_could_not_be_ins[] = "\t  and yet classy could not be installed, try re-compiling";
static const char __pyx_k_to_emulate_boost_factors_You_wo[] = "        to emulate boost factors. You won't be able to compute";
static const char __pyx_k_together_with_its_wrapper_class[] = "\t  together with its wrapper classy (type 'make' instead of";
static const char __pyx_k_EuclidEmulator2_allows_only_reds[] = "EuclidEmulator2 allows only redshifts in the interval [0.0, 10.0]";
static const char __pyx_k_Missing_parameter_A_s_or_ln10_10[] = "Missing parameter A_s or ln10^{10}A_s. Can't proceed.";
static const char __pyx_k_Missing_parameter_Omega_m_or_Ome[] = "Missing parameter Omega_m or Omega_cdm. Can't proceed.";
static const char __pyx_k_Missing_parameter_h_Can_t_procee[] = "Missing parameter h. Can't proceed.";
static const char __pyx_k_Missing_parameter_n_s_Can_t_proc[] = "Missing parameter n_s. Can't proceed.";
static const char __pyx_k_Missing_parameter_w0_Will_set_to[] = "Missing parameter w0. Will set to -1.";
static const char __pyx_k_Missing_parameter_wa_Will_set_to[] = "Missing parameter wa. Will set to 0.";
static const char __pyx_k_NOTICE_Even_without_classy_you_c[] = "NOTICE: Even without classy you can still use EuclidEmulator2";
static const char __pyx_k_Parameter_range_violation_A_s_is[] = "Parameter range violation: \nA_s is set to %e, but should be in the interval [1.7e-9, 2.5e-9].";
static const char __pyx_k_Parameter_range_violation_h_is_s[] = "Parameter range violation: \nh is set to %f, but should be in the interval [0.61, 0.73].";
static const char __pyx_k_Parameter_range_violation_m_ncdm[] = "Parameter range violation: \nm_ncdm is set to %f, but should be in the interval [0.00, 0.15].";
static const char __pyx_k_Parameter_range_violation_n_s_is[] = "Parameter range violation: \nn_s is set to %f, but should be in the interval [0.92, 1.00].";
static const char __pyx_k_Parameter_range_violation_w_0_is[] = "Parameter range violation: \nw_0 is set to %f, but should be in the interval [-1.3, -0.7].";
static const char __pyx_k_Parameter_range_violation_w_a_is[] = "Parameter range violation: \nw_a is set to %f, but should be in the interval [-0.7,  0.5].";
static const char __pyx_k_The_cosmological_parameters_must[] = "The cosmological parameters must be passed as a python dictionary.";
static const char __pyx_k_Warning_EuclidEmulator2_emulates[] = "Warning:\nEuclidEmulator2 emulates the non-linear correction in \nthe interval [8.73e-3 h/Mpc, 9.41h/Mpc]. You are \nrequesting k modes beyond k_max = 9.41h/Mpc. \nHigher k modes constantly extrapolated.";
static const char __pyx_k_You_have_not_imported_neither_cl[] = "You have not imported neither classee nor classy.\n                    Computing linear power spectrum is hence not possible.";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_Parameter_range_violation_Omega_2[] = "Parameter range violation: \nOmega_m is set to %f, but should be in the interval [0.24, 0.40].";
static const char __pyx_k_Warning_EuclidEmulator2_emulates_2[] = "Warning:\nEuclidEmulator2 emulates the non-linear correction in \nthe interval [8.73e-3 h/Mpc, 9.41h/Mpc]. You are \nrequesting k modes below k_min = 8.73e-3 h/Mpc. \nLower k modes constantly extrapolated.";
static const char __pyx_k_You_have_not_imported_neither_cl_2[] = "You have not imported neither classee nor classy.\n                    Emulating full power spectrum is hence not possible.";
static PyObject *__pyx_n_s_A_s;
static PyObject *__pyx_n_u_A_s;
static PyObject *__pyx_n_u_As;
static PyObject *__pyx_n_s_Bvec;
static PyObject *__pyx_n_s_Class;
static PyObject *__pyx_n_s_Class_2;
static PyObject *__pyx_kp_u_Class_with_just_make_instead_of;
static PyObject *__pyx_kp_u_Classy_could_not_be_found_in_yo;
static PyObject *__pyx_n_s_CubicSpline;
static PyObject *__pyx_n_s_CubicSpline_2;
static PyObject *__pyx_kp_u_Download_the_Class_from_class_c;
static PyObject *__pyx_kp_u_EuclidEmulator2_allows_only_reds;
static PyObject *__pyx_n_u_H0;
static PyObject *__pyx_kp_u_Here_are_some_suggestions;
static PyObject *__pyx_kp_u_If_you_know_that_Class_is_insta;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_n_s_IndexError;
static PyObject *__pyx_n_s_KeyError;
static PyObject *__pyx_kp_u_Missing_parameter_A_s_or_ln10_10;
static PyObject *__pyx_kp_u_Missing_parameter_Omega_b_Can_t;
static PyObject *__pyx_kp_u_Missing_parameter_Omega_m_or_Ome;
static PyObject *__pyx_kp_u_Missing_parameter_h_Can_t_procee;
static PyObject *__pyx_kp_u_Missing_parameter_m_nu_Will_set;
static PyObject *__pyx_kp_u_Missing_parameter_n_s_Can_t_proc;
static PyObject *__pyx_kp_u_Missing_parameter_w0_Will_set_to;
static PyObject *__pyx_kp_u_Missing_parameter_wa_Will_set_to;
static PyObject *__pyx_kp_u_NOTICE_Even_without_classy_you_c;
static PyObject *__pyx_n_u_N_ncdm;
static PyObject *__pyx_n_u_N_ur;
static PyObject *__pyx_n_u_Omb;
static PyObject *__pyx_n_u_Omc;
static PyObject *__pyx_n_u_Omega_Lambda;
static PyObject *__pyx_n_s_Omega_b;
static PyObject *__pyx_n_u_Omega_b;
static PyObject *__pyx_n_u_Omega_baryon;
static PyObject *__pyx_n_u_Omega_cdm;
static PyObject *__pyx_n_s_Omega_m;
static PyObject *__pyx_n_u_Omega_m;
static PyObject *__pyx_n_u_Omega_matter;
static PyObject *__pyx_n_u_Omm;
static PyObject *__pyx_n_s_OverflowError;
static PyObject *__pyx_kp_u_P_k_max_1_Mpc;
static PyObject *__pyx_kp_u_Parameter_range_violation_A_s_is;
static PyObject *__pyx_kp_u_Parameter_range_violation_Omega;
static PyObject *__pyx_kp_u_Parameter_range_violation_Omega_2;
static PyObject *__pyx_kp_u_Parameter_range_violation_h_is_s;
static PyObject *__pyx_kp_u_Parameter_range_violation_m_ncdm;
static PyObject *__pyx_kp_u_Parameter_range_violation_n_s_is;
static PyObject *__pyx_kp_u_Parameter_range_violation_w_0_is;
static PyObject *__pyx_kp_u_Parameter_range_violation_w_a_is;
static PyObject *__pyx_n_s_PyCosmology;
static PyObject *__pyx_n_s_PyEuclidEmulator;
static PyObject *__pyx_n_s_Sum_m_nu;
static PyObject *__pyx_kp_u_The_cosmological_parameters_must;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_kp_u_Warning_EuclidEmulator2_emulates;
static PyObject *__pyx_kp_u_Warning_EuclidEmulator2_emulates_2;
static PyObject *__pyx_kp_u_You_have_not_imported_neither_cl;
static PyObject *__pyx_kp_u_You_have_not_imported_neither_cl_2;
static PyObject *__pyx_kp_u__13;
static PyObject *__pyx_kp_u_and_yet_classy_could_not_be_ins;
static PyObject *__pyx_n_s_any;
static PyObject *__pyx_kp_u_arg_A_s_wrong_type;
static PyObject *__pyx_kp_u_arg_Omega_b_wrong_type;
static PyObject *__pyx_kp_u_arg_Omega_m_wrong_type;
static PyObject *__pyx_kp_u_arg_Sum_m_nu_wrong_type;
static PyObject *__pyx_kp_u_arg_h_wrong_type;
static PyObject *__pyx_kp_u_arg_n_s_wrong_type;
static PyObject *__pyx_kp_u_arg_w_0_wrong_type;
static PyObject *__pyx_kp_u_arg_w_a_wrong_type;
static PyObject *__pyx_n_s_array;
static PyObject *__pyx_n_s_asarray;
static PyObject *__pyx_n_s_check_param_range;
static PyObject *__pyx_n_s_classy;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_compute;
static PyObject *__pyx_n_s_compute_nlc;
static PyObject *__pyx_n_s_concatenate;
static PyObject *__pyx_n_s_convert_to_emu;
static PyObject *__pyx_n_s_cosmo_par_in;
static PyObject *__pyx_n_s_csm;
static PyObject *__pyx_n_s_custom_kvec;
static PyObject *__pyx_n_s_emu_pars_dict;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_exp;
static PyObject *__pyx_n_s_filename;
static PyObject *__pyx_kp_u_full_power_spectra_though;
static PyObject *__pyx_n_s_get_boost;
static PyObject *__pyx_n_s_get_plin;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_h;
static PyObject *__pyx_n_u_h;
static PyObject *__pyx_n_u_hubble;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_kvec;
static PyObject *__pyx_kp_u_ln10_10_A_s;
static PyObject *__pyx_n_s_log10;
static PyObject *__pyx_n_u_mPk;
static PyObject *__pyx_n_u_m_ncdm;
static PyObject *__pyx_n_u_m_nu;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_kp_u_make_class;
static PyObject *__pyx_n_s_max;
static PyObject *__pyx_n_s_min;
static PyObject *__pyx_n_u_mnu;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_modules;
static PyObject *__pyx_n_s_n_redshift;
static PyObject *__pyx_n_s_n_s;
static PyObject *__pyx_n_u_n_s;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_u_neutrino_mass;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_u_ns;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_n_u_om_b;
static PyObject *__pyx_n_u_om_m;
static PyObject *__pyx_n_u_ombh2;
static PyObject *__pyx_n_u_omch2;
static PyObject *__pyx_n_u_omega_b;
static PyObject *__pyx_n_u_omega_cdm;
static PyObject *__pyx_n_u_omega_m;
static PyObject *__pyx_n_u_ommh2;
static PyObject *__pyx_n_s_ones_like;
static PyObject *__pyx_n_u_output;
static PyObject *__pyx_n_s_pk;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_redshift;
static PyObject *__pyx_n_s_redshifts;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_reshape;
static PyObject *__pyx_n_s_scipy_interpolate;
static PyObject *__pyx_n_s_set;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_shape;
static PyObject *__pyx_n_s_sys;
static PyObject *__pyx_n_s_sys_2;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_kp_u_to_emulate_boost_factors_You_wo;
static PyObject *__pyx_kp_u_together_with_its_wrapper_class;
static PyObject *__pyx_n_u_w;
static PyObject *__pyx_n_u_w0;
static PyObject *__pyx_n_u_w0_fld;
static PyObject *__pyx_n_s_w_0;
static PyObject *__pyx_n_u_w_0;
static PyObject *__pyx_n_s_w_a;
static PyObject *__pyx_n_u_w_a;
static PyObject *__pyx_n_u_wa;
static PyObject *__pyx_n_u_wa_fld;
static PyObject *__pyx_n_s_warnings;
static PyObject *__pyx_n_s_warnings_2;
static PyObject *__pyx_n_u_z_pk;
static PyObject *__pyx_n_s_zip;
static PyObject *__pyx_n_s_zvec;
static int __pyx_pf_10euclidemu2_11PyCosmology___cinit__(struct __pyx_obj_10euclidemu2_PyCosmology *__pyx_v_self, double __pyx_v_Omega_b, double __pyx_v_Omega_m, double __pyx_v_Sum_m_nu, double __pyx_v_n_s, double __pyx_v_h, double __pyx_v_w_0, double __pyx_v_w_a, double __pyx_v_A_s); /* proto */
static void __pyx_pf_10euclidemu2_11PyCosmology_2__dealloc__(struct __pyx_obj_10euclidemu2_PyCosmology *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10euclidemu2_11PyCosmology_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_10euclidemu2_PyCosmology *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10euclidemu2_11PyCosmology_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_10euclidemu2_PyCosmology *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_10euclidemu2_16PyEuclidEmulator___cinit__(struct __pyx_obj_10euclidemu2_PyEuclidEmulator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10euclidemu2_16PyEuclidEmulator_2compute_nlc(struct __pyx_obj_10euclidemu2_PyEuclidEmulator *__pyx_v_self, struct __pyx_obj_10euclidemu2_PyCosmology *__pyx_v_csm, PyObject *__pyx_v_redshift, PyObject *__pyx_v_n_redshift); /* proto */
static PyObject *__pyx_pf_10euclidemu2_16PyEuclidEmulator_4write_nlc2file(struct __pyx_obj_10euclidemu2_PyEuclidEmulator *__pyx_v_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_zvec, PyObject *__pyx_v_n_redshift); /* proto */
static void __pyx_pf_10euclidemu2_16PyEuclidEmulator_6__dealloc__(struct __pyx_obj_10euclidemu2_PyEuclidEmulator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10euclidemu2_16PyEuclidEmulator_4kvec___get__(struct __pyx_obj_10euclidemu2_PyEuclidEmulator *__pyx_v_self); /* proto */
static int __pyx_pf_10euclidemu2_16PyEuclidEmulator_4kvec_2__set__(struct __pyx_obj_10euclidemu2_PyEuclidEmulator *__pyx_v_self, PyObject *__pyx_v_kvec); /* proto */
static int __pyx_pf_10euclidemu2_16PyEuclidEmulator_4kvec_4__del__(struct __pyx_obj_10euclidemu2_PyEuclidEmulator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10euclidemu2_16PyEuclidEmulator_4Bvec___get__(struct __pyx_obj_10euclidemu2_PyEuclidEmulator *__pyx_v_self); /* proto */
static int __pyx_pf_10euclidemu2_16PyEuclidEmulator_4Bvec_2__set__(struct __pyx_obj_10euclidemu2_PyEuclidEmulator *__pyx_v_self, PyObject *__pyx_v_Bvec); /* proto */
static int __pyx_pf_10euclidemu2_16PyEuclidEmulator_4Bvec_4__del__(struct __pyx_obj_10euclidemu2_PyEuclidEmulator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10euclidemu2_16PyEuclidEmulator_8check_param_range(CYTHON_UNUSED struct __pyx_obj_10euclidemu2_PyEuclidEmulator *__pyx_v_self, PyObject *__pyx_v_par_dict); /* proto */
static PyObject *__pyx_pf_10euclidemu2_16PyEuclidEmulator_10convert_to_emu(CYTHON_UNUSED struct __pyx_obj_10euclidemu2_PyEuclidEmulator *__pyx_v_self, PyObject *__pyx_v_class_pars_dict); /* proto */
static PyObject *__pyx_pf_10euclidemu2_16PyEuclidEmulator_12get_boost(struct __pyx_obj_10euclidemu2_PyEuclidEmulator *__pyx_v_self, PyObject *__pyx_v_cosmo_par_in, PyObject *__pyx_v_redshifts, PyObject *__pyx_v_custom_kvec); /* proto */
static PyObject *__pyx_pf_10euclidemu2_16PyEuclidEmulator_14get_plin(struct __pyx_obj_10euclidemu2_PyEuclidEmulator *__pyx_v_self, PyObject *__pyx_v_emu_pars_dict, PyObject *__pyx_v_custom_kvec, PyObject *__pyx_v_redshifts); /* proto */
static PyObject *__pyx_pf_10euclidemu2_16PyEuclidEmulator_16get_pnonlin(struct __pyx_obj_10euclidemu2_PyEuclidEmulator *__pyx_v_self, PyObject *__pyx_v_emu_pars_dict, PyObject *__pyx_v_redshifts, PyObject *__pyx_v_custom_kvec); /* proto */
static PyObject *__pyx_pf_10euclidemu2_16PyEuclidEmulator_18__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_10euclidemu2_PyEuclidEmulator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10euclidemu2_16PyEuclidEmulator_20__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_10euclidemu2_PyEuclidEmulator *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_10euclidemu2_PyCosmology(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10euclidemu2_PyEuclidEmulator(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_float_0_0;
static PyObject *__pyx_float_0_5;
static PyObject *__pyx_float_10_;
static PyObject *__pyx_float_0_00;
static PyObject *__pyx_float_0_04;
static PyObject *__pyx_float_0_06;
static PyObject *__pyx_float_0_15;
static PyObject *__pyx_float_0_24;
static PyObject *__pyx_float_0_40;
static PyObject *__pyx_float_0_61;
static PyObject *__pyx_float_0_73;
static PyObject *__pyx_float_0_92;
static PyObject *__pyx_float_1_00;
static PyObject *__pyx_float_10_0;
static PyObject *__pyx_float_100_;
static PyObject *__pyx_float_93_14;
static PyObject *__pyx_float_1_7eneg_9;
static PyObject *__pyx_float_2_0308;
static PyObject *__pyx_float_2_5eneg_9;
static PyObject *__pyx_float_1_0eneg_10;
static PyObject *__pyx_float_neg_0_7;
static PyObject *__pyx_float_neg_1_0;
static PyObject *__pyx_float_neg_1_3;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
/* Late includes */

/* "euclidemu2.pyx":77
 * 
 * 
 *      def __cinit__(self, double Omega_b , double Omega_m , double Sum_m_nu , double n_s , double h , double w_0 , double w_a , double A_s ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void Cosmology(double Omega_b, double Omega_m, double Sum_m_nu, double n_s, double h, double w_0, double w_a, double A_s)"""
 *         assert isinstance(Omega_b, float), 'arg Omega_b wrong type'
 */

/* Python wrapper */
static int __pyx_pw_10euclidemu2_11PyCosmology_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_10euclidemu2_11PyCosmology_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_Omega_b;
  double __pyx_v_Omega_m;
  double __pyx_v_Sum_m_nu;
  double __pyx_v_n_s;
  double __pyx_v_h;
  double __pyx_v_w_0;
  double __pyx_v_w_a;
  double __pyx_v_A_s;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_Omega_b,&__pyx_n_s_Omega_m,&__pyx_n_s_Sum_m_nu,&__pyx_n_s_n_s,&__pyx_n_s_h,&__pyx_n_s_w_0,&__pyx_n_s_w_a,&__pyx_n_s_A_s,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Omega_b)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Omega_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 8, 8, 1); __PYX_ERR(0, 77, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_Sum_m_nu)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 8, 8, 2); __PYX_ERR(0, 77, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n_s)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 8, 8, 3); __PYX_ERR(0, 77, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_h)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 8, 8, 4); __PYX_ERR(0, 77, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_w_0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 8, 8, 5); __PYX_ERR(0, 77, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_w_a)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 8, 8, 6); __PYX_ERR(0, 77, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_A_s)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 8, 8, 7); __PYX_ERR(0, 77, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 77, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 8) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
    }
    __pyx_v_Omega_b = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_Omega_b == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 77, __pyx_L3_error)
    __pyx_v_Omega_m = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_Omega_m == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 77, __pyx_L3_error)
    __pyx_v_Sum_m_nu = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_Sum_m_nu == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 77, __pyx_L3_error)
    __pyx_v_n_s = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_n_s == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 77, __pyx_L3_error)
    __pyx_v_h = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_h == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 77, __pyx_L3_error)
    __pyx_v_w_0 = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_w_0 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 77, __pyx_L3_error)
    __pyx_v_w_a = __pyx_PyFloat_AsDouble(values[6]); if (unlikely((__pyx_v_w_a == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 77, __pyx_L3_error)
    __pyx_v_A_s = __pyx_PyFloat_AsDouble(values[7]); if (unlikely((__pyx_v_A_s == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 77, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 8, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 77, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("euclidemu2.PyCosmology.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10euclidemu2_11PyCosmology___cinit__(((struct __pyx_obj_10euclidemu2_PyCosmology *)__pyx_v_self), __pyx_v_Omega_b, __pyx_v_Omega_m, __pyx_v_Sum_m_nu, __pyx_v_n_s, __pyx_v_h, __pyx_v_w_0, __pyx_v_w_a, __pyx_v_A_s);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10euclidemu2_11PyCosmology___cinit__(struct __pyx_obj_10euclidemu2_PyCosmology *__pyx_v_self, double __pyx_v_Omega_b, double __pyx_v_Omega_m, double __pyx_v_Sum_m_nu, double __pyx_v_n_s, double __pyx_v_h, double __pyx_v_w_0, double __pyx_v_w_a, double __pyx_v_A_s) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Cosmology *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "euclidemu2.pyx":79
 *      def __cinit__(self, double Omega_b , double Omega_m , double Sum_m_nu , double n_s , double h , double w_0 , double w_a , double A_s ):
 *         """Cython signature: void Cosmology(double Omega_b, double Omega_m, double Sum_m_nu, double n_s, double h, double w_0, double w_a, double A_s)"""
 *         assert isinstance(Omega_b, float), 'arg Omega_b wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(Omega_m, float), 'arg Omega_m wrong type'
 *         assert isinstance(Sum_m_nu, float), 'arg Sum_m_nu wrong type'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_Omega_b); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyFloat_Check(__pyx_t_1); 
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_Omega_b_wrong_type);
      __PYX_ERR(0, 79, __pyx_L1_error)
    }
  }
  #endif

  /* "euclidemu2.pyx":80
 *         """Cython signature: void Cosmology(double Omega_b, double Omega_m, double Sum_m_nu, double n_s, double h, double w_0, double w_a, double A_s)"""
 *         assert isinstance(Omega_b, float), 'arg Omega_b wrong type'
 *         assert isinstance(Omega_m, float), 'arg Omega_m wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(Sum_m_nu, float), 'arg Sum_m_nu wrong type'
 *         assert isinstance(n_s, float), 'arg n_s wrong type'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_Omega_m); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 80, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyFloat_Check(__pyx_t_1); 
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_Omega_m_wrong_type);
      __PYX_ERR(0, 80, __pyx_L1_error)
    }
  }
  #endif

  /* "euclidemu2.pyx":81
 *         assert isinstance(Omega_b, float), 'arg Omega_b wrong type'
 *         assert isinstance(Omega_m, float), 'arg Omega_m wrong type'
 *         assert isinstance(Sum_m_nu, float), 'arg Sum_m_nu wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(n_s, float), 'arg n_s wrong type'
 *         assert isinstance(h, float), 'arg h wrong type'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_Sum_m_nu); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 81, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyFloat_Check(__pyx_t_1); 
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_Sum_m_nu_wrong_type);
      __PYX_ERR(0, 81, __pyx_L1_error)
    }
  }
  #endif

  /* "euclidemu2.pyx":82
 *         assert isinstance(Omega_m, float), 'arg Omega_m wrong type'
 *         assert isinstance(Sum_m_nu, float), 'arg Sum_m_nu wrong type'
 *         assert isinstance(n_s, float), 'arg n_s wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(h, float), 'arg h wrong type'
 *         assert isinstance(w_0, float), 'arg w_0 wrong type'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_n_s); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyFloat_Check(__pyx_t_1); 
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_n_s_wrong_type);
      __PYX_ERR(0, 82, __pyx_L1_error)
    }
  }
  #endif

  /* "euclidemu2.pyx":83
 *         assert isinstance(Sum_m_nu, float), 'arg Sum_m_nu wrong type'
 *         assert isinstance(n_s, float), 'arg n_s wrong type'
 *         assert isinstance(h, float), 'arg h wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(w_0, float), 'arg w_0 wrong type'
 *         assert isinstance(w_a, float), 'arg w_a wrong type'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_h); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 83, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyFloat_Check(__pyx_t_1); 
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_h_wrong_type);
      __PYX_ERR(0, 83, __pyx_L1_error)
    }
  }
  #endif

  /* "euclidemu2.pyx":84
 *         assert isinstance(n_s, float), 'arg n_s wrong type'
 *         assert isinstance(h, float), 'arg h wrong type'
 *         assert isinstance(w_0, float), 'arg w_0 wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(w_a, float), 'arg w_a wrong type'
 *         assert isinstance(A_s, float), 'arg A_s wrong type'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_w_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyFloat_Check(__pyx_t_1); 
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_w_0_wrong_type);
      __PYX_ERR(0, 84, __pyx_L1_error)
    }
  }
  #endif

  /* "euclidemu2.pyx":85
 *         assert isinstance(h, float), 'arg h wrong type'
 *         assert isinstance(w_0, float), 'arg w_0 wrong type'
 *         assert isinstance(w_a, float), 'arg w_a wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(A_s, float), 'arg A_s wrong type'
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_w_a); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 85, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyFloat_Check(__pyx_t_1); 
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_w_a_wrong_type);
      __PYX_ERR(0, 85, __pyx_L1_error)
    }
  }
  #endif

  /* "euclidemu2.pyx":86
 *         assert isinstance(w_0, float), 'arg w_0 wrong type'
 *         assert isinstance(w_a, float), 'arg w_a wrong type'
 *         assert isinstance(A_s, float), 'arg A_s wrong type'             # <<<<<<<<<<<<<<
 * 
 *         self.cosm = new Cosmology((<double>Omega_b), (<double>Omega_m), (<double>Sum_m_nu), (<double>n_s), (<double>h), (<double>w_0), (<double>w_a), (<double>A_s))
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_A_s); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 86, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyFloat_Check(__pyx_t_1); 
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_arg_A_s_wrong_type);
      __PYX_ERR(0, 86, __pyx_L1_error)
    }
  }
  #endif

  /* "euclidemu2.pyx":88
 *         assert isinstance(A_s, float), 'arg A_s wrong type'
 * 
 *         self.cosm = new Cosmology((<double>Omega_b), (<double>Omega_m), (<double>Sum_m_nu), (<double>n_s), (<double>h), (<double>w_0), (<double>w_a), (<double>A_s))             # <<<<<<<<<<<<<<
 * 
 *      def __dealloc__(self):
 */
  try {
    __pyx_t_3 = new Cosmology(((double)__pyx_v_Omega_b), ((double)__pyx_v_Omega_m), ((double)__pyx_v_Sum_m_nu), ((double)__pyx_v_n_s), ((double)__pyx_v_h), ((double)__pyx_v_w_0), ((double)__pyx_v_w_a), ((double)__pyx_v_A_s));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 88, __pyx_L1_error)
  }
  __pyx_v_self->cosm = __pyx_t_3;

  /* "euclidemu2.pyx":77
 * 
 * 
 *      def __cinit__(self, double Omega_b , double Omega_m , double Sum_m_nu , double n_s , double h , double w_0 , double w_a , double A_s ):             # <<<<<<<<<<<<<<
 *         """Cython signature: void Cosmology(double Omega_b, double Omega_m, double Sum_m_nu, double n_s, double h, double w_0, double w_a, double A_s)"""
 *         assert isinstance(Omega_b, float), 'arg Omega_b wrong type'
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("euclidemu2.PyCosmology.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "euclidemu2.pyx":90
 *         self.cosm = new Cosmology((<double>Omega_b), (<double>Omega_m), (<double>Sum_m_nu), (<double>n_s), (<double>h), (<double>w_0), (<double>w_a), (<double>A_s))
 * 
 *      def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.cosm
 * 
 */

/* Python wrapper */
static void __pyx_pw_10euclidemu2_11PyCosmology_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_10euclidemu2_11PyCosmology_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_10euclidemu2_11PyCosmology_2__dealloc__(((struct __pyx_obj_10euclidemu2_PyCosmology *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_10euclidemu2_11PyCosmology_2__dealloc__(struct __pyx_obj_10euclidemu2_PyCosmology *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "euclidemu2.pyx":91
 * 
 *      def __dealloc__(self):
 *         del self.cosm             # <<<<<<<<<<<<<<
 * 
 * 
 */
  delete __pyx_v_self->cosm;

  /* "euclidemu2.pyx":90
 *         self.cosm = new Cosmology((<double>Omega_b), (<double>Omega_m), (<double>Sum_m_nu), (<double>n_s), (<double>h), (<double>w_0), (<double>w_a), (<double>A_s))
 * 
 *      def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.cosm
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10euclidemu2_11PyCosmology_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10euclidemu2_11PyCosmology_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10euclidemu2_11PyCosmology_4__reduce_cython__(((struct __pyx_obj_10euclidemu2_PyCosmology *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10euclidemu2_11PyCosmology_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_10euclidemu2_PyCosmology *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("euclidemu2.PyCosmology.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_10euclidemu2_11PyCosmology_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_10euclidemu2_11PyCosmology_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10euclidemu2_11PyCosmology_6__setstate_cython__(((struct __pyx_obj_10euclidemu2_PyCosmology *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10euclidemu2_11PyCosmology_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_10euclidemu2_PyCosmology *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("euclidemu2.PyCosmology.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "euclidemu2.pyx":98
 *     cdef EuclidEmulator*ee2
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.ee2 = new EuclidEmulator()
 * 
 */

/* Python wrapper */
static int __pyx_pw_10euclidemu2_16PyEuclidEmulator_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_10euclidemu2_16PyEuclidEmulator_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_10euclidemu2_16PyEuclidEmulator___cinit__(((struct __pyx_obj_10euclidemu2_PyEuclidEmulator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10euclidemu2_16PyEuclidEmulator___cinit__(struct __pyx_obj_10euclidemu2_PyEuclidEmulator *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  EuclidEmulator *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "euclidemu2.pyx":99
 * 
 *     def __cinit__(self):
 *         self.ee2 = new EuclidEmulator()             # <<<<<<<<<<<<<<
 * 
 *     def compute_nlc(self,PyCosmology csm, redshift, n_redshift):
 */
  try {
    __pyx_t_1 = new EuclidEmulator();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 99, __pyx_L1_error)
  }
  __pyx_v_self->ee2 = __pyx_t_1;

  /* "euclidemu2.pyx":98
 *     cdef EuclidEmulator*ee2
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.ee2 = new EuclidEmulator()
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("euclidemu2.PyEuclidEmulator.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "euclidemu2.pyx":101
 *         self.ee2 = new EuclidEmulator()
 * 
 *     def compute_nlc(self,PyCosmology csm, redshift, n_redshift):             # <<<<<<<<<<<<<<
 *         self.ee2.compute_nlc((<Cosmology *> csm.cosm), redshift, n_redshift)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10euclidemu2_16PyEuclidEmulator_3compute_nlc(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10euclidemu2_16PyEuclidEmulator_3compute_nlc(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_10euclidemu2_PyCosmology *__pyx_v_csm = 0;
  PyObject *__pyx_v_redshift = 0;
  PyObject *__pyx_v_n_redshift = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_nlc (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_csm,&__pyx_n_s_redshift,&__pyx_n_s_n_redshift,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_csm)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_redshift)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_nlc", 1, 3, 3, 1); __PYX_ERR(0, 101, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n_redshift)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_nlc", 1, 3, 3, 2); __PYX_ERR(0, 101, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_nlc") < 0)) __PYX_ERR(0, 101, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_csm = ((struct __pyx_obj_10euclidemu2_PyCosmology *)values[0]);
    __pyx_v_redshift = values[1];
    __pyx_v_n_redshift = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_nlc", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 101, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("euclidemu2.PyEuclidEmulator.compute_nlc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_csm), __pyx_ptype_10euclidemu2_PyCosmology, 1, "csm", 0))) __PYX_ERR(0, 101, __pyx_L1_error)
  __pyx_r = __pyx_pf_10euclidemu2_16PyEuclidEmulator_2compute_nlc(((struct __pyx_obj_10euclidemu2_PyEuclidEmulator *)__pyx_v_self), __pyx_v_csm, __pyx_v_redshift, __pyx_v_n_redshift);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10euclidemu2_16PyEuclidEmulator_2compute_nlc(struct __pyx_obj_10euclidemu2_PyEuclidEmulator *__pyx_v_self, struct __pyx_obj_10euclidemu2_PyCosmology *__pyx_v_csm, PyObject *__pyx_v_redshift, PyObject *__pyx_v_n_redshift) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<double>  __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute_nlc", 0);

  /* "euclidemu2.pyx":102
 * 
 *     def compute_nlc(self,PyCosmology csm, redshift, n_redshift):
 *         self.ee2.compute_nlc((<Cosmology *> csm.cosm), redshift, n_redshift)             # <<<<<<<<<<<<<<
 * 
 *     def write_nlc2file(self,filename, zvec, n_redshift):
 */
  __pyx_t_1 = __pyx_convert_vector_from_py_double(__pyx_v_redshift); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 102, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_n_redshift); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 102, __pyx_L1_error)
  __pyx_v_self->ee2->compute_nlc(((Cosmology *)__pyx_v_csm->cosm), __pyx_t_1, __pyx_t_2);

  /* "euclidemu2.pyx":101
 *         self.ee2 = new EuclidEmulator()
 * 
 *     def compute_nlc(self,PyCosmology csm, redshift, n_redshift):             # <<<<<<<<<<<<<<
 *         self.ee2.compute_nlc((<Cosmology *> csm.cosm), redshift, n_redshift)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("euclidemu2.PyEuclidEmulator.compute_nlc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "euclidemu2.pyx":104
 *         self.ee2.compute_nlc((<Cosmology *> csm.cosm), redshift, n_redshift)
 * 
 *     def write_nlc2file(self,filename, zvec, n_redshift):             # <<<<<<<<<<<<<<
 *         self.ee2.write_nlc2file(<string>filename, zvec, n_redshift)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10euclidemu2_16PyEuclidEmulator_5write_nlc2file(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10euclidemu2_16PyEuclidEmulator_5write_nlc2file(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_zvec = 0;
  PyObject *__pyx_v_n_redshift = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write_nlc2file (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_zvec,&__pyx_n_s_n_redshift,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_zvec)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("write_nlc2file", 1, 3, 3, 1); __PYX_ERR(0, 104, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n_redshift)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("write_nlc2file", 1, 3, 3, 2); __PYX_ERR(0, 104, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "write_nlc2file") < 0)) __PYX_ERR(0, 104, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_filename = values[0];
    __pyx_v_zvec = values[1];
    __pyx_v_n_redshift = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("write_nlc2file", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 104, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("euclidemu2.PyEuclidEmulator.write_nlc2file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10euclidemu2_16PyEuclidEmulator_4write_nlc2file(((struct __pyx_obj_10euclidemu2_PyEuclidEmulator *)__pyx_v_self), __pyx_v_filename, __pyx_v_zvec, __pyx_v_n_redshift);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10euclidemu2_16PyEuclidEmulator_4write_nlc2file(struct __pyx_obj_10euclidemu2_PyEuclidEmulator *__pyx_v_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_zvec, PyObject *__pyx_v_n_redshift) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  std::vector<double>  __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write_nlc2file", 0);

  /* "euclidemu2.pyx":105
 * 
 *     def write_nlc2file(self,filename, zvec, n_redshift):
 *         self.ee2.write_nlc2file(<string>filename, zvec, n_redshift)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_filename); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 105, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_vector_from_py_double(__pyx_v_zvec); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 105, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_n_redshift); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 105, __pyx_L1_error)
  __pyx_v_self->ee2->write_nlc2file(((std::string)__pyx_t_1), __pyx_t_2, __pyx_t_3);

  /* "euclidemu2.pyx":104
 *         self.ee2.compute_nlc((<Cosmology *> csm.cosm), redshift, n_redshift)
 * 
 *     def write_nlc2file(self,filename, zvec, n_redshift):             # <<<<<<<<<<<<<<
 *         self.ee2.write_nlc2file(<string>filename, zvec, n_redshift)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("euclidemu2.PyEuclidEmulator.write_nlc2file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "euclidemu2.pyx":107
 *         self.ee2.write_nlc2file(<string>filename, zvec, n_redshift)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.ee2
 * 
 */

/* Python wrapper */
static void __pyx_pw_10euclidemu2_16PyEuclidEmulator_7__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_10euclidemu2_16PyEuclidEmulator_7__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_10euclidemu2_16PyEuclidEmulator_6__dealloc__(((struct __pyx_obj_10euclidemu2_PyEuclidEmulator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_10euclidemu2_16PyEuclidEmulator_6__dealloc__(struct __pyx_obj_10euclidemu2_PyEuclidEmulator *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "euclidemu2.pyx":108
 * 
 *     def __dealloc__(self):
 *         del self.ee2             # <<<<<<<<<<<<<<
 * 
 *     # Attribute access
 */
  delete __pyx_v_self->ee2;

  /* "euclidemu2.pyx":107
 *         self.ee2.write_nlc2file(<string>filename, zvec, n_redshift)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.ee2
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "euclidemu2.pyx":112
 *     # Attribute access
 *     @property
 *     def kvec(self):             # <<<<<<<<<<<<<<
 *         return self.ee2.kvec
 *     @kvec.setter
 */

/* Python wrapper */
static PyObject *__pyx_pw_10euclidemu2_16PyEuclidEmulator_4kvec_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10euclidemu2_16PyEuclidEmulator_4kvec_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10euclidemu2_16PyEuclidEmulator_4kvec___get__(((struct __pyx_obj_10euclidemu2_PyEuclidEmulator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10euclidemu2_16PyEuclidEmulator_4kvec___get__(struct __pyx_obj_10euclidemu2_PyEuclidEmulator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "euclidemu2.pyx":113
 *     @property
 *     def kvec(self):
 *         return self.ee2.kvec             # <<<<<<<<<<<<<<
 *     @kvec.setter
 *     def kvec(self, kvec):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_carray_to_py_double(__pyx_v_self->ee2->kvec, 0x265); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "euclidemu2.pyx":112
 *     # Attribute access
 *     @property
 *     def kvec(self):             # <<<<<<<<<<<<<<
 *         return self.ee2.kvec
 *     @kvec.setter
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("euclidemu2.PyEuclidEmulator.kvec.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "euclidemu2.pyx":115
 *         return self.ee2.kvec
 *     @kvec.setter
 *     def kvec(self, kvec):             # <<<<<<<<<<<<<<
 *         self.ee2.kvec = kvec
 *     @kvec.deleter
 */

/* Python wrapper */
static int __pyx_pw_10euclidemu2_16PyEuclidEmulator_4kvec_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_kvec); /*proto*/
static int __pyx_pw_10euclidemu2_16PyEuclidEmulator_4kvec_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_kvec) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10euclidemu2_16PyEuclidEmulator_4kvec_2__set__(((struct __pyx_obj_10euclidemu2_PyEuclidEmulator *)__pyx_v_self), ((PyObject *)__pyx_v_kvec));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10euclidemu2_16PyEuclidEmulator_4kvec_2__set__(struct __pyx_obj_10euclidemu2_PyEuclidEmulator *__pyx_v_self, PyObject *__pyx_v_kvec) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1[0x265];
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "euclidemu2.pyx":116
 *     @kvec.setter
 *     def kvec(self, kvec):
 *         self.ee2.kvec = kvec             # <<<<<<<<<<<<<<
 *     @kvec.deleter
 *     def kvec(self):
 */
  if (unlikely(__Pyx_carray_from_py_double(__pyx_v_kvec, __pyx_t_1, 0x265) < 0)) __PYX_ERR(0, 116, __pyx_L1_error)
  if (unlikely((0x265) != (0x265))) {
    PyErr_Format(PyExc_ValueError, "Assignment to slice of wrong length, expected %" CYTHON_FORMAT_SSIZE_T "d, got %" CYTHON_FORMAT_SSIZE_T "d", (Py_ssize_t)(0x265), (Py_ssize_t)(0x265));
    __PYX_ERR(0, 116, __pyx_L1_error)
  }
  memcpy(&(__pyx_v_self->ee2->kvec[0]), __pyx_t_1, sizeof(__pyx_v_self->ee2->kvec[0]) * (0x265));

  /* "euclidemu2.pyx":115
 *         return self.ee2.kvec
 *     @kvec.setter
 *     def kvec(self, kvec):             # <<<<<<<<<<<<<<
 *         self.ee2.kvec = kvec
 *     @kvec.deleter
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("euclidemu2.PyEuclidEmulator.kvec.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "euclidemu2.pyx":118
 *         self.ee2.kvec = kvec
 *     @kvec.deleter
 *     def kvec(self):             # <<<<<<<<<<<<<<
 *         del self.kvec
 * 
 */

/* Python wrapper */
static int __pyx_pw_10euclidemu2_16PyEuclidEmulator_4kvec_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_10euclidemu2_16PyEuclidEmulator_4kvec_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10euclidemu2_16PyEuclidEmulator_4kvec_4__del__(((struct __pyx_obj_10euclidemu2_PyEuclidEmulator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10euclidemu2_16PyEuclidEmulator_4kvec_4__del__(struct __pyx_obj_10euclidemu2_PyEuclidEmulator *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__", 0);

  /* "euclidemu2.pyx":119
 *     @kvec.deleter
 *     def kvec(self):
 *         del self.kvec             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  if (__Pyx_PyObject_DelAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_kvec) < 0) __PYX_ERR(0, 119, __pyx_L1_error)

  /* "euclidemu2.pyx":118
 *         self.ee2.kvec = kvec
 *     @kvec.deleter
 *     def kvec(self):             # <<<<<<<<<<<<<<
 *         del self.kvec
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("euclidemu2.PyEuclidEmulator.kvec.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "euclidemu2.pyx":122
 * 
 *     @property
 *     def Bvec(self):             # <<<<<<<<<<<<<<
 *         return self.ee2.Bvec
 *     @Bvec.setter
 */

/* Python wrapper */
static PyObject *__pyx_pw_10euclidemu2_16PyEuclidEmulator_4Bvec_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10euclidemu2_16PyEuclidEmulator_4Bvec_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10euclidemu2_16PyEuclidEmulator_4Bvec___get__(((struct __pyx_obj_10euclidemu2_PyEuclidEmulator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10euclidemu2_16PyEuclidEmulator_4Bvec___get__(struct __pyx_obj_10euclidemu2_PyEuclidEmulator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "euclidemu2.pyx":123
 *     @property
 *     def Bvec(self):
 *         return self.ee2.Bvec             # <<<<<<<<<<<<<<
 *     @Bvec.setter
 *     def Bvec(self, Bvec):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_carray_to_py_double___5b_0x265_5d_(__pyx_v_self->ee2->Bvec, 0x65); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "euclidemu2.pyx":122
 * 
 *     @property
 *     def Bvec(self):             # <<<<<<<<<<<<<<
 *         return self.ee2.Bvec
 *     @Bvec.setter
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("euclidemu2.PyEuclidEmulator.Bvec.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "euclidemu2.pyx":125
 *         return self.ee2.Bvec
 *     @Bvec.setter
 *     def Bvec(self, Bvec):             # <<<<<<<<<<<<<<
 *         self.ee2.Bvec = Bvec
 *     @Bvec.deleter
 */

/* Python wrapper */
static int __pyx_pw_10euclidemu2_16PyEuclidEmulator_4Bvec_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_Bvec); /*proto*/
static int __pyx_pw_10euclidemu2_16PyEuclidEmulator_4Bvec_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_Bvec) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10euclidemu2_16PyEuclidEmulator_4Bvec_2__set__(((struct __pyx_obj_10euclidemu2_PyEuclidEmulator *)__pyx_v_self), ((PyObject *)__pyx_v_Bvec));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10euclidemu2_16PyEuclidEmulator_4Bvec_2__set__(struct __pyx_obj_10euclidemu2_PyEuclidEmulator *__pyx_v_self, PyObject *__pyx_v_Bvec) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1[0x65][0x265];
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "euclidemu2.pyx":126
 *     @Bvec.setter
 *     def Bvec(self, Bvec):
 *         self.ee2.Bvec = Bvec             # <<<<<<<<<<<<<<
 *     @Bvec.deleter
 *     def Bvec(self):
 */
  if (unlikely(__Pyx_carray_from_py_double___5b_0x265_5d_(__pyx_v_Bvec, __pyx_t_1, 0x65) < 0)) __PYX_ERR(0, 126, __pyx_L1_error)
  if (unlikely((0x65) != (0x65))) {
    PyErr_Format(PyExc_ValueError, "Assignment to slice of wrong length, expected %" CYTHON_FORMAT_SSIZE_T "d, got %" CYTHON_FORMAT_SSIZE_T "d", (Py_ssize_t)(0x65), (Py_ssize_t)(0x65));
    __PYX_ERR(0, 126, __pyx_L1_error)
  }
  memcpy(&(__pyx_v_self->ee2->Bvec[0]), __pyx_t_1, sizeof(__pyx_v_self->ee2->Bvec[0]) * (0x65));

  /* "euclidemu2.pyx":125
 *         return self.ee2.Bvec
 *     @Bvec.setter
 *     def Bvec(self, Bvec):             # <<<<<<<<<<<<<<
 *         self.ee2.Bvec = Bvec
 *     @Bvec.deleter
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("euclidemu2.PyEuclidEmulator.Bvec.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "euclidemu2.pyx":128
 *         self.ee2.Bvec = Bvec
 *     @Bvec.deleter
 *     def Bvec(self):             # <<<<<<<<<<<<<<
 *         del self.Bvec
 * 
 */

/* Python wrapper */
static int __pyx_pw_10euclidemu2_16PyEuclidEmulator_4Bvec_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_10euclidemu2_16PyEuclidEmulator_4Bvec_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10euclidemu2_16PyEuclidEmulator_4Bvec_4__del__(((struct __pyx_obj_10euclidemu2_PyEuclidEmulator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10euclidemu2_16PyEuclidEmulator_4Bvec_4__del__(struct __pyx_obj_10euclidemu2_PyEuclidEmulator *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__del__", 0);

  /* "euclidemu2.pyx":129
 *     @Bvec.deleter
 *     def Bvec(self):
 *         del self.Bvec             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (__Pyx_PyObject_DelAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_Bvec) < 0) __PYX_ERR(0, 129, __pyx_L1_error)

  /* "euclidemu2.pyx":128
 *         self.ee2.Bvec = Bvec
 *     @Bvec.deleter
 *     def Bvec(self):             # <<<<<<<<<<<<<<
 *         del self.Bvec
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("euclidemu2.PyEuclidEmulator.Bvec.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "euclidemu2.pyx":139
 *     ######################################################
 * 
 *     def check_param_range(self,par_dict): #, csm_index=0): #Only one cosmology for now             # <<<<<<<<<<<<<<
 *         """
 *         Checks if all parameters in the cosmology dictionary 'par_dict'
 */

/* Python wrapper */
static PyObject *__pyx_pw_10euclidemu2_16PyEuclidEmulator_9check_param_range(PyObject *__pyx_v_self, PyObject *__pyx_v_par_dict); /*proto*/
static char __pyx_doc_10euclidemu2_16PyEuclidEmulator_8check_param_range[] = "\n        Checks if all parameters in the cosmology dictionary 'par_dict'\n        passed to this function obey the limits set by the emulator.\n        ";
static PyObject *__pyx_pw_10euclidemu2_16PyEuclidEmulator_9check_param_range(PyObject *__pyx_v_self, PyObject *__pyx_v_par_dict) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("check_param_range (wrapper)", 0);
  __pyx_r = __pyx_pf_10euclidemu2_16PyEuclidEmulator_8check_param_range(((struct __pyx_obj_10euclidemu2_PyEuclidEmulator *)__pyx_v_self), ((PyObject *)__pyx_v_par_dict));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10euclidemu2_16PyEuclidEmulator_8check_param_range(CYTHON_UNUSED struct __pyx_obj_10euclidemu2_PyEuclidEmulator *__pyx_v_self, PyObject *__pyx_v_par_dict) {
  PyObject *__pyx_v_om_b_range = NULL;
  PyObject *__pyx_v_om_m_range = NULL;
  PyObject *__pyx_v_m_nu_range = NULL;
  PyObject *__pyx_v_n_s_range = NULL;
  PyObject *__pyx_v_h_range = NULL;
  PyObject *__pyx_v_w_0_range = NULL;
  PyObject *__pyx_v_w_a_range = NULL;
  PyObject *__pyx_v_A_s_range = NULL;
  PyObject *__pyx_v_om_b_not_in_range = NULL;
  PyObject *__pyx_v_om_m_not_in_range = NULL;
  PyObject *__pyx_v_m_nu_not_in_range = NULL;
  PyObject *__pyx_v_n_s_not_in_range = NULL;
  PyObject *__pyx_v_h_not_in_range = NULL;
  PyObject *__pyx_v_w_0_not_in_range = NULL;
  PyObject *__pyx_v_w_a_not_in_range = NULL;
  PyObject *__pyx_v_A_s_not_in_range = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("check_param_range", 0);

  /* "euclidemu2.pyx":145
 *         """
 * 
 *         om_b_range = [0.04, 0.06]             # <<<<<<<<<<<<<<
 *         om_m_range = [0.24, 0.40]
 *         m_nu_range = [0.00, 0.15]
 */
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_float_0_04);
  __Pyx_GIVEREF(__pyx_float_0_04);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_float_0_04);
  __Pyx_INCREF(__pyx_float_0_06);
  __Pyx_GIVEREF(__pyx_float_0_06);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_float_0_06);
  __pyx_v_om_b_range = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "euclidemu2.pyx":146
 * 
 *         om_b_range = [0.04, 0.06]
 *         om_m_range = [0.24, 0.40]             # <<<<<<<<<<<<<<
 *         m_nu_range = [0.00, 0.15]
 *         n_s_range  = [0.92, 1.00]
 */
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_float_0_24);
  __Pyx_GIVEREF(__pyx_float_0_24);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_float_0_24);
  __Pyx_INCREF(__pyx_float_0_40);
  __Pyx_GIVEREF(__pyx_float_0_40);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_float_0_40);
  __pyx_v_om_m_range = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "euclidemu2.pyx":147
 *         om_b_range = [0.04, 0.06]
 *         om_m_range = [0.24, 0.40]
 *         m_nu_range = [0.00, 0.15]             # <<<<<<<<<<<<<<
 *         n_s_range  = [0.92, 1.00]
 *         h_range    = [0.61, 0.73]
 */
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_float_0_00);
  __Pyx_GIVEREF(__pyx_float_0_00);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_float_0_00);
  __Pyx_INCREF(__pyx_float_0_15);
  __Pyx_GIVEREF(__pyx_float_0_15);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_float_0_15);
  __pyx_v_m_nu_range = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "euclidemu2.pyx":148
 *         om_m_range = [0.24, 0.40]
 *         m_nu_range = [0.00, 0.15]
 *         n_s_range  = [0.92, 1.00]             # <<<<<<<<<<<<<<
 *         h_range    = [0.61, 0.73]
 *         w_0_range  = [-1.3, -0.7]
 */
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_float_0_92);
  __Pyx_GIVEREF(__pyx_float_0_92);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_float_0_92);
  __Pyx_INCREF(__pyx_float_1_00);
  __Pyx_GIVEREF(__pyx_float_1_00);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_float_1_00);
  __pyx_v_n_s_range = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "euclidemu2.pyx":149
 *         m_nu_range = [0.00, 0.15]
 *         n_s_range  = [0.92, 1.00]
 *         h_range    = [0.61, 0.73]             # <<<<<<<<<<<<<<
 *         w_0_range  = [-1.3, -0.7]
 *         w_a_range  = [-0.7,  0.5]
 */
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_float_0_61);
  __Pyx_GIVEREF(__pyx_float_0_61);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_float_0_61);
  __Pyx_INCREF(__pyx_float_0_73);
  __Pyx_GIVEREF(__pyx_float_0_73);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_float_0_73);
  __pyx_v_h_range = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "euclidemu2.pyx":150
 *         n_s_range  = [0.92, 1.00]
 *         h_range    = [0.61, 0.73]
 *         w_0_range  = [-1.3, -0.7]             # <<<<<<<<<<<<<<
 *         w_a_range  = [-0.7,  0.5]
 *         A_s_range  = [1.7e-9, 2.5e-9]
 */
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_float_neg_1_3);
  __Pyx_GIVEREF(__pyx_float_neg_1_3);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_float_neg_1_3);
  __Pyx_INCREF(__pyx_float_neg_0_7);
  __Pyx_GIVEREF(__pyx_float_neg_0_7);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_float_neg_0_7);
  __pyx_v_w_0_range = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "euclidemu2.pyx":151
 *         h_range    = [0.61, 0.73]
 *         w_0_range  = [-1.3, -0.7]
 *         w_a_range  = [-0.7,  0.5]             # <<<<<<<<<<<<<<
 *         A_s_range  = [1.7e-9, 2.5e-9]
 * 
 */
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_float_neg_0_7);
  __Pyx_GIVEREF(__pyx_float_neg_0_7);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_float_neg_0_7);
  __Pyx_INCREF(__pyx_float_0_5);
  __Pyx_GIVEREF(__pyx_float_0_5);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_float_0_5);
  __pyx_v_w_a_range = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "euclidemu2.pyx":152
 *         w_0_range  = [-1.3, -0.7]
 *         w_a_range  = [-0.7,  0.5]
 *         A_s_range  = [1.7e-9, 2.5e-9]             # <<<<<<<<<<<<<<
 * 
 *         om_b_not_in_range = om_b_range[0] > par_dict['Omega_b'] or\
 */
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_float_1_7eneg_9);
  __Pyx_GIVEREF(__pyx_float_1_7eneg_9);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_float_1_7eneg_9);
  __Pyx_INCREF(__pyx_float_2_5eneg_9);
  __Pyx_GIVEREF(__pyx_float_2_5eneg_9);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_float_2_5eneg_9);
  __pyx_v_A_s_range = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "euclidemu2.pyx":154
 *         A_s_range  = [1.7e-9, 2.5e-9]
 * 
 *         om_b_not_in_range = om_b_range[0] > par_dict['Omega_b'] or\             # <<<<<<<<<<<<<<
 *                             om_b_range[1] < par_dict['Omega_b']
 * 
 */
  __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_om_b_range, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_par_dict, __pyx_n_u_Omega_b); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 154, __pyx_L1_error)
  if (!__pyx_t_5) {
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_1 = __pyx_t_4;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L3_bool_binop_done;
  }

  /* "euclidemu2.pyx":155
 * 
 *         om_b_not_in_range = om_b_range[0] > par_dict['Omega_b'] or\
 *                             om_b_range[1] < par_dict['Omega_b']             # <<<<<<<<<<<<<<
 * 
 *         om_m_not_in_range = om_m_range[0] > par_dict['Omega_m'] or\
 */
  __pyx_t_4 = __Pyx_GetItemInt_List(__pyx_v_om_b_range, 1, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_par_dict, __pyx_n_u_Omega_b); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_4, __pyx_t_3, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_1 = __pyx_t_2;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_L3_bool_binop_done:;
  __pyx_v_om_b_not_in_range = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "euclidemu2.pyx":157
 *                             om_b_range[1] < par_dict['Omega_b']
 * 
 *         om_m_not_in_range = om_m_range[0] > par_dict['Omega_m'] or\             # <<<<<<<<<<<<<<
 *                             om_m_range[1] < par_dict['Omega_m']
 * 
 */
  __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_om_m_range, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_par_dict, __pyx_n_u_Omega_m); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 157, __pyx_L1_error)
  if (!__pyx_t_5) {
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_1 = __pyx_t_4;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L5_bool_binop_done;
  }

  /* "euclidemu2.pyx":158
 * 
 *         om_m_not_in_range = om_m_range[0] > par_dict['Omega_m'] or\
 *                             om_m_range[1] < par_dict['Omega_m']             # <<<<<<<<<<<<<<
 * 
 *         m_nu_not_in_range = m_nu_range[0] > par_dict['m_ncdm'] or\
 */
  __pyx_t_4 = __Pyx_GetItemInt_List(__pyx_v_om_m_range, 1, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_par_dict, __pyx_n_u_Omega_m); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_4, __pyx_t_3, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_1 = __pyx_t_2;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_L5_bool_binop_done:;
  __pyx_v_om_m_not_in_range = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "euclidemu2.pyx":160
 *                             om_m_range[1] < par_dict['Omega_m']
 * 
 *         m_nu_not_in_range = m_nu_range[0] > par_dict['m_ncdm'] or\             # <<<<<<<<<<<<<<
 *                             m_nu_range[1] < par_dict['m_ncdm']
 * 
 */
  __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_m_nu_range, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_par_dict, __pyx_n_u_m_ncdm); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 160, __pyx_L1_error)
  if (!__pyx_t_5) {
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_1 = __pyx_t_4;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L7_bool_binop_done;
  }

  /* "euclidemu2.pyx":161
 * 
 *         m_nu_not_in_range = m_nu_range[0] > par_dict['m_ncdm'] or\
 *                             m_nu_range[1] < par_dict['m_ncdm']             # <<<<<<<<<<<<<<
 * 
 *         n_s_not_in_range = n_s_range[0] > par_dict['n_s'] or\
 */
  __pyx_t_4 = __Pyx_GetItemInt_List(__pyx_v_m_nu_range, 1, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_par_dict, __pyx_n_u_m_ncdm); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_4, __pyx_t_3, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 161, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_1 = __pyx_t_2;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_L7_bool_binop_done:;
  __pyx_v_m_nu_not_in_range = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "euclidemu2.pyx":163
 *                             m_nu_range[1] < par_dict['m_ncdm']
 * 
 *         n_s_not_in_range = n_s_range[0] > par_dict['n_s'] or\             # <<<<<<<<<<<<<<
 *                            n_s_range[1] < par_dict['n_s']
 * 
 */
  __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_n_s_range, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_par_dict, __pyx_n_u_n_s); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 163, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 163, __pyx_L1_error)
  if (!__pyx_t_5) {
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_1 = __pyx_t_4;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L9_bool_binop_done;
  }

  /* "euclidemu2.pyx":164
 * 
 *         n_s_not_in_range = n_s_range[0] > par_dict['n_s'] or\
 *                            n_s_range[1] < par_dict['n_s']             # <<<<<<<<<<<<<<
 * 
 *         h_not_in_range = h_range[0] > par_dict['h'] or\
 */
  __pyx_t_4 = __Pyx_GetItemInt_List(__pyx_v_n_s_range, 1, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_par_dict, __pyx_n_u_n_s); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_4, __pyx_t_3, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_1 = __pyx_t_2;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_L9_bool_binop_done:;
  __pyx_v_n_s_not_in_range = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "euclidemu2.pyx":166
 *                            n_s_range[1] < par_dict['n_s']
 * 
 *         h_not_in_range = h_range[0] > par_dict['h'] or\             # <<<<<<<<<<<<<<
 *                          h_range[1] < par_dict['h']
 * 
 */
  __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_h_range, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_par_dict, __pyx_n_u_h); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 166, __pyx_L1_error)
  if (!__pyx_t_5) {
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_1 = __pyx_t_4;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L11_bool_binop_done;
  }

  /* "euclidemu2.pyx":167
 * 
 *         h_not_in_range = h_range[0] > par_dict['h'] or\
 *                          h_range[1] < par_dict['h']             # <<<<<<<<<<<<<<
 * 
 *         w_0_not_in_range = w_0_range[0] > par_dict['w0_fld'] or\
 */
  __pyx_t_4 = __Pyx_GetItemInt_List(__pyx_v_h_range, 1, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_par_dict, __pyx_n_u_h); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_4, __pyx_t_3, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 167, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_1 = __pyx_t_2;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_L11_bool_binop_done:;
  __pyx_v_h_not_in_range = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "euclidemu2.pyx":169
 *                          h_range[1] < par_dict['h']
 * 
 *         w_0_not_in_range = w_0_range[0] > par_dict['w0_fld'] or\             # <<<<<<<<<<<<<<
 *                            w_0_range[1] < par_dict['w0_fld']
 * 
 */
  __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_w_0_range, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_par_dict, __pyx_n_u_w0_fld); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 169, __pyx_L1_error)
  if (!__pyx_t_5) {
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_1 = __pyx_t_4;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L13_bool_binop_done;
  }

  /* "euclidemu2.pyx":170
 * 
 *         w_0_not_in_range = w_0_range[0] > par_dict['w0_fld'] or\
 *                            w_0_range[1] < par_dict['w0_fld']             # <<<<<<<<<<<<<<
 * 
 *         w_a_not_in_range = w_a_range[0] > par_dict['wa_fld'] or\
 */
  __pyx_t_4 = __Pyx_GetItemInt_List(__pyx_v_w_0_range, 1, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_par_dict, __pyx_n_u_w0_fld); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_4, __pyx_t_3, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 170, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_1 = __pyx_t_2;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_L13_bool_binop_done:;
  __pyx_v_w_0_not_in_range = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "euclidemu2.pyx":172
 *                            w_0_range[1] < par_dict['w0_fld']
 * 
 *         w_a_not_in_range = w_a_range[0] > par_dict['wa_fld'] or\             # <<<<<<<<<<<<<<
 *                            w_a_range[1] < par_dict['wa_fld']
 * 
 */
  __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_w_a_range, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_par_dict, __pyx_n_u_wa_fld); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 172, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 172, __pyx_L1_error)
  if (!__pyx_t_5) {
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_1 = __pyx_t_4;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L15_bool_binop_done;
  }

  /* "euclidemu2.pyx":173
 * 
 *         w_a_not_in_range = w_a_range[0] > par_dict['wa_fld'] or\
 *                            w_a_range[1] < par_dict['wa_fld']             # <<<<<<<<<<<<<<
 * 
 *         A_s_not_in_range = A_s_range[0] > par_dict['A_s'] or\
 */
  __pyx_t_4 = __Pyx_GetItemInt_List(__pyx_v_w_a_range, 1, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_par_dict, __pyx_n_u_wa_fld); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_4, __pyx_t_3, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 173, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_1 = __pyx_t_2;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_L15_bool_binop_done:;
  __pyx_v_w_a_not_in_range = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "euclidemu2.pyx":175
 *                            w_a_range[1] < par_dict['wa_fld']
 * 
 *         A_s_not_in_range = A_s_range[0] > par_dict['A_s'] or\             # <<<<<<<<<<<<<<
 *                            A_s_range[1] < par_dict['A_s']
 * 
 */
  __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_A_s_range, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_par_dict, __pyx_n_u_A_s); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 175, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 175, __pyx_L1_error)
  if (!__pyx_t_5) {
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_1 = __pyx_t_4;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L17_bool_binop_done;
  }

  /* "euclidemu2.pyx":176
 * 
 *         A_s_not_in_range = A_s_range[0] > par_dict['A_s'] or\
 *                            A_s_range[1] < par_dict['A_s']             # <<<<<<<<<<<<<<
 * 
 *         if om_b_not_in_range:
 */
  __pyx_t_4 = __Pyx_GetItemInt_List(__pyx_v_A_s_range, 1, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_par_dict, __pyx_n_u_A_s); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_4, __pyx_t_3, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_1 = __pyx_t_2;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_L17_bool_binop_done:;
  __pyx_v_A_s_not_in_range = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "euclidemu2.pyx":178
 *                            A_s_range[1] < par_dict['A_s']
 * 
 *         if om_b_not_in_range:             # <<<<<<<<<<<<<<
 *             raise ValueError("Parameter range violation: \nOmega_b is set to %f, but should be in the interval [0.04, 0.06]."
 *                              %(par_dict['Omega_b'] ))
 */
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_om_b_not_in_range); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 178, __pyx_L1_error)
  if (unlikely(__pyx_t_5)) {

    /* "euclidemu2.pyx":180
 *         if om_b_not_in_range:
 *             raise ValueError("Parameter range violation: \nOmega_b is set to %f, but should be in the interval [0.04, 0.06]."
 *                              %(par_dict['Omega_b'] ))             # <<<<<<<<<<<<<<
 * 
 *         if om_m_not_in_range:
 */
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_par_dict, __pyx_n_u_Omega_b); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_Parameter_range_violation_Omega, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "euclidemu2.pyx":179
 * 
 *         if om_b_not_in_range:
 *             raise ValueError("Parameter range violation: \nOmega_b is set to %f, but should be in the interval [0.04, 0.06]."             # <<<<<<<<<<<<<<
 *                              %(par_dict['Omega_b'] ))
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 179, __pyx_L1_error)

    /* "euclidemu2.pyx":178
 *                            A_s_range[1] < par_dict['A_s']
 * 
 *         if om_b_not_in_range:             # <<<<<<<<<<<<<<
 *             raise ValueError("Parameter range violation: \nOmega_b is set to %f, but should be in the interval [0.04, 0.06]."
 *                              %(par_dict['Omega_b'] ))
 */
  }

  /* "euclidemu2.pyx":182
 *                              %(par_dict['Omega_b'] ))
 * 
 *         if om_m_not_in_range:             # <<<<<<<<<<<<<<
 *             raise ValueError("Parameter range violation: \nOmega_m is set to %f, but should be in the interval [0.24, 0.40]."
 *                              %(par_dict['Omega_m']))
 */
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_om_m_not_in_range); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 182, __pyx_L1_error)
  if (unlikely(__pyx_t_5)) {

    /* "euclidemu2.pyx":184
 *         if om_m_not_in_range:
 *             raise ValueError("Parameter range violation: \nOmega_m is set to %f, but should be in the interval [0.24, 0.40]."
 *                              %(par_dict['Omega_m']))             # <<<<<<<<<<<<<<
 * 
 *         if m_nu_not_in_range:
 */
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_par_dict, __pyx_n_u_Omega_m); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 184, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_Parameter_range_violation_Omega_2, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 184, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "euclidemu2.pyx":183
 * 
 *         if om_m_not_in_range:
 *             raise ValueError("Parameter range violation: \nOmega_m is set to %f, but should be in the interval [0.24, 0.40]."             # <<<<<<<<<<<<<<
 *                              %(par_dict['Omega_m']))
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 183, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 183, __pyx_L1_error)

    /* "euclidemu2.pyx":182
 *                              %(par_dict['Omega_b'] ))
 * 
 *         if om_m_not_in_range:             # <<<<<<<<<<<<<<
 *             raise ValueError("Parameter range violation: \nOmega_m is set to %f, but should be in the interval [0.24, 0.40]."
 *                              %(par_dict['Omega_m']))
 */
  }

  /* "euclidemu2.pyx":186
 *                              %(par_dict['Omega_m']))
 * 
 *         if m_nu_not_in_range:             # <<<<<<<<<<<<<<
 *             raise ValueError("Parameter range violation: \nm_ncdm is set to %f, but should be in the interval [0.00, 0.15]."
 *                              %(par_dict['m_ncdm']))
 */
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_m_nu_not_in_range); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 186, __pyx_L1_error)
  if (unlikely(__pyx_t_5)) {

    /* "euclidemu2.pyx":188
 *         if m_nu_not_in_range:
 *             raise ValueError("Parameter range violation: \nm_ncdm is set to %f, but should be in the interval [0.00, 0.15]."
 *                              %(par_dict['m_ncdm']))             # <<<<<<<<<<<<<<
 * 
 *         if n_s_not_in_range:
 */
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_par_dict, __pyx_n_u_m_ncdm); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 188, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_Parameter_range_violation_m_ncdm, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 188, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "euclidemu2.pyx":187
 * 
 *         if m_nu_not_in_range:
 *             raise ValueError("Parameter range violation: \nm_ncdm is set to %f, but should be in the interval [0.00, 0.15]."             # <<<<<<<<<<<<<<
 *                              %(par_dict['m_ncdm']))
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 187, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 187, __pyx_L1_error)

    /* "euclidemu2.pyx":186
 *                              %(par_dict['Omega_m']))
 * 
 *         if m_nu_not_in_range:             # <<<<<<<<<<<<<<
 *             raise ValueError("Parameter range violation: \nm_ncdm is set to %f, but should be in the interval [0.00, 0.15]."
 *                              %(par_dict['m_ncdm']))
 */
  }

  /* "euclidemu2.pyx":190
 *                              %(par_dict['m_ncdm']))
 * 
 *         if n_s_not_in_range:             # <<<<<<<<<<<<<<
 *             raise ValueError("Parameter range violation: \nn_s is set to %f, but should be in the interval [0.92, 1.00]."
 *                              %(par_dict['n_s']))
 */
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_n_s_not_in_range); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 190, __pyx_L1_error)
  if (unlikely(__pyx_t_5)) {

    /* "euclidemu2.pyx":192
 *         if n_s_not_in_range:
 *             raise ValueError("Parameter range violation: \nn_s is set to %f, but should be in the interval [0.92, 1.00]."
 *                              %(par_dict['n_s']))             # <<<<<<<<<<<<<<
 * 
 *         if h_not_in_range:
 */
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_par_dict, __pyx_n_u_n_s); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_Parameter_range_violation_n_s_is, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "euclidemu2.pyx":191
 * 
 *         if n_s_not_in_range:
 *             raise ValueError("Parameter range violation: \nn_s is set to %f, but should be in the interval [0.92, 1.00]."             # <<<<<<<<<<<<<<
 *                              %(par_dict['n_s']))
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 191, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 191, __pyx_L1_error)

    /* "euclidemu2.pyx":190
 *                              %(par_dict['m_ncdm']))
 * 
 *         if n_s_not_in_range:             # <<<<<<<<<<<<<<
 *             raise ValueError("Parameter range violation: \nn_s is set to %f, but should be in the interval [0.92, 1.00]."
 *                              %(par_dict['n_s']))
 */
  }

  /* "euclidemu2.pyx":194
 *                              %(par_dict['n_s']))
 * 
 *         if h_not_in_range:             # <<<<<<<<<<<<<<
 *             raise ValueError("Parameter range violation: \nh is set to %f, but should be in the interval [0.61, 0.73]."
 *                              %( par_dict['h']))
 */
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_h_not_in_range); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 194, __pyx_L1_error)
  if (unlikely(__pyx_t_5)) {

    /* "euclidemu2.pyx":196
 *         if h_not_in_range:
 *             raise ValueError("Parameter range violation: \nh is set to %f, but should be in the interval [0.61, 0.73]."
 *                              %( par_dict['h']))             # <<<<<<<<<<<<<<
 * 
 *         if w_0_not_in_range:
 */
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_par_dict, __pyx_n_u_h); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 196, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_Parameter_range_violation_h_is_s, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 196, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "euclidemu2.pyx":195
 * 
 *         if h_not_in_range:
 *             raise ValueError("Parameter range violation: \nh is set to %f, but should be in the interval [0.61, 0.73]."             # <<<<<<<<<<<<<<
 *                              %( par_dict['h']))
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 195, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 195, __pyx_L1_error)

    /* "euclidemu2.pyx":194
 *                              %(par_dict['n_s']))
 * 
 *         if h_not_in_range:             # <<<<<<<<<<<<<<
 *             raise ValueError("Parameter range violation: \nh is set to %f, but should be in the interval [0.61, 0.73]."
 *                              %( par_dict['h']))
 */
  }

  /* "euclidemu2.pyx":198
 *                              %( par_dict['h']))
 * 
 *         if w_0_not_in_range:             # <<<<<<<<<<<<<<
 *             raise ValueError("Parameter range violation: \nw_0 is set to %f, but should be in the interval [-1.3, -0.7]."
 *                              %( par_dict['w0_fld']))
 */
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_w_0_not_in_range); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 198, __pyx_L1_error)
  if (unlikely(__pyx_t_5)) {

    /* "euclidemu2.pyx":200
 *         if w_0_not_in_range:
 *             raise ValueError("Parameter range violation: \nw_0 is set to %f, but should be in the interval [-1.3, -0.7]."
 *                              %( par_dict['w0_fld']))             # <<<<<<<<<<<<<<
 * 
 *         if w_a_not_in_range:
 */
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_par_dict, __pyx_n_u_w0_fld); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 200, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_Parameter_range_violation_w_0_is, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 200, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "euclidemu2.pyx":199
 * 
 *         if w_0_not_in_range:
 *             raise ValueError("Parameter range violation: \nw_0 is set to %f, but should be in the interval [-1.3, -0.7]."             # <<<<<<<<<<<<<<
 *                              %( par_dict['w0_fld']))
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 199, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 199, __pyx_L1_error)

    /* "euclidemu2.pyx":198
 *                              %( par_dict['h']))
 * 
 *         if w_0_not_in_range:             # <<<<<<<<<<<<<<
 *             raise ValueError("Parameter range violation: \nw_0 is set to %f, but should be in the interval [-1.3, -0.7]."
 *                              %( par_dict['w0_fld']))
 */
  }

  /* "euclidemu2.pyx":202
 *                              %( par_dict['w0_fld']))
 * 
 *         if w_a_not_in_range:             # <<<<<<<<<<<<<<
 *             raise ValueError("Parameter range violation: \nw_a is set to %f, but should be in the interval [-0.7,  0.5]."
 *                              %( par_dict['wa_fld']))
 */
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_w_a_not_in_range); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 202, __pyx_L1_error)
  if (unlikely(__pyx_t_5)) {

    /* "euclidemu2.pyx":204
 *         if w_a_not_in_range:
 *             raise ValueError("Parameter range violation: \nw_a is set to %f, but should be in the interval [-0.7,  0.5]."
 *                              %( par_dict['wa_fld']))             # <<<<<<<<<<<<<<
 * 
 *         if A_s_not_in_range:
 */
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_par_dict, __pyx_n_u_wa_fld); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 204, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_Parameter_range_violation_w_a_is, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 204, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "euclidemu2.pyx":203
 * 
 *         if w_a_not_in_range:
 *             raise ValueError("Parameter range violation: \nw_a is set to %f, but should be in the interval [-0.7,  0.5]."             # <<<<<<<<<<<<<<
 *                              %( par_dict['wa_fld']))
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 203, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 203, __pyx_L1_error)

    /* "euclidemu2.pyx":202
 *                              %( par_dict['w0_fld']))
 * 
 *         if w_a_not_in_range:             # <<<<<<<<<<<<<<
 *             raise ValueError("Parameter range violation: \nw_a is set to %f, but should be in the interval [-0.7,  0.5]."
 *                              %( par_dict['wa_fld']))
 */
  }

  /* "euclidemu2.pyx":206
 *                              %( par_dict['wa_fld']))
 * 
 *         if A_s_not_in_range:             # <<<<<<<<<<<<<<
 *             raise ValueError("Parameter range violation: \nA_s is set to %e, but should be in the interval [1.7e-9, 2.5e-9]."
 *                              %( par_dict['A_s']))
 */
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_A_s_not_in_range); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 206, __pyx_L1_error)
  if (unlikely(__pyx_t_5)) {

    /* "euclidemu2.pyx":208
 *         if A_s_not_in_range:
 *             raise ValueError("Parameter range violation: \nA_s is set to %e, but should be in the interval [1.7e-9, 2.5e-9]."
 *                              %( par_dict['A_s']))             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_par_dict, __pyx_n_u_A_s); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 208, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_Parameter_range_violation_A_s_is, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 208, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "euclidemu2.pyx":207
 * 
 *         if A_s_not_in_range:
 *             raise ValueError("Parameter range violation: \nA_s is set to %e, but should be in the interval [1.7e-9, 2.5e-9]."             # <<<<<<<<<<<<<<
 *                              %( par_dict['A_s']))
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 207, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 207, __pyx_L1_error)

    /* "euclidemu2.pyx":206
 *                              %( par_dict['wa_fld']))
 * 
 *         if A_s_not_in_range:             # <<<<<<<<<<<<<<
 *             raise ValueError("Parameter range violation: \nA_s is set to %e, but should be in the interval [1.7e-9, 2.5e-9]."
 *                              %( par_dict['A_s']))
 */
  }

  /* "euclidemu2.pyx":139
 *     ######################################################
 * 
 *     def check_param_range(self,par_dict): #, csm_index=0): #Only one cosmology for now             # <<<<<<<<<<<<<<
 *         """
 *         Checks if all parameters in the cosmology dictionary 'par_dict'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("euclidemu2.PyEuclidEmulator.check_param_range", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_om_b_range);
  __Pyx_XDECREF(__pyx_v_om_m_range);
  __Pyx_XDECREF(__pyx_v_m_nu_range);
  __Pyx_XDECREF(__pyx_v_n_s_range);
  __Pyx_XDECREF(__pyx_v_h_range);
  __Pyx_XDECREF(__pyx_v_w_0_range);
  __Pyx_XDECREF(__pyx_v_w_a_range);
  __Pyx_XDECREF(__pyx_v_A_s_range);
  __Pyx_XDECREF(__pyx_v_om_b_not_in_range);
  __Pyx_XDECREF(__pyx_v_om_m_not_in_range);
  __Pyx_XDECREF(__pyx_v_m_nu_not_in_range);
  __Pyx_XDECREF(__pyx_v_n_s_not_in_range);
  __Pyx_XDECREF(__pyx_v_h_not_in_range);
  __Pyx_XDECREF(__pyx_v_w_0_not_in_range);
  __Pyx_XDECREF(__pyx_v_w_a_not_in_range);
  __Pyx_XDECREF(__pyx_v_A_s_not_in_range);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "euclidemu2.pyx":211
 * 
 * 
 *     def convert_to_emu(self,class_pars_dict):             # <<<<<<<<<<<<<<
 *         """
 *         Signature:    convert_to_emu(class_pars_dict)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10euclidemu2_16PyEuclidEmulator_11convert_to_emu(PyObject *__pyx_v_self, PyObject *__pyx_v_class_pars_dict); /*proto*/
static char __pyx_doc_10euclidemu2_16PyEuclidEmulator_10convert_to_emu[] = "\n        Signature:    convert_to_emu(class_pars_dict)\n\n        Description:  Converts the set of parameters accepted by several\n                      other codes into a set of parameters accepted by\n                      EuclidEmulator2. Also checks the params exist.\n\n        Input type:   python dictionary\n\n        Output type:  python dictionary\n\n        ";
static PyObject *__pyx_pw_10euclidemu2_16PyEuclidEmulator_11convert_to_emu(PyObject *__pyx_v_self, PyObject *__pyx_v_class_pars_dict) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("convert_to_emu (wrapper)", 0);
  __pyx_r = __pyx_pf_10euclidemu2_16PyEuclidEmulator_10convert_to_emu(((struct __pyx_obj_10euclidemu2_PyEuclidEmulator *)__pyx_v_self), ((PyObject *)__pyx_v_class_pars_dict));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10euclidemu2_16PyEuclidEmulator_10convert_to_emu(CYTHON_UNUSED struct __pyx_obj_10euclidemu2_PyEuclidEmulator *__pyx_v_self, PyObject *__pyx_v_class_pars_dict) {
  PyObject *__pyx_v_h = NULL;
  PyObject *__pyx_v_Om_b = NULL;
  PyObject *__pyx_v_m_ncdm = NULL;
  PyObject *__pyx_v_Om_cdm = NULL;
  PyObject *__pyx_v_Om_m = NULL;
  PyObject *__pyx_v_n_s = NULL;
  PyObject *__pyx_v_A_s = NULL;
  PyObject *__pyx_v_w0_fld = NULL;
  PyObject *__pyx_v_wa_fld = NULL;
  PyObject *__pyx_v_emu_pars_dict = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_to_emu", 0);

  /* "euclidemu2.pyx":224
 * 
 *         """
 *         if not isinstance(class_pars_dict, dict):             # <<<<<<<<<<<<<<
 *             raise TypeError("The cosmological parameters must be passed as a python dictionary.")
 * 
 */
  __pyx_t_1 = PyDict_Check(__pyx_v_class_pars_dict); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "euclidemu2.pyx":225
 *         """
 *         if not isinstance(class_pars_dict, dict):
 *             raise TypeError("The cosmological parameters must be passed as a python dictionary.")             # <<<<<<<<<<<<<<
 * 
 *         if 'h' in class_pars_dict:
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 225, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 225, __pyx_L1_error)

    /* "euclidemu2.pyx":224
 * 
 *         """
 *         if not isinstance(class_pars_dict, dict):             # <<<<<<<<<<<<<<
 *             raise TypeError("The cosmological parameters must be passed as a python dictionary.")
 * 
 */
  }

  /* "euclidemu2.pyx":227
 *             raise TypeError("The cosmological parameters must be passed as a python dictionary.")
 * 
 *         if 'h' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             h = class_pars_dict['h']
 *         elif 'hubble' in class_pars_dict:
 */
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_n_u_h, __pyx_v_class_pars_dict, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 227, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "euclidemu2.pyx":228
 * 
 *         if 'h' in class_pars_dict:
 *             h = class_pars_dict['h']             # <<<<<<<<<<<<<<
 *         elif 'hubble' in class_pars_dict:
 *             h = class_pars_dict['hubble']
 */
    __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_class_pars_dict, __pyx_n_u_h); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 228, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_h = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "euclidemu2.pyx":227
 *             raise TypeError("The cosmological parameters must be passed as a python dictionary.")
 * 
 *         if 'h' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             h = class_pars_dict['h']
 *         elif 'hubble' in class_pars_dict:
 */
    goto __pyx_L4;
  }

  /* "euclidemu2.pyx":229
 *         if 'h' in class_pars_dict:
 *             h = class_pars_dict['h']
 *         elif 'hubble' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             h = class_pars_dict['hubble']
 *         elif 'H0' in class_pars_dict:
 */
  __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_n_u_hubble, __pyx_v_class_pars_dict, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 229, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "euclidemu2.pyx":230
 *             h = class_pars_dict['h']
 *         elif 'hubble' in class_pars_dict:
 *             h = class_pars_dict['hubble']             # <<<<<<<<<<<<<<
 *         elif 'H0' in class_pars_dict:
 *             h = class_pars_dict['H0']/100.
 */
    __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_class_pars_dict, __pyx_n_u_hubble); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 230, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_h = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "euclidemu2.pyx":229
 *         if 'h' in class_pars_dict:
 *             h = class_pars_dict['h']
 *         elif 'hubble' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             h = class_pars_dict['hubble']
 *         elif 'H0' in class_pars_dict:
 */
    goto __pyx_L4;
  }

  /* "euclidemu2.pyx":231
 *         elif 'hubble' in class_pars_dict:
 *             h = class_pars_dict['hubble']
 *         elif 'H0' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             h = class_pars_dict['H0']/100.
 *         else:
 */
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_n_u_H0, __pyx_v_class_pars_dict, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 231, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (likely(__pyx_t_1)) {

    /* "euclidemu2.pyx":232
 *             h = class_pars_dict['hubble']
 *         elif 'H0' in class_pars_dict:
 *             h = class_pars_dict['H0']/100.             # <<<<<<<<<<<<<<
 *         else:
 *             raise KeyError("Missing parameter h. Can't proceed.")
 */
    __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_class_pars_dict, __pyx_n_u_H0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 232, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyFloat_TrueDivideObjC(__pyx_t_3, __pyx_float_100_, 100., 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 232, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_h = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "euclidemu2.pyx":231
 *         elif 'hubble' in class_pars_dict:
 *             h = class_pars_dict['hubble']
 *         elif 'H0' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             h = class_pars_dict['H0']/100.
 *         else:
 */
    goto __pyx_L4;
  }

  /* "euclidemu2.pyx":234
 *             h = class_pars_dict['H0']/100.
 *         else:
 *             raise KeyError("Missing parameter h. Can't proceed.")             # <<<<<<<<<<<<<<
 * 
 *         if 'Omega_b' in class_pars_dict:
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_KeyError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 234, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 234, __pyx_L1_error)
  }
  __pyx_L4:;

  /* "euclidemu2.pyx":236
 *             raise KeyError("Missing parameter h. Can't proceed.")
 * 
 *         if 'Omega_b' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             Om_b = class_pars_dict['Omega_b']
 *         elif 'Omb' in class_pars_dict:
 */
  __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_n_u_Omega_b, __pyx_v_class_pars_dict, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 236, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "euclidemu2.pyx":237
 * 
 *         if 'Omega_b' in class_pars_dict:
 *             Om_b = class_pars_dict['Omega_b']             # <<<<<<<<<<<<<<
 *         elif 'Omb' in class_pars_dict:
 *             Om_b = class_pars_dict['Omb']
 */
    __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_v_class_pars_dict, __pyx_n_u_Omega_b); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 237, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_Om_b = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "euclidemu2.pyx":236
 *             raise KeyError("Missing parameter h. Can't proceed.")
 * 
 *         if 'Omega_b' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             Om_b = class_pars_dict['Omega_b']
 *         elif 'Omb' in class_pars_dict:
 */
    goto __pyx_L5;
  }

  /* "euclidemu2.pyx":238
 *         if 'Omega_b' in class_pars_dict:
 *             Om_b = class_pars_dict['Omega_b']
 *         elif 'Omb' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             Om_b = class_pars_dict['Omb']
 *         elif 'Omega_baryon' in class_pars_dict:
 */
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_n_u_Omb, __pyx_v_class_pars_dict, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 238, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "euclidemu2.pyx":239
 *             Om_b = class_pars_dict['Omega_b']
 *         elif 'Omb' in class_pars_dict:
 *             Om_b = class_pars_dict['Omb']             # <<<<<<<<<<<<<<
 *         elif 'Omega_baryon' in class_pars_dict:
 *             Om_b = class_pars_dict['Omega_baryon']
 */
    __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_v_class_pars_dict, __pyx_n_u_Omb); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 239, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_Om_b = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "euclidemu2.pyx":238
 *         if 'Omega_b' in class_pars_dict:
 *             Om_b = class_pars_dict['Omega_b']
 *         elif 'Omb' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             Om_b = class_pars_dict['Omb']
 *         elif 'Omega_baryon' in class_pars_dict:
 */
    goto __pyx_L5;
  }

  /* "euclidemu2.pyx":240
 *         elif 'Omb' in class_pars_dict:
 *             Om_b = class_pars_dict['Omb']
 *         elif 'Omega_baryon' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             Om_b = class_pars_dict['Omega_baryon']
 *         elif 'omega_b' in class_pars_dict:
 */
  __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_n_u_Omega_baryon, __pyx_v_class_pars_dict, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 240, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "euclidemu2.pyx":241
 *             Om_b = class_pars_dict['Omb']
 *         elif 'Omega_baryon' in class_pars_dict:
 *             Om_b = class_pars_dict['Omega_baryon']             # <<<<<<<<<<<<<<
 *         elif 'omega_b' in class_pars_dict:
 *             Om_b = class_pars_dict['omega_b']/h**2
 */
    __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_v_class_pars_dict, __pyx_n_u_Omega_baryon); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 241, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_Om_b = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "euclidemu2.pyx":240
 *         elif 'Omb' in class_pars_dict:
 *             Om_b = class_pars_dict['Omb']
 *         elif 'Omega_baryon' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             Om_b = class_pars_dict['Omega_baryon']
 *         elif 'omega_b' in class_pars_dict:
 */
    goto __pyx_L5;
  }

  /* "euclidemu2.pyx":242
 *         elif 'Omega_baryon' in class_pars_dict:
 *             Om_b = class_pars_dict['Omega_baryon']
 *         elif 'omega_b' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             Om_b = class_pars_dict['omega_b']/h**2
 *         elif 'om_b' in class_pars_dict:
 */
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_n_u_omega_b, __pyx_v_class_pars_dict, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 242, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "euclidemu2.pyx":243
 *             Om_b = class_pars_dict['Omega_baryon']
 *         elif 'omega_b' in class_pars_dict:
 *             Om_b = class_pars_dict['omega_b']/h**2             # <<<<<<<<<<<<<<
 *         elif 'om_b' in class_pars_dict:
 *             Om_b = class_pars_dict['om_b']/h**2
 */
    __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_v_class_pars_dict, __pyx_n_u_omega_b); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 243, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyNumber_Power(__pyx_v_h, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 243, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyNumber_Divide(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 243, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_Om_b = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "euclidemu2.pyx":242
 *         elif 'Omega_baryon' in class_pars_dict:
 *             Om_b = class_pars_dict['Omega_baryon']
 *         elif 'omega_b' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             Om_b = class_pars_dict['omega_b']/h**2
 *         elif 'om_b' in class_pars_dict:
 */
    goto __pyx_L5;
  }

  /* "euclidemu2.pyx":244
 *         elif 'omega_b' in class_pars_dict:
 *             Om_b = class_pars_dict['omega_b']/h**2
 *         elif 'om_b' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             Om_b = class_pars_dict['om_b']/h**2
 *         elif 'ombh2' in class_pars_dict:
 */
  __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_n_u_om_b, __pyx_v_class_pars_dict, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 244, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "euclidemu2.pyx":245
 *             Om_b = class_pars_dict['omega_b']/h**2
 *         elif 'om_b' in class_pars_dict:
 *             Om_b = class_pars_dict['om_b']/h**2             # <<<<<<<<<<<<<<
 *         elif 'ombh2' in class_pars_dict:
 *             Om_b = class_pars_dict['ombh2']/h**2
 */
    __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_v_class_pars_dict, __pyx_n_u_om_b); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 245, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = PyNumber_Power(__pyx_v_h, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 245, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 245, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_Om_b = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "euclidemu2.pyx":244
 *         elif 'omega_b' in class_pars_dict:
 *             Om_b = class_pars_dict['omega_b']/h**2
 *         elif 'om_b' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             Om_b = class_pars_dict['om_b']/h**2
 *         elif 'ombh2' in class_pars_dict:
 */
    goto __pyx_L5;
  }

  /* "euclidemu2.pyx":246
 *         elif 'om_b' in class_pars_dict:
 *             Om_b = class_pars_dict['om_b']/h**2
 *         elif 'ombh2' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             Om_b = class_pars_dict['ombh2']/h**2
 *         else:
 */
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_n_u_ombh2, __pyx_v_class_pars_dict, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 246, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (likely(__pyx_t_1)) {

    /* "euclidemu2.pyx":247
 *             Om_b = class_pars_dict['om_b']/h**2
 *         elif 'ombh2' in class_pars_dict:
 *             Om_b = class_pars_dict['ombh2']/h**2             # <<<<<<<<<<<<<<
 *         else:
 *             raise KeyError("Missing parameter Omega_b. Can't proceed.")
 */
    __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_v_class_pars_dict, __pyx_n_u_ombh2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 247, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyNumber_Power(__pyx_v_h, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 247, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyNumber_Divide(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 247, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_Om_b = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "euclidemu2.pyx":246
 *         elif 'om_b' in class_pars_dict:
 *             Om_b = class_pars_dict['om_b']/h**2
 *         elif 'ombh2' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             Om_b = class_pars_dict['ombh2']/h**2
 *         else:
 */
    goto __pyx_L5;
  }

  /* "euclidemu2.pyx":249
 *             Om_b = class_pars_dict['ombh2']/h**2
 *         else:
 *             raise KeyError("Missing parameter Omega_b. Can't proceed.")             # <<<<<<<<<<<<<<
 * 
 *         # Currently only allowing this way of passing the neutrino mass
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_KeyError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(0, 249, __pyx_L1_error)
  }
  __pyx_L5:;

  /* "euclidemu2.pyx":253
 *         # Currently only allowing this way of passing the neutrino mass
 *         # and only allowing one value to be passed.
 *         if 'm_ncdm' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             m_ncdm = class_pars_dict['m_ncdm']
 *         elif 'm_nu' in class_pars_dict:
 */
  __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_n_u_m_ncdm, __pyx_v_class_pars_dict, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 253, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "euclidemu2.pyx":254
 *         # and only allowing one value to be passed.
 *         if 'm_ncdm' in class_pars_dict:
 *             m_ncdm = class_pars_dict['m_ncdm']             # <<<<<<<<<<<<<<
 *         elif 'm_nu' in class_pars_dict:
 *             m_ncdm = class_pars_dict['m_nu']
 */
    __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_v_class_pars_dict, __pyx_n_u_m_ncdm); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 254, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_v_m_ncdm = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "euclidemu2.pyx":253
 *         # Currently only allowing this way of passing the neutrino mass
 *         # and only allowing one value to be passed.
 *         if 'm_ncdm' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             m_ncdm = class_pars_dict['m_ncdm']
 *         elif 'm_nu' in class_pars_dict:
 */
    goto __pyx_L6;
  }

  /* "euclidemu2.pyx":255
 *         if 'm_ncdm' in class_pars_dict:
 *             m_ncdm = class_pars_dict['m_ncdm']
 *         elif 'm_nu' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             m_ncdm = class_pars_dict['m_nu']
 *         elif 'mnu' in class_pars_dict:
 */
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_n_u_m_nu, __pyx_v_class_pars_dict, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 255, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "euclidemu2.pyx":256
 *             m_ncdm = class_pars_dict['m_ncdm']
 *         elif 'm_nu' in class_pars_dict:
 *             m_ncdm = class_pars_dict['m_nu']             # <<<<<<<<<<<<<<
 *         elif 'mnu' in class_pars_dict:
 *             m_ncdm = class_pars_dict['mnu']
 */
    __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_v_class_pars_dict, __pyx_n_u_m_nu); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 256, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_v_m_ncdm = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "euclidemu2.pyx":255
 *         if 'm_ncdm' in class_pars_dict:
 *             m_ncdm = class_pars_dict['m_ncdm']
 *         elif 'm_nu' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             m_ncdm = class_pars_dict['m_nu']
 *         elif 'mnu' in class_pars_dict:
 */
    goto __pyx_L6;
  }

  /* "euclidemu2.pyx":257
 *         elif 'm_nu' in class_pars_dict:
 *             m_ncdm = class_pars_dict['m_nu']
 *         elif 'mnu' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             m_ncdm = class_pars_dict['mnu']
 *         elif 'neutrino_mass' in class_pars_dict:
 */
  __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_n_u_mnu, __pyx_v_class_pars_dict, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 257, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "euclidemu2.pyx":258
 *             m_ncdm = class_pars_dict['m_nu']
 *         elif 'mnu' in class_pars_dict:
 *             m_ncdm = class_pars_dict['mnu']             # <<<<<<<<<<<<<<
 *         elif 'neutrino_mass' in class_pars_dict:
 *             m_ncdm = class_pars_dict['neutrino_mass']
 */
    __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_v_class_pars_dict, __pyx_n_u_mnu); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 258, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_v_m_ncdm = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "euclidemu2.pyx":257
 *         elif 'm_nu' in class_pars_dict:
 *             m_ncdm = class_pars_dict['m_nu']
 *         elif 'mnu' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             m_ncdm = class_pars_dict['mnu']
 *         elif 'neutrino_mass' in class_pars_dict:
 */
    goto __pyx_L6;
  }

  /* "euclidemu2.pyx":259
 *         elif 'mnu' in class_pars_dict:
 *             m_ncdm = class_pars_dict['mnu']
 *         elif 'neutrino_mass' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             m_ncdm = class_pars_dict['neutrino_mass']
 *         else:
 */
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_n_u_neutrino_mass, __pyx_v_class_pars_dict, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 259, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "euclidemu2.pyx":260
 *             m_ncdm = class_pars_dict['mnu']
 *         elif 'neutrino_mass' in class_pars_dict:
 *             m_ncdm = class_pars_dict['neutrino_mass']             # <<<<<<<<<<<<<<
 *         else:
 *             print("Missing parameter m_nu. Will set to 0.")
 */
    __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_v_class_pars_dict, __pyx_n_u_neutrino_mass); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 260, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_v_m_ncdm = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "euclidemu2.pyx":259
 *         elif 'mnu' in class_pars_dict:
 *             m_ncdm = class_pars_dict['mnu']
 *         elif 'neutrino_mass' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             m_ncdm = class_pars_dict['neutrino_mass']
 *         else:
 */
    goto __pyx_L6;
  }

  /* "euclidemu2.pyx":262
 *             m_ncdm = class_pars_dict['neutrino_mass']
 *         else:
 *             print("Missing parameter m_nu. Will set to 0.")             # <<<<<<<<<<<<<<
 *             m_ncdm=0.0
 * 
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 262, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "euclidemu2.pyx":263
 *         else:
 *             print("Missing parameter m_nu. Will set to 0.")
 *             m_ncdm=0.0             # <<<<<<<<<<<<<<
 * 
 *         # Should give either Omega_m or Omega_cdm
 */
    __Pyx_INCREF(__pyx_float_0_0);
    __pyx_v_m_ncdm = __pyx_float_0_0;
  }
  __pyx_L6:;

  /* "euclidemu2.pyx":266
 * 
 *         # Should give either Omega_m or Omega_cdm
 *         Om_cdm=0             # <<<<<<<<<<<<<<
 *         if 'Omega_m' in class_pars_dict:
 *             Om_m = class_pars_dict['Omega_m']
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_Om_cdm = __pyx_int_0;

  /* "euclidemu2.pyx":267
 *         # Should give either Omega_m or Omega_cdm
 *         Om_cdm=0
 *         if 'Omega_m' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             Om_m = class_pars_dict['Omega_m']
 *         elif 'Omm' in class_pars_dict:
 */
  __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_n_u_Omega_m, __pyx_v_class_pars_dict, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 267, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "euclidemu2.pyx":268
 *         Om_cdm=0
 *         if 'Omega_m' in class_pars_dict:
 *             Om_m = class_pars_dict['Omega_m']             # <<<<<<<<<<<<<<
 *         elif 'Omm' in class_pars_dict:
 *             Om_m = class_pars_dict['Omm']
 */
    __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_v_class_pars_dict, __pyx_n_u_Omega_m); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 268, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_v_Om_m = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "euclidemu2.pyx":267
 *         # Should give either Omega_m or Omega_cdm
 *         Om_cdm=0
 *         if 'Omega_m' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             Om_m = class_pars_dict['Omega_m']
 *         elif 'Omm' in class_pars_dict:
 */
    goto __pyx_L7;
  }

  /* "euclidemu2.pyx":269
 *         if 'Omega_m' in class_pars_dict:
 *             Om_m = class_pars_dict['Omega_m']
 *         elif 'Omm' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             Om_m = class_pars_dict['Omm']
 *         elif 'Omega_matter' in class_pars_dict:
 */
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_n_u_Omm, __pyx_v_class_pars_dict, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 269, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "euclidemu2.pyx":270
 *             Om_m = class_pars_dict['Omega_m']
 *         elif 'Omm' in class_pars_dict:
 *             Om_m = class_pars_dict['Omm']             # <<<<<<<<<<<<<<
 *         elif 'Omega_matter' in class_pars_dict:
 *             Om_m = class_pars_dict['Omega_matter']
 */
    __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_v_class_pars_dict, __pyx_n_u_Omm); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 270, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_v_Om_m = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "euclidemu2.pyx":269
 *         if 'Omega_m' in class_pars_dict:
 *             Om_m = class_pars_dict['Omega_m']
 *         elif 'Omm' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             Om_m = class_pars_dict['Omm']
 *         elif 'Omega_matter' in class_pars_dict:
 */
    goto __pyx_L7;
  }

  /* "euclidemu2.pyx":271
 *         elif 'Omm' in class_pars_dict:
 *             Om_m = class_pars_dict['Omm']
 *         elif 'Omega_matter' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             Om_m = class_pars_dict['Omega_matter']
 *         elif 'omega_m' in class_pars_dict:
 */
  __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_n_u_Omega_matter, __pyx_v_class_pars_dict, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 271, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "euclidemu2.pyx":272
 *             Om_m = class_pars_dict['Omm']
 *         elif 'Omega_matter' in class_pars_dict:
 *             Om_m = class_pars_dict['Omega_matter']             # <<<<<<<<<<<<<<
 *         elif 'omega_m' in class_pars_dict:
 *             Om_m = class_pars_dict['omega_m']/h**2
 */
    __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_v_class_pars_dict, __pyx_n_u_Omega_matter); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 272, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_v_Om_m = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "euclidemu2.pyx":271
 *         elif 'Omm' in class_pars_dict:
 *             Om_m = class_pars_dict['Omm']
 *         elif 'Omega_matter' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             Om_m = class_pars_dict['Omega_matter']
 *         elif 'omega_m' in class_pars_dict:
 */
    goto __pyx_L7;
  }

  /* "euclidemu2.pyx":273
 *         elif 'Omega_matter' in class_pars_dict:
 *             Om_m = class_pars_dict['Omega_matter']
 *         elif 'omega_m' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             Om_m = class_pars_dict['omega_m']/h**2
 *         elif 'om_m' in class_pars_dict:
 */
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_n_u_omega_m, __pyx_v_class_pars_dict, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 273, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "euclidemu2.pyx":274
 *             Om_m = class_pars_dict['Omega_matter']
 *         elif 'omega_m' in class_pars_dict:
 *             Om_m = class_pars_dict['omega_m']/h**2             # <<<<<<<<<<<<<<
 *         elif 'om_m' in class_pars_dict:
 *             Om_m = class_pars_dict['om_m']/h**2
 */
    __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_v_class_pars_dict, __pyx_n_u_omega_m); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 274, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = PyNumber_Power(__pyx_v_h, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 274, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 274, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_Om_m = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "euclidemu2.pyx":273
 *         elif 'Omega_matter' in class_pars_dict:
 *             Om_m = class_pars_dict['Omega_matter']
 *         elif 'omega_m' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             Om_m = class_pars_dict['omega_m']/h**2
 *         elif 'om_m' in class_pars_dict:
 */
    goto __pyx_L7;
  }

  /* "euclidemu2.pyx":275
 *         elif 'omega_m' in class_pars_dict:
 *             Om_m = class_pars_dict['omega_m']/h**2
 *         elif 'om_m' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             Om_m = class_pars_dict['om_m']/h**2
 *         elif 'ommh2' in class_pars_dict:
 */
  __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_n_u_om_m, __pyx_v_class_pars_dict, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 275, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "euclidemu2.pyx":276
 *             Om_m = class_pars_dict['omega_m']/h**2
 *         elif 'om_m' in class_pars_dict:
 *             Om_m = class_pars_dict['om_m']/h**2             # <<<<<<<<<<<<<<
 *         elif 'ommh2' in class_pars_dict:
 *             Om_m = class_pars_dict['ommh2']/h**2
 */
    __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_v_class_pars_dict, __pyx_n_u_om_m); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 276, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyNumber_Power(__pyx_v_h, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 276, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyNumber_Divide(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 276, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_Om_m = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "euclidemu2.pyx":275
 *         elif 'omega_m' in class_pars_dict:
 *             Om_m = class_pars_dict['omega_m']/h**2
 *         elif 'om_m' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             Om_m = class_pars_dict['om_m']/h**2
 *         elif 'ommh2' in class_pars_dict:
 */
    goto __pyx_L7;
  }

  /* "euclidemu2.pyx":277
 *         elif 'om_m' in class_pars_dict:
 *             Om_m = class_pars_dict['om_m']/h**2
 *         elif 'ommh2' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             Om_m = class_pars_dict['ommh2']/h**2
 *         elif 'Omega_cdm' in class_pars_dict:
 */
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_n_u_ommh2, __pyx_v_class_pars_dict, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 277, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "euclidemu2.pyx":278
 *             Om_m = class_pars_dict['om_m']/h**2
 *         elif 'ommh2' in class_pars_dict:
 *             Om_m = class_pars_dict['ommh2']/h**2             # <<<<<<<<<<<<<<
 *         elif 'Omega_cdm' in class_pars_dict:
 *             Om_cdm = class_pars_dict['Omega_cdm']
 */
    __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_v_class_pars_dict, __pyx_n_u_ommh2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 278, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = PyNumber_Power(__pyx_v_h, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 278, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 278, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_Om_m = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "euclidemu2.pyx":277
 *         elif 'om_m' in class_pars_dict:
 *             Om_m = class_pars_dict['om_m']/h**2
 *         elif 'ommh2' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             Om_m = class_pars_dict['ommh2']/h**2
 *         elif 'Omega_cdm' in class_pars_dict:
 */
    goto __pyx_L7;
  }

  /* "euclidemu2.pyx":279
 *         elif 'ommh2' in class_pars_dict:
 *             Om_m = class_pars_dict['ommh2']/h**2
 *         elif 'Omega_cdm' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             Om_cdm = class_pars_dict['Omega_cdm']
 *             Om_m = Om_b + Om_cdm
 */
  __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_n_u_Omega_cdm, __pyx_v_class_pars_dict, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 279, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "euclidemu2.pyx":280
 *             Om_m = class_pars_dict['ommh2']/h**2
 *         elif 'Omega_cdm' in class_pars_dict:
 *             Om_cdm = class_pars_dict['Omega_cdm']             # <<<<<<<<<<<<<<
 *             Om_m = Om_b + Om_cdm
 *         elif 'Omc' in class_pars_dict:
 */
    __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_v_class_pars_dict, __pyx_n_u_Omega_cdm); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 280, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF_SET(__pyx_v_Om_cdm, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "euclidemu2.pyx":281
 *         elif 'Omega_cdm' in class_pars_dict:
 *             Om_cdm = class_pars_dict['Omega_cdm']
 *             Om_m = Om_b + Om_cdm             # <<<<<<<<<<<<<<
 *         elif 'Omc' in class_pars_dict:
 *             Om_cdm = class_pars_dict['Omc']
 */
    __pyx_t_4 = PyNumber_Add(__pyx_v_Om_b, __pyx_v_Om_cdm); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 281, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_Om_m = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "euclidemu2.pyx":279
 *         elif 'ommh2' in class_pars_dict:
 *             Om_m = class_pars_dict['ommh2']/h**2
 *         elif 'Omega_cdm' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             Om_cdm = class_pars_dict['Omega_cdm']
 *             Om_m = Om_b + Om_cdm
 */
    goto __pyx_L7;
  }

  /* "euclidemu2.pyx":282
 *             Om_cdm = class_pars_dict['Omega_cdm']
 *             Om_m = Om_b + Om_cdm
 *         elif 'Omc' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             Om_cdm = class_pars_dict['Omc']
 *             Om_m = Om_b + Om_cdm
 */
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_n_u_Omc, __pyx_v_class_pars_dict, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 282, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "euclidemu2.pyx":283
 *             Om_m = Om_b + Om_cdm
 *         elif 'Omc' in class_pars_dict:
 *             Om_cdm = class_pars_dict['Omc']             # <<<<<<<<<<<<<<
 *             Om_m = Om_b + Om_cdm
 *         elif 'omega_cdm' in class_pars_dict:
 */
    __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_v_class_pars_dict, __pyx_n_u_Omc); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 283, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF_SET(__pyx_v_Om_cdm, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "euclidemu2.pyx":284
 *         elif 'Omc' in class_pars_dict:
 *             Om_cdm = class_pars_dict['Omc']
 *             Om_m = Om_b + Om_cdm             # <<<<<<<<<<<<<<
 *         elif 'omega_cdm' in class_pars_dict:
 *             Om_cdm = class_pars_dict['omega_cdm']/h**2
 */
    __pyx_t_4 = PyNumber_Add(__pyx_v_Om_b, __pyx_v_Om_cdm); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 284, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_Om_m = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "euclidemu2.pyx":282
 *             Om_cdm = class_pars_dict['Omega_cdm']
 *             Om_m = Om_b + Om_cdm
 *         elif 'Omc' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             Om_cdm = class_pars_dict['Omc']
 *             Om_m = Om_b + Om_cdm
 */
    goto __pyx_L7;
  }

  /* "euclidemu2.pyx":285
 *             Om_cdm = class_pars_dict['Omc']
 *             Om_m = Om_b + Om_cdm
 *         elif 'omega_cdm' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             Om_cdm = class_pars_dict['omega_cdm']/h**2
 *             Om_m = Om_b + Om_cdm
 */
  __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_n_u_omega_cdm, __pyx_v_class_pars_dict, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 285, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "euclidemu2.pyx":286
 *             Om_m = Om_b + Om_cdm
 *         elif 'omega_cdm' in class_pars_dict:
 *             Om_cdm = class_pars_dict['omega_cdm']/h**2             # <<<<<<<<<<<<<<
 *             Om_m = Om_b + Om_cdm
 *         elif 'omch2' in class_pars_dict:
 */
    __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_v_class_pars_dict, __pyx_n_u_omega_cdm); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 286, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyNumber_Power(__pyx_v_h, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 286, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyNumber_Divide(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 286, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_Om_cdm, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "euclidemu2.pyx":287
 *         elif 'omega_cdm' in class_pars_dict:
 *             Om_cdm = class_pars_dict['omega_cdm']/h**2
 *             Om_m = Om_b + Om_cdm             # <<<<<<<<<<<<<<
 *         elif 'omch2' in class_pars_dict:
 *             Om_cdm = class_pars_dict['omch2']/h**2
 */
    __pyx_t_5 = PyNumber_Add(__pyx_v_Om_b, __pyx_v_Om_cdm); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 287, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_v_Om_m = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "euclidemu2.pyx":285
 *             Om_cdm = class_pars_dict['Omc']
 *             Om_m = Om_b + Om_cdm
 *         elif 'omega_cdm' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             Om_cdm = class_pars_dict['omega_cdm']/h**2
 *             Om_m = Om_b + Om_cdm
 */
    goto __pyx_L7;
  }

  /* "euclidemu2.pyx":288
 *             Om_cdm = class_pars_dict['omega_cdm']/h**2
 *             Om_m = Om_b + Om_cdm
 *         elif 'omch2' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             Om_cdm = class_pars_dict['omch2']/h**2
 *             Om_m = Om_b + Om_cdm
 */
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_n_u_omch2, __pyx_v_class_pars_dict, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 288, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (likely(__pyx_t_1)) {

    /* "euclidemu2.pyx":289
 *             Om_m = Om_b + Om_cdm
 *         elif 'omch2' in class_pars_dict:
 *             Om_cdm = class_pars_dict['omch2']/h**2             # <<<<<<<<<<<<<<
 *             Om_m = Om_b + Om_cdm
 *         else:
 */
    __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_v_class_pars_dict, __pyx_n_u_omch2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = PyNumber_Power(__pyx_v_h, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyNumber_Divide(__pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_Om_cdm, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "euclidemu2.pyx":290
 *         elif 'omch2' in class_pars_dict:
 *             Om_cdm = class_pars_dict['omch2']/h**2
 *             Om_m = Om_b + Om_cdm             # <<<<<<<<<<<<<<
 *         else:
 *             raise KeyError("Missing parameter Omega_m or Omega_cdm. Can't proceed.")
 */
    __pyx_t_4 = PyNumber_Add(__pyx_v_Om_b, __pyx_v_Om_cdm); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 290, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_Om_m = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "euclidemu2.pyx":288
 *             Om_cdm = class_pars_dict['omega_cdm']/h**2
 *             Om_m = Om_b + Om_cdm
 *         elif 'omch2' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             Om_cdm = class_pars_dict['omch2']/h**2
 *             Om_m = Om_b + Om_cdm
 */
    goto __pyx_L7;
  }

  /* "euclidemu2.pyx":292
 *             Om_m = Om_b + Om_cdm
 *         else:
 *             raise KeyError("Missing parameter Omega_m or Omega_cdm. Can't proceed.")             # <<<<<<<<<<<<<<
 * 
 *         if 'n_s' in class_pars_dict:
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_KeyError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 292, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 292, __pyx_L1_error)
  }
  __pyx_L7:;

  /* "euclidemu2.pyx":294
 *             raise KeyError("Missing parameter Omega_m or Omega_cdm. Can't proceed.")
 * 
 *         if 'n_s' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             n_s = class_pars_dict['n_s']
 *         elif 'ns' in class_pars_dict:
 */
  __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_n_u_n_s, __pyx_v_class_pars_dict, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 294, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "euclidemu2.pyx":295
 * 
 *         if 'n_s' in class_pars_dict:
 *             n_s = class_pars_dict['n_s']             # <<<<<<<<<<<<<<
 *         elif 'ns' in class_pars_dict:
 *             n_s = class_pars_dict['ns']
 */
    __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_v_class_pars_dict, __pyx_n_u_n_s); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 295, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_n_s = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "euclidemu2.pyx":294
 *             raise KeyError("Missing parameter Omega_m or Omega_cdm. Can't proceed.")
 * 
 *         if 'n_s' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             n_s = class_pars_dict['n_s']
 *         elif 'ns' in class_pars_dict:
 */
    goto __pyx_L8;
  }

  /* "euclidemu2.pyx":296
 *         if 'n_s' in class_pars_dict:
 *             n_s = class_pars_dict['n_s']
 *         elif 'ns' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             n_s = class_pars_dict['ns']
 *         else:
 */
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_n_u_ns, __pyx_v_class_pars_dict, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 296, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (likely(__pyx_t_1)) {

    /* "euclidemu2.pyx":297
 *             n_s = class_pars_dict['n_s']
 *         elif 'ns' in class_pars_dict:
 *             n_s = class_pars_dict['ns']             # <<<<<<<<<<<<<<
 *         else:
 *             raise KeyError("Missing parameter n_s. Can't proceed.")
 */
    __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_v_class_pars_dict, __pyx_n_u_ns); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 297, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_n_s = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "euclidemu2.pyx":296
 *         if 'n_s' in class_pars_dict:
 *             n_s = class_pars_dict['n_s']
 *         elif 'ns' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             n_s = class_pars_dict['ns']
 *         else:
 */
    goto __pyx_L8;
  }

  /* "euclidemu2.pyx":299
 *             n_s = class_pars_dict['ns']
 *         else:
 *             raise KeyError("Missing parameter n_s. Can't proceed.")             # <<<<<<<<<<<<<<
 * 
 *         if 'A_s' in class_pars_dict:
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_KeyError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 299, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 299, __pyx_L1_error)
  }
  __pyx_L8:;

  /* "euclidemu2.pyx":301
 *             raise KeyError("Missing parameter n_s. Can't proceed.")
 * 
 *         if 'A_s' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             A_s = class_pars_dict['A_s']
 *         elif 'As' in class_pars_dict:
 */
  __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_n_u_A_s, __pyx_v_class_pars_dict, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 301, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "euclidemu2.pyx":302
 * 
 *         if 'A_s' in class_pars_dict:
 *             A_s = class_pars_dict['A_s']             # <<<<<<<<<<<<<<
 *         elif 'As' in class_pars_dict:
 *             A_s = class_pars_dict['As']
 */
    __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_v_class_pars_dict, __pyx_n_u_A_s); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 302, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_A_s = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "euclidemu2.pyx":301
 *             raise KeyError("Missing parameter n_s. Can't proceed.")
 * 
 *         if 'A_s' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             A_s = class_pars_dict['A_s']
 *         elif 'As' in class_pars_dict:
 */
    goto __pyx_L9;
  }

  /* "euclidemu2.pyx":303
 *         if 'A_s' in class_pars_dict:
 *             A_s = class_pars_dict['A_s']
 *         elif 'As' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             A_s = class_pars_dict['As']
 *         elif 'ln10^{10}A_s' in class_pars_dict:
 */
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_n_u_As, __pyx_v_class_pars_dict, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 303, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "euclidemu2.pyx":304
 *             A_s = class_pars_dict['A_s']
 *         elif 'As' in class_pars_dict:
 *             A_s = class_pars_dict['As']             # <<<<<<<<<<<<<<
 *         elif 'ln10^{10}A_s' in class_pars_dict:
 *             A_s = np.exp(class_pars_dict['ln10^{10}A_s'])*1.0e-10
 */
    __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_v_class_pars_dict, __pyx_n_u_As); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 304, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_A_s = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "euclidemu2.pyx":303
 *         if 'A_s' in class_pars_dict:
 *             A_s = class_pars_dict['A_s']
 *         elif 'As' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             A_s = class_pars_dict['As']
 *         elif 'ln10^{10}A_s' in class_pars_dict:
 */
    goto __pyx_L9;
  }

  /* "euclidemu2.pyx":305
 *         elif 'As' in class_pars_dict:
 *             A_s = class_pars_dict['As']
 *         elif 'ln10^{10}A_s' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             A_s = np.exp(class_pars_dict['ln10^{10}A_s'])*1.0e-10
 *         else:
 */
  __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_kp_u_ln10_10_A_s, __pyx_v_class_pars_dict, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 305, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (likely(__pyx_t_2)) {

    /* "euclidemu2.pyx":306
 *             A_s = class_pars_dict['As']
 *         elif 'ln10^{10}A_s' in class_pars_dict:
 *             A_s = np.exp(class_pars_dict['ln10^{10}A_s'])*1.0e-10             # <<<<<<<<<<<<<<
 *         else:
 *             raise KeyError("Missing parameter A_s or ln10^{10}A_s. Can't proceed.")
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 306, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_exp); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 306, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_class_pars_dict, __pyx_kp_u_ln10_10_A_s); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 306, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_3);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 306, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Multiply(__pyx_t_4, __pyx_float_1_0eneg_10); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 306, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_A_s = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "euclidemu2.pyx":305
 *         elif 'As' in class_pars_dict:
 *             A_s = class_pars_dict['As']
 *         elif 'ln10^{10}A_s' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             A_s = np.exp(class_pars_dict['ln10^{10}A_s'])*1.0e-10
 *         else:
 */
    goto __pyx_L9;
  }

  /* "euclidemu2.pyx":308
 *             A_s = np.exp(class_pars_dict['ln10^{10}A_s'])*1.0e-10
 *         else:
 *             raise KeyError("Missing parameter A_s or ln10^{10}A_s. Can't proceed.")             # <<<<<<<<<<<<<<
 * 
 *         # Using default values for DE params for LCDM case.
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_KeyError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 308, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(0, 308, __pyx_L1_error)
  }
  __pyx_L9:;

  /* "euclidemu2.pyx":311
 * 
 *         # Using default values for DE params for LCDM case.
 *         if 'w0_fld' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             w0_fld = class_pars_dict['w0_fld']
 *         elif 'w0' in class_pars_dict:
 */
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_n_u_w0_fld, __pyx_v_class_pars_dict, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 311, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "euclidemu2.pyx":312
 *         # Using default values for DE params for LCDM case.
 *         if 'w0_fld' in class_pars_dict:
 *             w0_fld = class_pars_dict['w0_fld']             # <<<<<<<<<<<<<<
 *         elif 'w0' in class_pars_dict:
 *             w0_fld = class_pars_dict['w0']
 */
    __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_v_class_pars_dict, __pyx_n_u_w0_fld); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 312, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_v_w0_fld = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "euclidemu2.pyx":311
 * 
 *         # Using default values for DE params for LCDM case.
 *         if 'w0_fld' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             w0_fld = class_pars_dict['w0_fld']
 *         elif 'w0' in class_pars_dict:
 */
    goto __pyx_L10;
  }

  /* "euclidemu2.pyx":313
 *         if 'w0_fld' in class_pars_dict:
 *             w0_fld = class_pars_dict['w0_fld']
 *         elif 'w0' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             w0_fld = class_pars_dict['w0']
 *         elif 'w_0' in class_pars_dict:
 */
  __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_n_u_w0, __pyx_v_class_pars_dict, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 313, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "euclidemu2.pyx":314
 *             w0_fld = class_pars_dict['w0_fld']
 *         elif 'w0' in class_pars_dict:
 *             w0_fld = class_pars_dict['w0']             # <<<<<<<<<<<<<<
 *         elif 'w_0' in class_pars_dict:
 *             w0_fld = class_pars_dict['w_0']
 */
    __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_v_class_pars_dict, __pyx_n_u_w0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 314, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_v_w0_fld = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "euclidemu2.pyx":313
 *         if 'w0_fld' in class_pars_dict:
 *             w0_fld = class_pars_dict['w0_fld']
 *         elif 'w0' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             w0_fld = class_pars_dict['w0']
 *         elif 'w_0' in class_pars_dict:
 */
    goto __pyx_L10;
  }

  /* "euclidemu2.pyx":315
 *         elif 'w0' in class_pars_dict:
 *             w0_fld = class_pars_dict['w0']
 *         elif 'w_0' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             w0_fld = class_pars_dict['w_0']
 *         elif 'w' in class_pars_dict:
 */
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_n_u_w_0, __pyx_v_class_pars_dict, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 315, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "euclidemu2.pyx":316
 *             w0_fld = class_pars_dict['w0']
 *         elif 'w_0' in class_pars_dict:
 *             w0_fld = class_pars_dict['w_0']             # <<<<<<<<<<<<<<
 *         elif 'w' in class_pars_dict:
 *             w0_fld = class_pars_dict['w']
 */
    __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_v_class_pars_dict, __pyx_n_u_w_0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 316, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_v_w0_fld = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "euclidemu2.pyx":315
 *         elif 'w0' in class_pars_dict:
 *             w0_fld = class_pars_dict['w0']
 *         elif 'w_0' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             w0_fld = class_pars_dict['w_0']
 *         elif 'w' in class_pars_dict:
 */
    goto __pyx_L10;
  }

  /* "euclidemu2.pyx":317
 *         elif 'w_0' in class_pars_dict:
 *             w0_fld = class_pars_dict['w_0']
 *         elif 'w' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             w0_fld = class_pars_dict['w']
 *         else:
 */
  __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_n_u_w, __pyx_v_class_pars_dict, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 317, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "euclidemu2.pyx":318
 *             w0_fld = class_pars_dict['w_0']
 *         elif 'w' in class_pars_dict:
 *             w0_fld = class_pars_dict['w']             # <<<<<<<<<<<<<<
 *         else:
 *             print("Missing parameter w0. Will set to -1.")
 */
    __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_v_class_pars_dict, __pyx_n_u_w); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 318, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_v_w0_fld = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "euclidemu2.pyx":317
 *         elif 'w_0' in class_pars_dict:
 *             w0_fld = class_pars_dict['w_0']
 *         elif 'w' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             w0_fld = class_pars_dict['w']
 *         else:
 */
    goto __pyx_L10;
  }

  /* "euclidemu2.pyx":320
 *             w0_fld = class_pars_dict['w']
 *         else:
 *             print("Missing parameter w0. Will set to -1.")             # <<<<<<<<<<<<<<
 *             w0_fld=-1.0
 * 
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 320, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "euclidemu2.pyx":321
 *         else:
 *             print("Missing parameter w0. Will set to -1.")
 *             w0_fld=-1.0             # <<<<<<<<<<<<<<
 * 
 *         if 'wa_fld' in class_pars_dict:
 */
    __Pyx_INCREF(__pyx_float_neg_1_0);
    __pyx_v_w0_fld = __pyx_float_neg_1_0;
  }
  __pyx_L10:;

  /* "euclidemu2.pyx":323
 *             w0_fld=-1.0
 * 
 *         if 'wa_fld' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             wa_fld = class_pars_dict['wa_fld']
 *         elif 'wa' in class_pars_dict:
 */
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_n_u_wa_fld, __pyx_v_class_pars_dict, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 323, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "euclidemu2.pyx":324
 * 
 *         if 'wa_fld' in class_pars_dict:
 *             wa_fld = class_pars_dict['wa_fld']             # <<<<<<<<<<<<<<
 *         elif 'wa' in class_pars_dict:
 *             wa_fld = class_pars_dict['wa']
 */
    __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_v_class_pars_dict, __pyx_n_u_wa_fld); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 324, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_v_wa_fld = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "euclidemu2.pyx":323
 *             w0_fld=-1.0
 * 
 *         if 'wa_fld' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             wa_fld = class_pars_dict['wa_fld']
 *         elif 'wa' in class_pars_dict:
 */
    goto __pyx_L11;
  }

  /* "euclidemu2.pyx":325
 *         if 'wa_fld' in class_pars_dict:
 *             wa_fld = class_pars_dict['wa_fld']
 *         elif 'wa' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             wa_fld = class_pars_dict['wa']
 *         elif 'w_a' in class_pars_dict:
 */
  __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_n_u_wa, __pyx_v_class_pars_dict, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 325, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "euclidemu2.pyx":326
 *             wa_fld = class_pars_dict['wa_fld']
 *         elif 'wa' in class_pars_dict:
 *             wa_fld = class_pars_dict['wa']             # <<<<<<<<<<<<<<
 *         elif 'w_a' in class_pars_dict:
 *             wa_fld = class_pars_dict['w_a']
 */
    __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_v_class_pars_dict, __pyx_n_u_wa); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 326, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_v_wa_fld = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "euclidemu2.pyx":325
 *         if 'wa_fld' in class_pars_dict:
 *             wa_fld = class_pars_dict['wa_fld']
 *         elif 'wa' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             wa_fld = class_pars_dict['wa']
 *         elif 'w_a' in class_pars_dict:
 */
    goto __pyx_L11;
  }

  /* "euclidemu2.pyx":327
 *         elif 'wa' in class_pars_dict:
 *             wa_fld = class_pars_dict['wa']
 *         elif 'w_a' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             wa_fld = class_pars_dict['w_a']
 *         else:
 */
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_n_u_w_a, __pyx_v_class_pars_dict, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 327, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "euclidemu2.pyx":328
 *             wa_fld = class_pars_dict['wa']
 *         elif 'w_a' in class_pars_dict:
 *             wa_fld = class_pars_dict['w_a']             # <<<<<<<<<<<<<<
 *         else:
 *             print("Missing parameter wa. Will set to 0.")
 */
    __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_v_class_pars_dict, __pyx_n_u_w_a); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 328, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_v_wa_fld = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "euclidemu2.pyx":327
 *         elif 'wa' in class_pars_dict:
 *             wa_fld = class_pars_dict['wa']
 *         elif 'w_a' in class_pars_dict:             # <<<<<<<<<<<<<<
 *             wa_fld = class_pars_dict['w_a']
 *         else:
 */
    goto __pyx_L11;
  }

  /* "euclidemu2.pyx":330
 *             wa_fld = class_pars_dict['w_a']
 *         else:
 *             print("Missing parameter wa. Will set to 0.")             # <<<<<<<<<<<<<<
 *             wa_fld=0.0
 * 
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 330, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "euclidemu2.pyx":331
 *         else:
 *             print("Missing parameter wa. Will set to 0.")
 *             wa_fld=0.0             # <<<<<<<<<<<<<<
 * 
 *         # If Omega_cdm is given instead of Omega_m, add neutrino contribution using
 */
    __Pyx_INCREF(__pyx_float_0_0);
    __pyx_v_wa_fld = __pyx_float_0_0;
  }
  __pyx_L11:;

  /* "euclidemu2.pyx":335
 *         # If Omega_cdm is given instead of Omega_m, add neutrino contribution using
 *         # approximation.
 *         if not(Om_cdm==0):             # <<<<<<<<<<<<<<
 *             Om_m=Om_m+m_ncdm/93.14/h**2
 * 
 */
  __pyx_t_5 = __Pyx_PyInt_EqObjC(__pyx_v_Om_cdm, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 335, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "euclidemu2.pyx":336
 *         # approximation.
 *         if not(Om_cdm==0):
 *             Om_m=Om_m+m_ncdm/93.14/h**2             # <<<<<<<<<<<<<<
 * 
 *         emu_pars_dict = {'Omega_b': Om_b,
 */
    __pyx_t_5 = __Pyx_PyFloat_TrueDivideObjC(__pyx_v_m_ncdm, __pyx_float_93_14, 93.14, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 336, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = PyNumber_Power(__pyx_v_h, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 336, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 336, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Add(__pyx_v_Om_m, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 336, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_Om_m, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "euclidemu2.pyx":335
 *         # If Omega_cdm is given instead of Omega_m, add neutrino contribution using
 *         # approximation.
 *         if not(Om_cdm==0):             # <<<<<<<<<<<<<<
 *             Om_m=Om_m+m_ncdm/93.14/h**2
 * 
 */
  }

  /* "euclidemu2.pyx":338
 *             Om_m=Om_m+m_ncdm/93.14/h**2
 * 
 *         emu_pars_dict = {'Omega_b': Om_b,             # <<<<<<<<<<<<<<
 *                          'Omega_m': Om_m,
 *                          'm_ncdm': m_ncdm,
 */
  __pyx_t_4 = __Pyx_PyDict_NewPresized(9); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_u_Omega_b, __pyx_v_Om_b) < 0) __PYX_ERR(0, 338, __pyx_L1_error)

  /* "euclidemu2.pyx":339
 * 
 *         emu_pars_dict = {'Omega_b': Om_b,
 *                          'Omega_m': Om_m,             # <<<<<<<<<<<<<<
 *                          'm_ncdm': m_ncdm,
 *                          'n_s': n_s,
 */
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_u_Omega_m, __pyx_v_Om_m) < 0) __PYX_ERR(0, 338, __pyx_L1_error)

  /* "euclidemu2.pyx":340
 *         emu_pars_dict = {'Omega_b': Om_b,
 *                          'Omega_m': Om_m,
 *                          'm_ncdm': m_ncdm,             # <<<<<<<<<<<<<<
 *                          'n_s': n_s,
 *                          'h': h,
 */
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_u_m_ncdm, __pyx_v_m_ncdm) < 0) __PYX_ERR(0, 338, __pyx_L1_error)

  /* "euclidemu2.pyx":341
 *                          'Omega_m': Om_m,
 *                          'm_ncdm': m_ncdm,
 *                          'n_s': n_s,             # <<<<<<<<<<<<<<
 *                          'h': h,
 *                          'w0_fld': w0_fld,
 */
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_u_n_s, __pyx_v_n_s) < 0) __PYX_ERR(0, 338, __pyx_L1_error)

  /* "euclidemu2.pyx":342
 *                          'm_ncdm': m_ncdm,
 *                          'n_s': n_s,
 *                          'h': h,             # <<<<<<<<<<<<<<
 *                          'w0_fld': w0_fld,
 *                          'wa_fld': wa_fld,
 */
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_u_h, __pyx_v_h) < 0) __PYX_ERR(0, 338, __pyx_L1_error)

  /* "euclidemu2.pyx":343
 *                          'n_s': n_s,
 *                          'h': h,
 *                          'w0_fld': w0_fld,             # <<<<<<<<<<<<<<
 *                          'wa_fld': wa_fld,
 *                          'A_s': A_s,
 */
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_u_w0_fld, __pyx_v_w0_fld) < 0) __PYX_ERR(0, 338, __pyx_L1_error)

  /* "euclidemu2.pyx":344
 *                          'h': h,
 *                          'w0_fld': w0_fld,
 *                          'wa_fld': wa_fld,             # <<<<<<<<<<<<<<
 *                          'A_s': A_s,
 *                          'Omega_cdm': Om_cdm}
 */
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_u_wa_fld, __pyx_v_wa_fld) < 0) __PYX_ERR(0, 338, __pyx_L1_error)

  /* "euclidemu2.pyx":345
 *                          'w0_fld': w0_fld,
 *                          'wa_fld': wa_fld,
 *                          'A_s': A_s,             # <<<<<<<<<<<<<<
 *                          'Omega_cdm': Om_cdm}
 * 
 */
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_u_A_s, __pyx_v_A_s) < 0) __PYX_ERR(0, 338, __pyx_L1_error)

  /* "euclidemu2.pyx":346
 *                          'wa_fld': wa_fld,
 *                          'A_s': A_s,
 *                          'Omega_cdm': Om_cdm}             # <<<<<<<<<<<<<<
 * 
 *         return emu_pars_dict
 */
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_u_Omega_cdm, __pyx_v_Om_cdm) < 0) __PYX_ERR(0, 338, __pyx_L1_error)
  __pyx_v_emu_pars_dict = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "euclidemu2.pyx":348
 *                          'Omega_cdm': Om_cdm}
 * 
 *         return emu_pars_dict             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_emu_pars_dict);
  __pyx_r = __pyx_v_emu_pars_dict;
  goto __pyx_L0;

  /* "euclidemu2.pyx":211
 * 
 * 
 *     def convert_to_emu(self,class_pars_dict):             # <<<<<<<<<<<<<<
 *         """
 *         Signature:    convert_to_emu(class_pars_dict)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("euclidemu2.PyEuclidEmulator.convert_to_emu", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_h);
  __Pyx_XDECREF(__pyx_v_Om_b);
  __Pyx_XDECREF(__pyx_v_m_ncdm);
  __Pyx_XDECREF(__pyx_v_Om_cdm);
  __Pyx_XDECREF(__pyx_v_Om_m);
  __Pyx_XDECREF(__pyx_v_n_s);
  __Pyx_XDECREF(__pyx_v_A_s);
  __Pyx_XDECREF(__pyx_v_w0_fld);
  __Pyx_XDECREF(__pyx_v_wa_fld);
  __Pyx_XDECREF(__pyx_v_emu_pars_dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "euclidemu2.pyx":352
 * 
 * 
 *     def get_boost(self,cosmo_par_in,redshifts,custom_kvec=None):             # <<<<<<<<<<<<<<
 * 
 *         if isinstance(redshifts, (int, float)):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10euclidemu2_16PyEuclidEmulator_13get_boost(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10euclidemu2_16PyEuclidEmulator_13get_boost(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_cosmo_par_in = 0;
  PyObject *__pyx_v_redshifts = 0;
  PyObject *__pyx_v_custom_kvec = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_boost (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cosmo_par_in,&__pyx_n_s_redshifts,&__pyx_n_s_custom_kvec,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cosmo_par_in)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_redshifts)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_boost", 0, 2, 3, 1); __PYX_ERR(0, 352, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_custom_kvec);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_boost") < 0)) __PYX_ERR(0, 352, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_cosmo_par_in = values[0];
    __pyx_v_redshifts = values[1];
    __pyx_v_custom_kvec = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_boost", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 352, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("euclidemu2.PyEuclidEmulator.get_boost", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10euclidemu2_16PyEuclidEmulator_12get_boost(((struct __pyx_obj_10euclidemu2_PyEuclidEmulator *)__pyx_v_self), __pyx_v_cosmo_par_in, __pyx_v_redshifts, __pyx_v_custom_kvec);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10euclidemu2_16PyEuclidEmulator_12get_boost(struct __pyx_obj_10euclidemu2_PyEuclidEmulator *__pyx_v_self, PyObject *__pyx_v_cosmo_par_in, PyObject *__pyx_v_redshifts, PyObject *__pyx_v_custom_kvec) {
  PyObject *__pyx_v_z = NULL;
  PyObject *__pyx_v_cosmo_par = NULL;
  struct __pyx_obj_10euclidemu2_PyCosmology *__pyx_v_cosmo = NULL;
  Py_ssize_t __pyx_v_len_redshifts;
  PyObject *__pyx_v_k = NULL;
  PyObject *__pyx_v_logboost = NULL;
  PyObject *__pyx_v_kvals = NULL;
  PyObject *__pyx_v_k_shape = NULL;
  int __pyx_v_do_extrapolate_above;
  int __pyx_v_do_extrapolate_below;
  PyObject *__pyx_v_upper_mask = NULL;
  PyObject *__pyx_v_lower_mask = NULL;
  PyObject *__pyx_v_mask = NULL;
  PyObject *__pyx_v_custom_k_within_range = NULL;
  PyObject *__pyx_v_custom_k_below = NULL;
  PyObject *__pyx_v_custom_k_above = NULL;
  PyObject *__pyx_v_wrn_message = NULL;
  CYTHON_UNUSED Py_ssize_t __pyx_v_len_kvals;
  PyObject *__pyx_v_bvals = NULL;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_v_tmp = NULL;
  PyObject *__pyx_v_b_extrap = NULL;
  PyObject *__pyx_7genexpr__pyx_v_u = NULL;
  PyObject *__pyx_7genexpr__pyx_v_l = NULL;
  PyObject *__pyx_8genexpr1__pyx_v_l = NULL;
  PyObject *__pyx_8genexpr2__pyx_v_u = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_t_15;
  PyObject *(*__pyx_t_16)(PyObject *);
  Py_ssize_t __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_boost", 0);
  __Pyx_INCREF(__pyx_v_redshifts);
  __Pyx_INCREF(__pyx_v_custom_kvec);

  /* "euclidemu2.pyx":354
 *     def get_boost(self,cosmo_par_in,redshifts,custom_kvec=None):
 * 
 *         if isinstance(redshifts, (int, float)):             # <<<<<<<<<<<<<<
 *             redshifts = np.asarray([redshifts])
 *         else:
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_redshifts); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyFloat_Check(__pyx_v_redshifts); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "euclidemu2.pyx":355
 * 
 *         if isinstance(redshifts, (int, float)):
 *             redshifts = np.asarray([redshifts])             # <<<<<<<<<<<<<<
 *         else:
 *             redshifts = np.asarray(redshifts)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 355, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_asarray); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 355, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyList_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 355, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v_redshifts);
    __Pyx_GIVEREF(__pyx_v_redshifts);
    PyList_SET_ITEM(__pyx_t_5, 0, __pyx_v_redshifts);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_4 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 355, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF_SET(__pyx_v_redshifts, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "euclidemu2.pyx":354
 *     def get_boost(self,cosmo_par_in,redshifts,custom_kvec=None):
 * 
 *         if isinstance(redshifts, (int, float)):             # <<<<<<<<<<<<<<
 *             redshifts = np.asarray([redshifts])
 *         else:
 */
    goto __pyx_L3;
  }

  /* "euclidemu2.pyx":357
 *             redshifts = np.asarray([redshifts])
 *         else:
 *             redshifts = np.asarray(redshifts)             # <<<<<<<<<<<<<<
 * 
 *         for z in redshifts:
 */
  /*else*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 357, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_asarray); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 357, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_v_redshifts) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_redshifts);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 357, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF_SET(__pyx_v_redshifts, __pyx_t_4);
    __pyx_t_4 = 0;
  }
  __pyx_L3:;

  /* "euclidemu2.pyx":359
 *             redshifts = np.asarray(redshifts)
 * 
 *         for z in redshifts:             # <<<<<<<<<<<<<<
 *             assert z <= 10.0 and z>=0.0, "EuclidEmulator2 allows only redshifts in the interval [0.0, 10.0]"
 * 
 */
  if (likely(PyList_CheckExact(__pyx_v_redshifts)) || PyTuple_CheckExact(__pyx_v_redshifts)) {
    __pyx_t_4 = __pyx_v_redshifts; __Pyx_INCREF(__pyx_t_4); __pyx_t_8 = 0;
    __pyx_t_9 = NULL;
  } else {
    __pyx_t_8 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_redshifts); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 359, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_9 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 359, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_9)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_8); __Pyx_INCREF(__pyx_t_5); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 359, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 359, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_8); __Pyx_INCREF(__pyx_t_5); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 359, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 359, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_9(__pyx_t_4);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 359, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_z, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "euclidemu2.pyx":360
 * 
 *         for z in redshifts:
 *             assert z <= 10.0 and z>=0.0, "EuclidEmulator2 allows only redshifts in the interval [0.0, 10.0]"             # <<<<<<<<<<<<<<
 * 
 *         #Check if all variables are passed and convert to emu dict
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_z, __pyx_float_10_0, Py_LE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 360, __pyx_L1_error)
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 360, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_1) {
      } else {
        __pyx_t_2 = __pyx_t_1;
        goto __pyx_L8_bool_binop_done;
      }
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_z, __pyx_float_0_0, Py_GE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 360, __pyx_L1_error)
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 360, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_2 = __pyx_t_1;
      __pyx_L8_bool_binop_done:;
      if (unlikely(!__pyx_t_2)) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_EuclidEmulator2_allows_only_reds);
        __PYX_ERR(0, 360, __pyx_L1_error)
      }
    }
    #endif

    /* "euclidemu2.pyx":359
 *             redshifts = np.asarray(redshifts)
 * 
 *         for z in redshifts:             # <<<<<<<<<<<<<<
 *             assert z <= 10.0 and z>=0.0, "EuclidEmulator2 allows only redshifts in the interval [0.0, 10.0]"
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "euclidemu2.pyx":363
 * 
 *         #Check if all variables are passed and convert to emu dict
 *         cosmo_par = self.convert_to_emu(cosmo_par_in)             # <<<<<<<<<<<<<<
 *         #Check if all parameters are in range
 *         self.check_param_range(cosmo_par)
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_convert_to_emu); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 363, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_v_cosmo_par_in) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_cosmo_par_in);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 363, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_cosmo_par = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "euclidemu2.pyx":365
 *         cosmo_par = self.convert_to_emu(cosmo_par_in)
 *         #Check if all parameters are in range
 *         self.check_param_range(cosmo_par)             # <<<<<<<<<<<<<<
 * 
 *         cosmo=PyCosmology(cosmo_par['Omega_b'],
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_check_param_range); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_v_cosmo_par) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_cosmo_par);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "euclidemu2.pyx":367
 *         self.check_param_range(cosmo_par)
 * 
 *         cosmo=PyCosmology(cosmo_par['Omega_b'],             # <<<<<<<<<<<<<<
 *                           cosmo_par['Omega_m'],
 *                           cosmo_par['m_ncdm'],
 */
  __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_v_cosmo_par, __pyx_n_u_Omega_b); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "euclidemu2.pyx":368
 * 
 *         cosmo=PyCosmology(cosmo_par['Omega_b'],
 *                           cosmo_par['Omega_m'],             # <<<<<<<<<<<<<<
 *                           cosmo_par['m_ncdm'],
 *                           cosmo_par['n_s'],
 */
  __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_v_cosmo_par, __pyx_n_u_Omega_m); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 368, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "euclidemu2.pyx":369
 *         cosmo=PyCosmology(cosmo_par['Omega_b'],
 *                           cosmo_par['Omega_m'],
 *                           cosmo_par['m_ncdm'],             # <<<<<<<<<<<<<<
 *                           cosmo_par['n_s'],
 *                           cosmo_par['h'],
 */
  __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_v_cosmo_par, __pyx_n_u_m_ncdm); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 369, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);

  /* "euclidemu2.pyx":370
 *                           cosmo_par['Omega_m'],
 *                           cosmo_par['m_ncdm'],
 *                           cosmo_par['n_s'],             # <<<<<<<<<<<<<<
 *                           cosmo_par['h'],
 *                           cosmo_par['w0_fld'],
 */
  __pyx_t_7 = __Pyx_PyObject_Dict_GetItem(__pyx_v_cosmo_par, __pyx_n_u_n_s); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);

  /* "euclidemu2.pyx":371
 *                           cosmo_par['m_ncdm'],
 *                           cosmo_par['n_s'],
 *                           cosmo_par['h'],             # <<<<<<<<<<<<<<
 *                           cosmo_par['w0_fld'],
 *                           cosmo_par['wa_fld'],
 */
  __pyx_t_10 = __Pyx_PyObject_Dict_GetItem(__pyx_v_cosmo_par, __pyx_n_u_h); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 371, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);

  /* "euclidemu2.pyx":372
 *                           cosmo_par['n_s'],
 *                           cosmo_par['h'],
 *                           cosmo_par['w0_fld'],             # <<<<<<<<<<<<<<
 *                           cosmo_par['wa_fld'],
 *                           cosmo_par['A_s'])
 */
  __pyx_t_11 = __Pyx_PyObject_Dict_GetItem(__pyx_v_cosmo_par, __pyx_n_u_w0_fld); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);

  /* "euclidemu2.pyx":373
 *                           cosmo_par['h'],
 *                           cosmo_par['w0_fld'],
 *                           cosmo_par['wa_fld'],             # <<<<<<<<<<<<<<
 *                           cosmo_par['A_s'])
 * 
 */
  __pyx_t_12 = __Pyx_PyObject_Dict_GetItem(__pyx_v_cosmo_par, __pyx_n_u_wa_fld); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);

  /* "euclidemu2.pyx":374
 *                           cosmo_par['w0_fld'],
 *                           cosmo_par['wa_fld'],
 *                           cosmo_par['A_s'])             # <<<<<<<<<<<<<<
 * 
 *         len_redshifts = len(redshifts)
 */
  __pyx_t_13 = __Pyx_PyObject_Dict_GetItem(__pyx_v_cosmo_par, __pyx_n_u_A_s); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);

  /* "euclidemu2.pyx":367
 *         self.check_param_range(cosmo_par)
 * 
 *         cosmo=PyCosmology(cosmo_par['Omega_b'],             # <<<<<<<<<<<<<<
 *                           cosmo_par['Omega_m'],
 *                           cosmo_par['m_ncdm'],
 */
  __pyx_t_14 = PyTuple_New(8); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_14, 1, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_14, 2, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_14, 3, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_14, 4, __pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_11);
  PyTuple_SET_ITEM(__pyx_t_14, 5, __pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_12);
  PyTuple_SET_ITEM(__pyx_t_14, 6, __pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_13);
  PyTuple_SET_ITEM(__pyx_t_14, 7, __pyx_t_13);
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_10 = 0;
  __pyx_t_11 = 0;
  __pyx_t_12 = 0;
  __pyx_t_13 = 0;
  __pyx_t_13 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_10euclidemu2_PyCosmology), __pyx_t_14, NULL); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __pyx_v_cosmo = ((struct __pyx_obj_10euclidemu2_PyCosmology *)__pyx_t_13);
  __pyx_t_13 = 0;

  /* "euclidemu2.pyx":376
 *                           cosmo_par['A_s'])
 * 
 *         len_redshifts = len(redshifts)             # <<<<<<<<<<<<<<
 *         self.compute_nlc(cosmo,redshifts,len_redshifts)
 * 
 */
  __pyx_t_8 = PyObject_Length(__pyx_v_redshifts); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 376, __pyx_L1_error)
  __pyx_v_len_redshifts = __pyx_t_8;

  /* "euclidemu2.pyx":377
 * 
 *         len_redshifts = len(redshifts)
 *         self.compute_nlc(cosmo,redshifts,len_redshifts)             # <<<<<<<<<<<<<<
 * 
 *         k=np.asarray(self.kvec)
 */
  __pyx_t_14 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_compute_nlc); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 377, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __pyx_t_12 = PyInt_FromSsize_t(__pyx_v_len_redshifts); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 377, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_11 = NULL;
  __pyx_t_15 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_14))) {
    __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_14);
    if (likely(__pyx_t_11)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
      __Pyx_INCREF(__pyx_t_11);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_14, function);
      __pyx_t_15 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_14)) {
    PyObject *__pyx_temp[4] = {__pyx_t_11, ((PyObject *)__pyx_v_cosmo), __pyx_v_redshifts, __pyx_t_12};
    __pyx_t_13 = __Pyx_PyFunction_FastCall(__pyx_t_14, __pyx_temp+1-__pyx_t_15, 3+__pyx_t_15); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 377, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_14)) {
    PyObject *__pyx_temp[4] = {__pyx_t_11, ((PyObject *)__pyx_v_cosmo), __pyx_v_redshifts, __pyx_t_12};
    __pyx_t_13 = __Pyx_PyCFunction_FastCall(__pyx_t_14, __pyx_temp+1-__pyx_t_15, 3+__pyx_t_15); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 377, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  } else
  #endif
  {
    __pyx_t_10 = PyTuple_New(3+__pyx_t_15); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 377, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    if (__pyx_t_11) {
      __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_11); __pyx_t_11 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_cosmo));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_cosmo));
    PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_15, ((PyObject *)__pyx_v_cosmo));
    __Pyx_INCREF(__pyx_v_redshifts);
    __Pyx_GIVEREF(__pyx_v_redshifts);
    PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_15, __pyx_v_redshifts);
    __Pyx_GIVEREF(__pyx_t_12);
    PyTuple_SET_ITEM(__pyx_t_10, 2+__pyx_t_15, __pyx_t_12);
    __pyx_t_12 = 0;
    __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_10, NULL); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 377, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  }
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

  /* "euclidemu2.pyx":379
 *         self.compute_nlc(cosmo,redshifts,len_redshifts)
 * 
 *         k=np.asarray(self.kvec)             # <<<<<<<<<<<<<<
 *         logboost=np.reshape(self.Bvec[0:len_redshifts],(len_redshifts,len(k)))
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_np); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_asarray); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __pyx_t_14 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_kvec); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __pyx_t_12 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_10))) {
    __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_10);
    if (likely(__pyx_t_12)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
      __Pyx_INCREF(__pyx_t_12);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_10, function);
    }
  }
  __pyx_t_13 = (__pyx_t_12) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_12, __pyx_t_14) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_14);
  __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_v_k = __pyx_t_13;
  __pyx_t_13 = 0;

  /* "euclidemu2.pyx":380
 * 
 *         k=np.asarray(self.kvec)
 *         logboost=np.reshape(self.Bvec[0:len_redshifts],(len_redshifts,len(k)))             # <<<<<<<<<<<<<<
 * 
 *         #Extrapolate for custom k-range
 */
  __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_np); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_reshape); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_Bvec); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_12 = __Pyx_PyObject_GetSlice(__pyx_t_10, 0, __pyx_v_len_redshifts, NULL, NULL, NULL, 1, 1, 1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = PyInt_FromSsize_t(__pyx_v_len_redshifts); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_8 = PyObject_Length(__pyx_v_k); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 380, __pyx_L1_error)
  __pyx_t_11 = PyInt_FromSsize_t(__pyx_t_8); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_11);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_11);
  __pyx_t_10 = 0;
  __pyx_t_11 = 0;
  __pyx_t_11 = NULL;
  __pyx_t_15 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_14))) {
    __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_14);
    if (likely(__pyx_t_11)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
      __Pyx_INCREF(__pyx_t_11);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_14, function);
      __pyx_t_15 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_14)) {
    PyObject *__pyx_temp[3] = {__pyx_t_11, __pyx_t_12, __pyx_t_7};
    __pyx_t_13 = __Pyx_PyFunction_FastCall(__pyx_t_14, __pyx_temp+1-__pyx_t_15, 2+__pyx_t_15); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 380, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_14)) {
    PyObject *__pyx_temp[3] = {__pyx_t_11, __pyx_t_12, __pyx_t_7};
    __pyx_t_13 = __Pyx_PyCFunction_FastCall(__pyx_t_14, __pyx_temp+1-__pyx_t_15, 2+__pyx_t_15); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 380, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  {
    __pyx_t_10 = PyTuple_New(2+__pyx_t_15); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 380, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    if (__pyx_t_11) {
      __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_11); __pyx_t_11 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_12);
    PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_15, __pyx_t_12);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_15, __pyx_t_7);
    __pyx_t_12 = 0;
    __pyx_t_7 = 0;
    __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_10, NULL); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 380, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  }
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __pyx_v_logboost = __pyx_t_13;
  __pyx_t_13 = 0;

  /* "euclidemu2.pyx":383
 * 
 *         #Extrapolate for custom k-range
 *         kvals = k             # <<<<<<<<<<<<<<
 *         k_shape = kvals.shape
 * 
 */
  __Pyx_INCREF(__pyx_v_k);
  __pyx_v_kvals = __pyx_v_k;

  /* "euclidemu2.pyx":384
 *         #Extrapolate for custom k-range
 *         kvals = k
 *         k_shape = kvals.shape             # <<<<<<<<<<<<<<
 * 
 *         do_extrapolate_above = False
 */
  __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_v_kvals, __pyx_n_s_shape); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_v_k_shape = __pyx_t_13;
  __pyx_t_13 = 0;

  /* "euclidemu2.pyx":386
 *         k_shape = kvals.shape
 * 
 *         do_extrapolate_above = False             # <<<<<<<<<<<<<<
 *         do_extrapolate_below = False
 *         if not(custom_kvec is None):
 */
  __pyx_v_do_extrapolate_above = 0;

  /* "euclidemu2.pyx":387
 * 
 *         do_extrapolate_above = False
 *         do_extrapolate_below = False             # <<<<<<<<<<<<<<
 *         if not(custom_kvec is None):
 * 
 */
  __pyx_v_do_extrapolate_below = 0;

  /* "euclidemu2.pyx":388
 *         do_extrapolate_above = False
 *         do_extrapolate_below = False
 *         if not(custom_kvec is None):             # <<<<<<<<<<<<<<
 * 
 *             if isinstance(custom_kvec, (int, float)):
 */
  __pyx_t_2 = (__pyx_v_custom_kvec != Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "euclidemu2.pyx":390
 *         if not(custom_kvec is None):
 * 
 *             if isinstance(custom_kvec, (int, float)):             # <<<<<<<<<<<<<<
 *                 custom_kvec = np.asarray([custom_kvec])
 *             else:
 */
    __pyx_t_2 = PyInt_Check(__pyx_v_custom_kvec); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L12_bool_binop_done;
    }
    __pyx_t_3 = PyFloat_Check(__pyx_v_custom_kvec); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L12_bool_binop_done:;
    __pyx_t_2 = (__pyx_t_1 != 0);
    if (__pyx_t_2) {

      /* "euclidemu2.pyx":391
 * 
 *             if isinstance(custom_kvec, (int, float)):
 *                 custom_kvec = np.asarray([custom_kvec])             # <<<<<<<<<<<<<<
 *             else:
 *                 custom_kvec = np.asarray(custom_kvec)
 */
      __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_np); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 391, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_asarray); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 391, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __pyx_t_14 = PyList_New(1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 391, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_INCREF(__pyx_v_custom_kvec);
      __Pyx_GIVEREF(__pyx_v_custom_kvec);
      PyList_SET_ITEM(__pyx_t_14, 0, __pyx_v_custom_kvec);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
        }
      }
      __pyx_t_13 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_7, __pyx_t_14) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_14);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 391, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF_SET(__pyx_v_custom_kvec, __pyx_t_13);
      __pyx_t_13 = 0;

      /* "euclidemu2.pyx":390
 *         if not(custom_kvec is None):
 * 
 *             if isinstance(custom_kvec, (int, float)):             # <<<<<<<<<<<<<<
 *                 custom_kvec = np.asarray([custom_kvec])
 *             else:
 */
      goto __pyx_L11;
    }

    /* "euclidemu2.pyx":393
 *                 custom_kvec = np.asarray([custom_kvec])
 *             else:
 *                 custom_kvec = np.asarray(custom_kvec)             # <<<<<<<<<<<<<<
 * 
 *             upper_mask = custom_kvec < max(kvals)
 */
    /*else*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_np); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 393, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_asarray); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 393, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_14))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_14);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_14, function);
        }
      }
      __pyx_t_13 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_14, __pyx_t_10, __pyx_v_custom_kvec) : __Pyx_PyObject_CallOneArg(__pyx_t_14, __pyx_v_custom_kvec);
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 393, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_DECREF_SET(__pyx_v_custom_kvec, __pyx_t_13);
      __pyx_t_13 = 0;
    }
    __pyx_L11:;

    /* "euclidemu2.pyx":395
 *                 custom_kvec = np.asarray(custom_kvec)
 * 
 *             upper_mask = custom_kvec < max(kvals)             # <<<<<<<<<<<<<<
 *             lower_mask = custom_kvec > min(kvals)
 *             mask = [u and l for (u,l) in zip(lower_mask, upper_mask)]
 */
    __pyx_t_13 = __Pyx_PyObject_CallOneArg(__pyx_builtin_max, __pyx_v_kvals); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 395, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_14 = PyObject_RichCompare(__pyx_v_custom_kvec, __pyx_t_13, Py_LT); __Pyx_XGOTREF(__pyx_t_14); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 395, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __pyx_v_upper_mask = __pyx_t_14;
    __pyx_t_14 = 0;

    /* "euclidemu2.pyx":396
 * 
 *             upper_mask = custom_kvec < max(kvals)
 *             lower_mask = custom_kvec > min(kvals)             # <<<<<<<<<<<<<<
 *             mask = [u and l for (u,l) in zip(lower_mask, upper_mask)]
 *             custom_k_within_range = custom_kvec[mask]
 */
    __pyx_t_14 = __Pyx_PyObject_CallOneArg(__pyx_builtin_min, __pyx_v_kvals); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 396, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_13 = PyObject_RichCompare(__pyx_v_custom_kvec, __pyx_t_14, Py_GT); __Pyx_XGOTREF(__pyx_t_13); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 396, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_v_lower_mask = __pyx_t_13;
    __pyx_t_13 = 0;

    /* "euclidemu2.pyx":397
 *             upper_mask = custom_kvec < max(kvals)
 *             lower_mask = custom_kvec > min(kvals)
 *             mask = [u and l for (u,l) in zip(lower_mask, upper_mask)]             # <<<<<<<<<<<<<<
 *             custom_k_within_range = custom_kvec[mask]
 *             custom_k_below = custom_kvec[[not(l) for l in lower_mask]]
 */
    { /* enter inner scope */
      __pyx_t_13 = PyList_New(0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 397, __pyx_L16_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_14 = PyTuple_New(2); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 397, __pyx_L16_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_INCREF(__pyx_v_lower_mask);
      __Pyx_GIVEREF(__pyx_v_lower_mask);
      PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_v_lower_mask);
      __Pyx_INCREF(__pyx_v_upper_mask);
      __Pyx_GIVEREF(__pyx_v_upper_mask);
      PyTuple_SET_ITEM(__pyx_t_14, 1, __pyx_v_upper_mask);
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_14, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 397, __pyx_L16_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      if (likely(PyList_CheckExact(__pyx_t_10)) || PyTuple_CheckExact(__pyx_t_10)) {
        __pyx_t_14 = __pyx_t_10; __Pyx_INCREF(__pyx_t_14); __pyx_t_8 = 0;
        __pyx_t_9 = NULL;
      } else {
        __pyx_t_8 = -1; __pyx_t_14 = PyObject_GetIter(__pyx_t_10); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 397, __pyx_L16_error)
        __Pyx_GOTREF(__pyx_t_14);
        __pyx_t_9 = Py_TYPE(__pyx_t_14)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 397, __pyx_L16_error)
      }
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      for (;;) {
        if (likely(!__pyx_t_9)) {
          if (likely(PyList_CheckExact(__pyx_t_14))) {
            if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_14)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_10 = PyList_GET_ITEM(__pyx_t_14, __pyx_t_8); __Pyx_INCREF(__pyx_t_10); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 397, __pyx_L16_error)
            #else
            __pyx_t_10 = PySequence_ITEM(__pyx_t_14, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 397, __pyx_L16_error)
            __Pyx_GOTREF(__pyx_t_10);
            #endif
          } else {
            if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_14)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_10 = PyTuple_GET_ITEM(__pyx_t_14, __pyx_t_8); __Pyx_INCREF(__pyx_t_10); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 397, __pyx_L16_error)
            #else
            __pyx_t_10 = PySequence_ITEM(__pyx_t_14, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 397, __pyx_L16_error)
            __Pyx_GOTREF(__pyx_t_10);
            #endif
          }
        } else {
          __pyx_t_10 = __pyx_t_9(__pyx_t_14);
          if (unlikely(!__pyx_t_10)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 397, __pyx_L16_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_10);
        }
        if ((likely(PyTuple_CheckExact(__pyx_t_10))) || (PyList_CheckExact(__pyx_t_10))) {
          PyObject* sequence = __pyx_t_10;
          Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
          if (unlikely(size != 2)) {
            if (size > 2) __Pyx_RaiseTooManyValuesError(2);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 397, __pyx_L16_error)
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_7 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_12 = PyTuple_GET_ITEM(sequence, 1); 
          } else {
            __pyx_t_7 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_12 = PyList_GET_ITEM(sequence, 1); 
          }
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_12);
          #else
          __pyx_t_7 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 397, __pyx_L16_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_12 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 397, __pyx_L16_error)
          __Pyx_GOTREF(__pyx_t_12);
          #endif
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        } else {
          Py_ssize_t index = -1;
          __pyx_t_11 = PyObject_GetIter(__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 397, __pyx_L16_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_16 = Py_TYPE(__pyx_t_11)->tp_iternext;
          index = 0; __pyx_t_7 = __pyx_t_16(__pyx_t_11); if (unlikely(!__pyx_t_7)) goto __pyx_L19_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_7);
          index = 1; __pyx_t_12 = __pyx_t_16(__pyx_t_11); if (unlikely(!__pyx_t_12)) goto __pyx_L19_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_12);
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_16(__pyx_t_11), 2) < 0) __PYX_ERR(0, 397, __pyx_L16_error)
          __pyx_t_16 = NULL;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          goto __pyx_L20_unpacking_done;
          __pyx_L19_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_16 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(0, 397, __pyx_L16_error)
          __pyx_L20_unpacking_done:;
        }
        __Pyx_XDECREF_SET(__pyx_7genexpr__pyx_v_u, __pyx_t_7);
        __pyx_t_7 = 0;
        __Pyx_XDECREF_SET(__pyx_7genexpr__pyx_v_l, __pyx_t_12);
        __pyx_t_12 = 0;
        __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_7genexpr__pyx_v_u); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 397, __pyx_L16_error)
        if (__pyx_t_2) {
        } else {
          __Pyx_INCREF(__pyx_7genexpr__pyx_v_u);
          __pyx_t_10 = __pyx_7genexpr__pyx_v_u;
          goto __pyx_L21_bool_binop_done;
        }
        __Pyx_INCREF(__pyx_7genexpr__pyx_v_l);
        __pyx_t_10 = __pyx_7genexpr__pyx_v_l;
        __pyx_L21_bool_binop_done:;
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_13, (PyObject*)__pyx_t_10))) __PYX_ERR(0, 397, __pyx_L16_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_XDECREF(__pyx_7genexpr__pyx_v_l); __pyx_7genexpr__pyx_v_l = 0;
      __Pyx_XDECREF(__pyx_7genexpr__pyx_v_u); __pyx_7genexpr__pyx_v_u = 0;
      goto __pyx_L23_exit_scope;
      __pyx_L16_error:;
      __Pyx_XDECREF(__pyx_7genexpr__pyx_v_l); __pyx_7genexpr__pyx_v_l = 0;
      __Pyx_XDECREF(__pyx_7genexpr__pyx_v_u); __pyx_7genexpr__pyx_v_u = 0;
      goto __pyx_L1_error;
      __pyx_L23_exit_scope:;
    } /* exit inner scope */
    __pyx_v_mask = ((PyObject*)__pyx_t_13);
    __pyx_t_13 = 0;

    /* "euclidemu2.pyx":398
 *             lower_mask = custom_kvec > min(kvals)
 *             mask = [u and l for (u,l) in zip(lower_mask, upper_mask)]
 *             custom_k_within_range = custom_kvec[mask]             # <<<<<<<<<<<<<<
 *             custom_k_below = custom_kvec[[not(l) for l in lower_mask]]
 *             custom_k_above = custom_kvec[[not(u) for u in upper_mask]]
 */
    __pyx_t_13 = __Pyx_PyObject_GetItem(__pyx_v_custom_kvec, __pyx_v_mask); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 398, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_v_custom_k_within_range = __pyx_t_13;
    __pyx_t_13 = 0;

    /* "euclidemu2.pyx":399
 *             mask = [u and l for (u,l) in zip(lower_mask, upper_mask)]
 *             custom_k_within_range = custom_kvec[mask]
 *             custom_k_below = custom_kvec[[not(l) for l in lower_mask]]             # <<<<<<<<<<<<<<
 *             custom_k_above = custom_kvec[[not(u) for u in upper_mask]]
 * 
 */
    { /* enter inner scope */
      __pyx_t_13 = PyList_New(0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 399, __pyx_L26_error)
      __Pyx_GOTREF(__pyx_t_13);
      if (likely(PyList_CheckExact(__pyx_v_lower_mask)) || PyTuple_CheckExact(__pyx_v_lower_mask)) {
        __pyx_t_14 = __pyx_v_lower_mask; __Pyx_INCREF(__pyx_t_14); __pyx_t_8 = 0;
        __pyx_t_9 = NULL;
      } else {
        __pyx_t_8 = -1; __pyx_t_14 = PyObject_GetIter(__pyx_v_lower_mask); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 399, __pyx_L26_error)
        __Pyx_GOTREF(__pyx_t_14);
        __pyx_t_9 = Py_TYPE(__pyx_t_14)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 399, __pyx_L26_error)
      }
      for (;;) {
        if (likely(!__pyx_t_9)) {
          if (likely(PyList_CheckExact(__pyx_t_14))) {
            if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_14)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_10 = PyList_GET_ITEM(__pyx_t_14, __pyx_t_8); __Pyx_INCREF(__pyx_t_10); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 399, __pyx_L26_error)
            #else
            __pyx_t_10 = PySequence_ITEM(__pyx_t_14, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 399, __pyx_L26_error)
            __Pyx_GOTREF(__pyx_t_10);
            #endif
          } else {
            if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_14)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_10 = PyTuple_GET_ITEM(__pyx_t_14, __pyx_t_8); __Pyx_INCREF(__pyx_t_10); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 399, __pyx_L26_error)
            #else
            __pyx_t_10 = PySequence_ITEM(__pyx_t_14, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 399, __pyx_L26_error)
            __Pyx_GOTREF(__pyx_t_10);
            #endif
          }
        } else {
          __pyx_t_10 = __pyx_t_9(__pyx_t_14);
          if (unlikely(!__pyx_t_10)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 399, __pyx_L26_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_10);
        }
        __Pyx_XDECREF_SET(__pyx_8genexpr1__pyx_v_l, __pyx_t_10);
        __pyx_t_10 = 0;
        __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_8genexpr1__pyx_v_l); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 399, __pyx_L26_error)
        __pyx_t_10 = __Pyx_PyBool_FromLong((!__pyx_t_2)); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 399, __pyx_L26_error)
        __Pyx_GOTREF(__pyx_t_10);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_13, (PyObject*)__pyx_t_10))) __PYX_ERR(0, 399, __pyx_L26_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_l); __pyx_8genexpr1__pyx_v_l = 0;
      goto __pyx_L29_exit_scope;
      __pyx_L26_error:;
      __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_l); __pyx_8genexpr1__pyx_v_l = 0;
      goto __pyx_L1_error;
      __pyx_L29_exit_scope:;
    } /* exit inner scope */
    __pyx_t_14 = __Pyx_PyObject_GetItem(__pyx_v_custom_kvec, __pyx_t_13); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 399, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __pyx_v_custom_k_below = __pyx_t_14;
    __pyx_t_14 = 0;

    /* "euclidemu2.pyx":400
 *             custom_k_within_range = custom_kvec[mask]
 *             custom_k_below = custom_kvec[[not(l) for l in lower_mask]]
 *             custom_k_above = custom_kvec[[not(u) for u in upper_mask]]             # <<<<<<<<<<<<<<
 * 
 *             if any(custom_kvec > max(kvals)):
 */
    { /* enter inner scope */
      __pyx_t_14 = PyList_New(0); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 400, __pyx_L32_error)
      __Pyx_GOTREF(__pyx_t_14);
      if (likely(PyList_CheckExact(__pyx_v_upper_mask)) || PyTuple_CheckExact(__pyx_v_upper_mask)) {
        __pyx_t_13 = __pyx_v_upper_mask; __Pyx_INCREF(__pyx_t_13); __pyx_t_8 = 0;
        __pyx_t_9 = NULL;
      } else {
        __pyx_t_8 = -1; __pyx_t_13 = PyObject_GetIter(__pyx_v_upper_mask); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 400, __pyx_L32_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_9 = Py_TYPE(__pyx_t_13)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 400, __pyx_L32_error)
      }
      for (;;) {
        if (likely(!__pyx_t_9)) {
          if (likely(PyList_CheckExact(__pyx_t_13))) {
            if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_13)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_10 = PyList_GET_ITEM(__pyx_t_13, __pyx_t_8); __Pyx_INCREF(__pyx_t_10); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 400, __pyx_L32_error)
            #else
            __pyx_t_10 = PySequence_ITEM(__pyx_t_13, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 400, __pyx_L32_error)
            __Pyx_GOTREF(__pyx_t_10);
            #endif
          } else {
            if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_13)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_10 = PyTuple_GET_ITEM(__pyx_t_13, __pyx_t_8); __Pyx_INCREF(__pyx_t_10); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 400, __pyx_L32_error)
            #else
            __pyx_t_10 = PySequence_ITEM(__pyx_t_13, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 400, __pyx_L32_error)
            __Pyx_GOTREF(__pyx_t_10);
            #endif
          }
        } else {
          __pyx_t_10 = __pyx_t_9(__pyx_t_13);
          if (unlikely(!__pyx_t_10)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 400, __pyx_L32_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_10);
        }
        __Pyx_XDECREF_SET(__pyx_8genexpr2__pyx_v_u, __pyx_t_10);
        __pyx_t_10 = 0;
        __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_8genexpr2__pyx_v_u); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 400, __pyx_L32_error)
        __pyx_t_10 = __Pyx_PyBool_FromLong((!__pyx_t_2)); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 400, __pyx_L32_error)
        __Pyx_GOTREF(__pyx_t_10);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_14, (PyObject*)__pyx_t_10))) __PYX_ERR(0, 400, __pyx_L32_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_u); __pyx_8genexpr2__pyx_v_u = 0;
      goto __pyx_L35_exit_scope;
      __pyx_L32_error:;
      __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_u); __pyx_8genexpr2__pyx_v_u = 0;
      goto __pyx_L1_error;
      __pyx_L35_exit_scope:;
    } /* exit inner scope */
    __pyx_t_13 = __Pyx_PyObject_GetItem(__pyx_v_custom_kvec, __pyx_t_14); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 400, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_v_custom_k_above = __pyx_t_13;
    __pyx_t_13 = 0;

    /* "euclidemu2.pyx":402
 *             custom_k_above = custom_kvec[[not(u) for u in upper_mask]]
 * 
 *             if any(custom_kvec > max(kvals)):             # <<<<<<<<<<<<<<
 *                 wrn_message = ("Warning:\nEuclidEmulator2 emulates the non-linear correction in \n"
 *                                "the interval [8.73e-3 h/Mpc, 9.41h/Mpc]. You are \n"
 */
    __pyx_t_13 = __Pyx_PyObject_CallOneArg(__pyx_builtin_max, __pyx_v_kvals); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 402, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_14 = PyObject_RichCompare(__pyx_v_custom_kvec, __pyx_t_13, Py_GT); __Pyx_XGOTREF(__pyx_t_14); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 402, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __pyx_t_13 = __Pyx_PyObject_CallOneArg(__pyx_builtin_any, __pyx_t_14); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 402, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_13); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 402, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    if (__pyx_t_2) {

      /* "euclidemu2.pyx":403
 * 
 *             if any(custom_kvec > max(kvals)):
 *                 wrn_message = ("Warning:\nEuclidEmulator2 emulates the non-linear correction in \n"             # <<<<<<<<<<<<<<
 *                                "the interval [8.73e-3 h/Mpc, 9.41h/Mpc]. You are \n"
 *                                "requesting k modes beyond k_max = 9.41h/Mpc. \n"
 */
      __Pyx_INCREF(__pyx_kp_u_Warning_EuclidEmulator2_emulates);
      __pyx_v_wrn_message = __pyx_kp_u_Warning_EuclidEmulator2_emulates;

      /* "euclidemu2.pyx":408
 *                                "Higher k modes constantly extrapolated.")
 * 
 *                 print(wrn_message)             # <<<<<<<<<<<<<<
 *                 do_extrapolate_above = True
 * 
 */
      __pyx_t_13 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_v_wrn_message); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 408, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

      /* "euclidemu2.pyx":409
 * 
 *                 print(wrn_message)
 *                 do_extrapolate_above = True             # <<<<<<<<<<<<<<
 * 
 *             if any(custom_kvec < min(kvals)):
 */
      __pyx_v_do_extrapolate_above = 1;

      /* "euclidemu2.pyx":402
 *             custom_k_above = custom_kvec[[not(u) for u in upper_mask]]
 * 
 *             if any(custom_kvec > max(kvals)):             # <<<<<<<<<<<<<<
 *                 wrn_message = ("Warning:\nEuclidEmulator2 emulates the non-linear correction in \n"
 *                                "the interval [8.73e-3 h/Mpc, 9.41h/Mpc]. You are \n"
 */
    }

    /* "euclidemu2.pyx":411
 *                 do_extrapolate_above = True
 * 
 *             if any(custom_kvec < min(kvals)):             # <<<<<<<<<<<<<<
 *                 wrn_message = ("Warning:\nEuclidEmulator2 emulates the non-linear correction in \n"
 *                                "the interval [8.73e-3 h/Mpc, 9.41h/Mpc]. You are \n"
 */
    __pyx_t_13 = __Pyx_PyObject_CallOneArg(__pyx_builtin_min, __pyx_v_kvals); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 411, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_14 = PyObject_RichCompare(__pyx_v_custom_kvec, __pyx_t_13, Py_LT); __Pyx_XGOTREF(__pyx_t_14); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 411, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __pyx_t_13 = __Pyx_PyObject_CallOneArg(__pyx_builtin_any, __pyx_t_14); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 411, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_13); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 411, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    if (__pyx_t_2) {

      /* "euclidemu2.pyx":412
 * 
 *             if any(custom_kvec < min(kvals)):
 *                 wrn_message = ("Warning:\nEuclidEmulator2 emulates the non-linear correction in \n"             # <<<<<<<<<<<<<<
 *                                "the interval [8.73e-3 h/Mpc, 9.41h/Mpc]. You are \n"
 *                                "requesting k modes below k_min = 8.73e-3 h/Mpc. \n"
 */
      __Pyx_INCREF(__pyx_kp_u_Warning_EuclidEmulator2_emulates_2);
      __Pyx_XDECREF_SET(__pyx_v_wrn_message, __pyx_kp_u_Warning_EuclidEmulator2_emulates_2);

      /* "euclidemu2.pyx":417
 *                                "Lower k modes constantly extrapolated.")
 * 
 *                 print(wrn_message)             # <<<<<<<<<<<<<<
 *                 do_extrapolate_below = True
 * 
 */
      __pyx_t_13 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_v_wrn_message); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 417, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

      /* "euclidemu2.pyx":418
 * 
 *                 print(wrn_message)
 *                 do_extrapolate_below = True             # <<<<<<<<<<<<<<
 * 
 *         len_kvals = len(kvals)
 */
      __pyx_v_do_extrapolate_below = 1;

      /* "euclidemu2.pyx":411
 *                 do_extrapolate_above = True
 * 
 *             if any(custom_kvec < min(kvals)):             # <<<<<<<<<<<<<<
 *                 wrn_message = ("Warning:\nEuclidEmulator2 emulates the non-linear correction in \n"
 *                                "the interval [8.73e-3 h/Mpc, 9.41h/Mpc]. You are \n"
 */
    }

    /* "euclidemu2.pyx":388
 *         do_extrapolate_above = False
 *         do_extrapolate_below = False
 *         if not(custom_kvec is None):             # <<<<<<<<<<<<<<
 * 
 *             if isinstance(custom_kvec, (int, float)):
 */
  }

  /* "euclidemu2.pyx":420
 *                 do_extrapolate_below = True
 * 
 *         len_kvals = len(kvals)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_8 = PyObject_Length(__pyx_v_kvals); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 420, __pyx_L1_error)
  __pyx_v_len_kvals = __pyx_t_8;

  /* "euclidemu2.pyx":423
 * 
 * 
 *         bvals = {}             # <<<<<<<<<<<<<<
 *         for i in range(len_redshifts):
 *             tmp = logboost[i]
 */
  __pyx_t_13 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_v_bvals = ((PyObject*)__pyx_t_13);
  __pyx_t_13 = 0;

  /* "euclidemu2.pyx":424
 * 
 *         bvals = {}
 *         for i in range(len_redshifts):             # <<<<<<<<<<<<<<
 *             tmp = logboost[i]
 *             if not(custom_kvec is None):
 */
  __pyx_t_8 = __pyx_v_len_redshifts;
  __pyx_t_17 = __pyx_t_8;
  for (__pyx_t_18 = 0; __pyx_t_18 < __pyx_t_17; __pyx_t_18+=1) {
    __pyx_v_i = __pyx_t_18;

    /* "euclidemu2.pyx":425
 *         bvals = {}
 *         for i in range(len_redshifts):
 *             tmp = logboost[i]             # <<<<<<<<<<<<<<
 *             if not(custom_kvec is None):
 *                 bvals[i] = 10.0**_CubicSpline(np.log10(kvals),
 */
    __pyx_t_13 = __Pyx_GetItemInt(__pyx_v_logboost, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 425, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_XDECREF_SET(__pyx_v_tmp, __pyx_t_13);
    __pyx_t_13 = 0;

    /* "euclidemu2.pyx":426
 *         for i in range(len_redshifts):
 *             tmp = logboost[i]
 *             if not(custom_kvec is None):             # <<<<<<<<<<<<<<
 *                 bvals[i] = 10.0**_CubicSpline(np.log10(kvals),
 *                                               tmp.reshape(k_shape)
 */
    __pyx_t_2 = (__pyx_v_custom_kvec != Py_None);
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "euclidemu2.pyx":427
 *             tmp = logboost[i]
 *             if not(custom_kvec is None):
 *                 bvals[i] = 10.0**_CubicSpline(np.log10(kvals),             # <<<<<<<<<<<<<<
 *                                               tmp.reshape(k_shape)
 *                                               )(np.log10(custom_k_within_range))
 */
      __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_CubicSpline); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 427, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 427, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_log10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 427, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_11);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_11, function);
        }
      }
      __pyx_t_12 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_11, __pyx_t_7, __pyx_v_kvals) : __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_v_kvals);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 427, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

      /* "euclidemu2.pyx":428
 *             if not(custom_kvec is None):
 *                 bvals[i] = 10.0**_CubicSpline(np.log10(kvals),
 *                                               tmp.reshape(k_shape)             # <<<<<<<<<<<<<<
 *                                               )(np.log10(custom_k_within_range))
 * 
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_tmp, __pyx_n_s_reshape); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 428, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
        }
      }
      __pyx_t_11 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_6, __pyx_v_k_shape) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_k_shape);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 428, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = NULL;
      __pyx_t_15 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
          __pyx_t_15 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_10)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_12, __pyx_t_11};
        __pyx_t_14 = __Pyx_PyFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_15, 2+__pyx_t_15); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 427, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_10)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_12, __pyx_t_11};
        __pyx_t_14 = __Pyx_PyCFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_15, 2+__pyx_t_15); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 427, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      } else
      #endif
      {
        __pyx_t_6 = PyTuple_New(2+__pyx_t_15); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 427, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        if (__pyx_t_7) {
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7); __pyx_t_7 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_12);
        PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_15, __pyx_t_12);
        __Pyx_GIVEREF(__pyx_t_11);
        PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_15, __pyx_t_11);
        __pyx_t_12 = 0;
        __pyx_t_11 = 0;
        __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_6, NULL); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 427, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

      /* "euclidemu2.pyx":429
 *                 bvals[i] = 10.0**_CubicSpline(np.log10(kvals),
 *                                               tmp.reshape(k_shape)
 *                                               )(np.log10(custom_k_within_range))             # <<<<<<<<<<<<<<
 * 
 *                 #Extrapolate if necessary
 */
      __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 429, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_log10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 429, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_v_custom_k_within_range)) { __Pyx_RaiseUnboundLocalError("custom_k_within_range"); __PYX_ERR(0, 429, __pyx_L1_error) }
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_11);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_11, function);
        }
      }
      __pyx_t_10 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_11, __pyx_t_6, __pyx_v_custom_k_within_range) : __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_v_custom_k_within_range);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 429, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_11 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_14))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_14);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_14, function);
        }
      }
      __pyx_t_13 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_14, __pyx_t_11, __pyx_t_10) : __Pyx_PyObject_CallOneArg(__pyx_t_14, __pyx_t_10);
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 429, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

      /* "euclidemu2.pyx":427
 *             tmp = logboost[i]
 *             if not(custom_kvec is None):
 *                 bvals[i] = 10.0**_CubicSpline(np.log10(kvals),             # <<<<<<<<<<<<<<
 *                                               tmp.reshape(k_shape)
 *                                               )(np.log10(custom_k_within_range))
 */
      __pyx_t_14 = PyNumber_Power(__pyx_float_10_0, __pyx_t_13, Py_None); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 427, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __pyx_t_13 = PyInt_FromSsize_t(__pyx_v_i); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 427, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      if (unlikely(PyDict_SetItem(__pyx_v_bvals, __pyx_t_13, __pyx_t_14) < 0)) __PYX_ERR(0, 427, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

      /* "euclidemu2.pyx":432
 * 
 *                 #Extrapolate if necessary
 *                 if do_extrapolate_below:             # <<<<<<<<<<<<<<
 *                     # below the k_min of EuclidEmulator2, we are in the linear regime where
 *                     # the boost factor is unity by construction
 */
      __pyx_t_1 = (__pyx_v_do_extrapolate_below != 0);
      if (__pyx_t_1) {

        /* "euclidemu2.pyx":435
 *                     # below the k_min of EuclidEmulator2, we are in the linear regime where
 *                     # the boost factor is unity by construction
 *                     b_extrap = np.ones_like(custom_k_below)             # <<<<<<<<<<<<<<
 *                     bvals[i]= np.concatenate((b_extrap, bvals[i]))
 * 
 */
        __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_np); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 435, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_ones_like); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 435, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        if (unlikely(!__pyx_v_custom_k_below)) { __Pyx_RaiseUnboundLocalError("custom_k_below"); __PYX_ERR(0, 435, __pyx_L1_error) }
        __pyx_t_13 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_10))) {
          __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_10);
          if (likely(__pyx_t_13)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
            __Pyx_INCREF(__pyx_t_13);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_10, function);
          }
        }
        __pyx_t_14 = (__pyx_t_13) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_13, __pyx_v_custom_k_below) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_v_custom_k_below);
        __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
        if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 435, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_XDECREF_SET(__pyx_v_b_extrap, __pyx_t_14);
        __pyx_t_14 = 0;

        /* "euclidemu2.pyx":436
 *                     # the boost factor is unity by construction
 *                     b_extrap = np.ones_like(custom_k_below)
 *                     bvals[i]= np.concatenate((b_extrap, bvals[i]))             # <<<<<<<<<<<<<<
 * 
 *                 if do_extrapolate_above:
 */
        __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_np); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 436, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_concatenate); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 436, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_10 = PyInt_FromSsize_t(__pyx_v_i); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 436, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_11 = __Pyx_PyDict_GetItem(__pyx_v_bvals, __pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 436, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 436, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_INCREF(__pyx_v_b_extrap);
        __Pyx_GIVEREF(__pyx_v_b_extrap);
        PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_v_b_extrap);
        __Pyx_GIVEREF(__pyx_t_11);
        PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_11);
        __pyx_t_11 = 0;
        __pyx_t_11 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_13))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_13);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_13, function);
          }
        }
        __pyx_t_14 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_13, __pyx_t_11, __pyx_t_10) : __Pyx_PyObject_CallOneArg(__pyx_t_13, __pyx_t_10);
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 436, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_t_13 = PyInt_FromSsize_t(__pyx_v_i); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 436, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        if (unlikely(PyDict_SetItem(__pyx_v_bvals, __pyx_t_13, __pyx_t_14) < 0)) __PYX_ERR(0, 436, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

        /* "euclidemu2.pyx":432
 * 
 *                 #Extrapolate if necessary
 *                 if do_extrapolate_below:             # <<<<<<<<<<<<<<
 *                     # below the k_min of EuclidEmulator2, we are in the linear regime where
 *                     # the boost factor is unity by construction
 */
      }

      /* "euclidemu2.pyx":438
 *                     bvals[i]= np.concatenate((b_extrap, bvals[i]))
 * 
 *                 if do_extrapolate_above:             # <<<<<<<<<<<<<<
 *                     # We extrapolate by setting all b(k > k_max) to b(k_max)
 *                     b_extrap = bvals[i][-1] * np.ones_like(custom_k_above)
 */
      __pyx_t_1 = (__pyx_v_do_extrapolate_above != 0);
      if (__pyx_t_1) {

        /* "euclidemu2.pyx":440
 *                 if do_extrapolate_above:
 *                     # We extrapolate by setting all b(k > k_max) to b(k_max)
 *                     b_extrap = bvals[i][-1] * np.ones_like(custom_k_above)             # <<<<<<<<<<<<<<
 *                     bvals[i] = np.concatenate((bvals[i], b_extrap))
 * 
 */
        __pyx_t_14 = PyInt_FromSsize_t(__pyx_v_i); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 440, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __pyx_t_13 = __Pyx_PyDict_GetItem(__pyx_v_bvals, __pyx_t_14); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 440, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __pyx_t_14 = __Pyx_GetItemInt(__pyx_t_13, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 440, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_np); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 440, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_ones_like); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 440, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_v_custom_k_above)) { __Pyx_RaiseUnboundLocalError("custom_k_above"); __PYX_ERR(0, 440, __pyx_L1_error) }
        __pyx_t_10 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
          }
        }
        __pyx_t_13 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_11, __pyx_t_10, __pyx_v_custom_k_above) : __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_v_custom_k_above);
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 440, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = PyNumber_Multiply(__pyx_t_14, __pyx_t_13); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 440, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_XDECREF_SET(__pyx_v_b_extrap, __pyx_t_11);
        __pyx_t_11 = 0;

        /* "euclidemu2.pyx":441
 *                     # We extrapolate by setting all b(k > k_max) to b(k_max)
 *                     b_extrap = bvals[i][-1] * np.ones_like(custom_k_above)
 *                     bvals[i] = np.concatenate((bvals[i], b_extrap))             # <<<<<<<<<<<<<<
 * 
 *             else:
 */
        __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_np); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 441, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_concatenate); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 441, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_t_13 = PyInt_FromSsize_t(__pyx_v_i); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 441, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_10 = __Pyx_PyDict_GetItem(__pyx_v_bvals, __pyx_t_13); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 441, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_t_13 = PyTuple_New(2); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 441, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_GIVEREF(__pyx_t_10);
        PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_10);
        __Pyx_INCREF(__pyx_v_b_extrap);
        __Pyx_GIVEREF(__pyx_v_b_extrap);
        PyTuple_SET_ITEM(__pyx_t_13, 1, __pyx_v_b_extrap);
        __pyx_t_10 = 0;
        __pyx_t_10 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_14))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_14);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_14, function);
          }
        }
        __pyx_t_11 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_14, __pyx_t_10, __pyx_t_13) : __Pyx_PyObject_CallOneArg(__pyx_t_14, __pyx_t_13);
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 441, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __pyx_t_14 = PyInt_FromSsize_t(__pyx_v_i); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 441, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        if (unlikely(PyDict_SetItem(__pyx_v_bvals, __pyx_t_14, __pyx_t_11) < 0)) __PYX_ERR(0, 441, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "euclidemu2.pyx":438
 *                     bvals[i]= np.concatenate((b_extrap, bvals[i]))
 * 
 *                 if do_extrapolate_above:             # <<<<<<<<<<<<<<
 *                     # We extrapolate by setting all b(k > k_max) to b(k_max)
 *                     b_extrap = bvals[i][-1] * np.ones_like(custom_k_above)
 */
      }

      /* "euclidemu2.pyx":426
 *         for i in range(len_redshifts):
 *             tmp = logboost[i]
 *             if not(custom_kvec is None):             # <<<<<<<<<<<<<<
 *                 bvals[i] = 10.0**_CubicSpline(np.log10(kvals),
 *                                               tmp.reshape(k_shape)
 */
      goto __pyx_L40;
    }

    /* "euclidemu2.pyx":444
 * 
 *             else:
 *                 bvals[i] = 10.**tmp.reshape(k_shape)             # <<<<<<<<<<<<<<
 * 
 *         if not(custom_kvec is None):       # This could probably be done cleaner!
 */
    /*else*/ {
      __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_tmp, __pyx_n_s_reshape); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 444, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_13 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_14))) {
        __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_14);
        if (likely(__pyx_t_13)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
          __Pyx_INCREF(__pyx_t_13);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_14, function);
        }
      }
      __pyx_t_11 = (__pyx_t_13) ? __Pyx_PyObject_Call2Args(__pyx_t_14, __pyx_t_13, __pyx_v_k_shape) : __Pyx_PyObject_CallOneArg(__pyx_t_14, __pyx_v_k_shape);
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 444, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __pyx_t_14 = PyNumber_Power(__pyx_float_10_, __pyx_t_11, Py_None); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 444, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_11 = PyInt_FromSsize_t(__pyx_v_i); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 444, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      if (unlikely(PyDict_SetItem(__pyx_v_bvals, __pyx_t_11, __pyx_t_14) < 0)) __PYX_ERR(0, 444, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    }
    __pyx_L40:;
  }

  /* "euclidemu2.pyx":446
 *                 bvals[i] = 10.**tmp.reshape(k_shape)
 * 
 *         if not(custom_kvec is None):       # This could probably be done cleaner!             # <<<<<<<<<<<<<<
 *             kvals = custom_kvec
 * 
 */
  __pyx_t_1 = (__pyx_v_custom_kvec != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "euclidemu2.pyx":447
 * 
 *         if not(custom_kvec is None):       # This could probably be done cleaner!
 *             kvals = custom_kvec             # <<<<<<<<<<<<<<
 * 
 *         return kvals, bvals
 */
    __Pyx_INCREF(__pyx_v_custom_kvec);
    __Pyx_DECREF_SET(__pyx_v_kvals, __pyx_v_custom_kvec);

    /* "euclidemu2.pyx":446
 *                 bvals[i] = 10.**tmp.reshape(k_shape)
 * 
 *         if not(custom_kvec is None):       # This could probably be done cleaner!             # <<<<<<<<<<<<<<
 *             kvals = custom_kvec
 * 
 */
  }

  /* "euclidemu2.pyx":449
 *             kvals = custom_kvec
 * 
 *         return kvals, bvals             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_14 = PyTuple_New(2); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_INCREF(__pyx_v_kvals);
  __Pyx_GIVEREF(__pyx_v_kvals);
  PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_v_kvals);
  __Pyx_INCREF(__pyx_v_bvals);
  __Pyx_GIVEREF(__pyx_v_bvals);
  PyTuple_SET_ITEM(__pyx_t_14, 1, __pyx_v_bvals);
  __pyx_r = __pyx_t_14;
  __pyx_t_14 = 0;
  goto __pyx_L0;

  /* "euclidemu2.pyx":352
 * 
 * 
 *     def get_boost(self,cosmo_par_in,redshifts,custom_kvec=None):             # <<<<<<<<<<<<<<
 * 
 *         if isinstance(redshifts, (int, float)):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("euclidemu2.PyEuclidEmulator.get_boost", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_z);
  __Pyx_XDECREF(__pyx_v_cosmo_par);
  __Pyx_XDECREF((PyObject *)__pyx_v_cosmo);
  __Pyx_XDECREF(__pyx_v_k);
  __Pyx_XDECREF(__pyx_v_logboost);
  __Pyx_XDECREF(__pyx_v_kvals);
  __Pyx_XDECREF(__pyx_v_k_shape);
  __Pyx_XDECREF(__pyx_v_upper_mask);
  __Pyx_XDECREF(__pyx_v_lower_mask);
  __Pyx_XDECREF(__pyx_v_mask);
  __Pyx_XDECREF(__pyx_v_custom_k_within_range);
  __Pyx_XDECREF(__pyx_v_custom_k_below);
  __Pyx_XDECREF(__pyx_v_custom_k_above);
  __Pyx_XDECREF(__pyx_v_wrn_message);
  __Pyx_XDECREF(__pyx_v_bvals);
  __Pyx_XDECREF(__pyx_v_tmp);
  __Pyx_XDECREF(__pyx_v_b_extrap);
  __Pyx_XDECREF(__pyx_7genexpr__pyx_v_u);
  __Pyx_XDECREF(__pyx_7genexpr__pyx_v_l);
  __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_l);
  __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_u);
  __Pyx_XDECREF(__pyx_v_redshifts);
  __Pyx_XDECREF(__pyx_v_custom_kvec);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "euclidemu2.pyx":452
 * 
 * 
 *     def get_plin(self, emu_pars_dict, custom_kvec, redshifts):             # <<<<<<<<<<<<<<
 * 
 *         if _Class.__module__ not in _sys.modules:
 */

/* Python wrapper */
static PyObject *__pyx_pw_10euclidemu2_16PyEuclidEmulator_15get_plin(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10euclidemu2_16PyEuclidEmulator_15get_plin(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_emu_pars_dict = 0;
  PyObject *__pyx_v_custom_kvec = 0;
  PyObject *__pyx_v_redshifts = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_plin (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_emu_pars_dict,&__pyx_n_s_custom_kvec,&__pyx_n_s_redshifts,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_emu_pars_dict)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_custom_kvec)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_plin", 1, 3, 3, 1); __PYX_ERR(0, 452, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_redshifts)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_plin", 1, 3, 3, 2); __PYX_ERR(0, 452, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_plin") < 0)) __PYX_ERR(0, 452, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_emu_pars_dict = values[0];
    __pyx_v_custom_kvec = values[1];
    __pyx_v_redshifts = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_plin", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 452, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("euclidemu2.PyEuclidEmulator.get_plin", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10euclidemu2_16PyEuclidEmulator_14get_plin(((struct __pyx_obj_10euclidemu2_PyEuclidEmulator *)__pyx_v_self), __pyx_v_emu_pars_dict, __pyx_v_custom_kvec, __pyx_v_redshifts);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10euclidemu2_16PyEuclidEmulator_14get_plin(struct __pyx_obj_10euclidemu2_PyEuclidEmulator *__pyx_v_self, PyObject *__pyx_v_emu_pars_dict, PyObject *__pyx_v_custom_kvec, PyObject *__pyx_v_redshifts) {
  PyObject *__pyx_v_z = NULL;
  PyObject *__pyx_v_z_str = NULL;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_v_cosmo_par = NULL;
  PyObject *__pyx_v_classy_pars = NULL;
  PyObject *__pyx_v_cosmo = NULL;
  PyObject *__pyx_v_h = NULL;
  PyObject *__pyx_v_k_classy_arr = NULL;
  PyObject *__pyx_v_k_shape = NULL;
  PyObject *__pyx_v_linpower = NULL;
  PyObject *__pyx_8genexpr3__pyx_v_i = NULL;
  PyObject *__pyx_8genexpr3__pyx_v_z = NULL;
  PyObject *__pyx_8genexpr4__pyx_v_k = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  Py_ssize_t __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *(*__pyx_t_16)(PyObject *);
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  int __pyx_t_20;
  PyObject *__pyx_t_21 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_plin", 0);
  __Pyx_INCREF(__pyx_v_custom_kvec);
  __Pyx_INCREF(__pyx_v_redshifts);

  /* "euclidemu2.pyx":454
 *     def get_plin(self, emu_pars_dict, custom_kvec, redshifts):
 * 
 *         if _Class.__module__ not in _sys.modules:             # <<<<<<<<<<<<<<
 *             print("You have not imported neither classee nor classy.\n \
 *                    Computing linear power spectrum is hence not possible.")
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Class); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_module); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_sys); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_modules); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = (__Pyx_PySequence_ContainsTF(__pyx_t_2, __pyx_t_3, Py_NE)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 454, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "euclidemu2.pyx":455
 * 
 *         if _Class.__module__ not in _sys.modules:
 *             print("You have not imported neither classee nor classy.\n \             # <<<<<<<<<<<<<<
 *                    Computing linear power spectrum is hence not possible.")
 *             return None
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 455, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "euclidemu2.pyx":457
 *             print("You have not imported neither classee nor classy.\n \
 *                    Computing linear power spectrum is hence not possible.")
 *             return None             # <<<<<<<<<<<<<<
 * 
 *         # Convert single redshift input argument to array
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "euclidemu2.pyx":454
 *     def get_plin(self, emu_pars_dict, custom_kvec, redshifts):
 * 
 *         if _Class.__module__ not in _sys.modules:             # <<<<<<<<<<<<<<
 *             print("You have not imported neither classee nor classy.\n \
 *                    Computing linear power spectrum is hence not possible.")
 */
  }

  /* "euclidemu2.pyx":460
 * 
 *         # Convert single redshift input argument to array
 *         if isinstance(redshifts, (int, float)):             # <<<<<<<<<<<<<<
 *             redshifts = np.asarray([redshifts])
 *         else:
 */
  __pyx_t_4 = PyInt_Check(__pyx_v_redshifts); 
  __pyx_t_6 = (__pyx_t_4 != 0);
  if (!__pyx_t_6) {
  } else {
    __pyx_t_5 = __pyx_t_6;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_6 = PyFloat_Check(__pyx_v_redshifts); 
  __pyx_t_4 = (__pyx_t_6 != 0);
  __pyx_t_5 = __pyx_t_4;
  __pyx_L5_bool_binop_done:;
  __pyx_t_4 = (__pyx_t_5 != 0);
  if (__pyx_t_4) {

    /* "euclidemu2.pyx":461
 *         # Convert single redshift input argument to array
 *         if isinstance(redshifts, (int, float)):
 *             redshifts = np.asarray([redshifts])             # <<<<<<<<<<<<<<
 *         else:
 *             redshifts = np.asarray(redshifts)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 461, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_asarray); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 461, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 461, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_redshifts);
    __Pyx_GIVEREF(__pyx_v_redshifts);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_v_redshifts);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_3 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_7, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 461, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_redshifts, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "euclidemu2.pyx":460
 * 
 *         # Convert single redshift input argument to array
 *         if isinstance(redshifts, (int, float)):             # <<<<<<<<<<<<<<
 *             redshifts = np.asarray([redshifts])
 *         else:
 */
    goto __pyx_L4;
  }

  /* "euclidemu2.pyx":463
 *             redshifts = np.asarray([redshifts])
 *         else:
 *             redshifts = np.asarray(redshifts)             # <<<<<<<<<<<<<<
 * 
 *         for z in redshifts:
 */
  /*else*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 463, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_asarray); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 463, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_1, __pyx_v_redshifts) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_redshifts);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 463, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_redshifts, __pyx_t_3);
    __pyx_t_3 = 0;
  }
  __pyx_L4:;

  /* "euclidemu2.pyx":465
 *             redshifts = np.asarray(redshifts)
 * 
 *         for z in redshifts:             # <<<<<<<<<<<<<<
 *             assert z <= 10.0 and z>=0.0, "EuclidEmulator2 allows only redshifts in the interval [0.0, 10.0]"
 * 
 */
  if (likely(PyList_CheckExact(__pyx_v_redshifts)) || PyTuple_CheckExact(__pyx_v_redshifts)) {
    __pyx_t_3 = __pyx_v_redshifts; __Pyx_INCREF(__pyx_t_3); __pyx_t_8 = 0;
    __pyx_t_9 = NULL;
  } else {
    __pyx_t_8 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_redshifts); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 465, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 465, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_9)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_8); __Pyx_INCREF(__pyx_t_2); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 465, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 465, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_8); __Pyx_INCREF(__pyx_t_2); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 465, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 465, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_9(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 465, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_z, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "euclidemu2.pyx":466
 * 
 *         for z in redshifts:
 *             assert z <= 10.0 and z>=0.0, "EuclidEmulator2 allows only redshifts in the interval [0.0, 10.0]"             # <<<<<<<<<<<<<<
 * 
 *         # Convert single kvec input argument to array
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_2 = PyObject_RichCompare(__pyx_v_z, __pyx_float_10_0, Py_LE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 466, __pyx_L1_error)
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 466, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (__pyx_t_5) {
      } else {
        __pyx_t_4 = __pyx_t_5;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_2 = PyObject_RichCompare(__pyx_v_z, __pyx_float_0_0, Py_GE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 466, __pyx_L1_error)
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 466, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_4 = __pyx_t_5;
      __pyx_L9_bool_binop_done:;
      if (unlikely(!__pyx_t_4)) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_u_EuclidEmulator2_allows_only_reds);
        __PYX_ERR(0, 466, __pyx_L1_error)
      }
    }
    #endif

    /* "euclidemu2.pyx":465
 *             redshifts = np.asarray(redshifts)
 * 
 *         for z in redshifts:             # <<<<<<<<<<<<<<
 *             assert z <= 10.0 and z>=0.0, "EuclidEmulator2 allows only redshifts in the interval [0.0, 10.0]"
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "euclidemu2.pyx":469
 * 
 *         # Convert single kvec input argument to array
 *         if isinstance(custom_kvec, (int, float)):             # <<<<<<<<<<<<<<
 *             custom_kvec = np.asarray([custom_kvec])
 *         else:
 */
  __pyx_t_5 = PyInt_Check(__pyx_v_custom_kvec); 
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (!__pyx_t_6) {
  } else {
    __pyx_t_4 = __pyx_t_6;
    goto __pyx_L12_bool_binop_done;
  }
  __pyx_t_6 = PyFloat_Check(__pyx_v_custom_kvec); 
  __pyx_t_5 = (__pyx_t_6 != 0);
  __pyx_t_4 = __pyx_t_5;
  __pyx_L12_bool_binop_done:;
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "euclidemu2.pyx":470
 *         # Convert single kvec input argument to array
 *         if isinstance(custom_kvec, (int, float)):
 *             custom_kvec = np.asarray([custom_kvec])             # <<<<<<<<<<<<<<
 *         else:
 *             custom_kvec = np.asarray(custom_kvec)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 470, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_asarray); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 470, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 470, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_custom_kvec);
    __Pyx_GIVEREF(__pyx_v_custom_kvec);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_v_custom_kvec);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_3 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_7, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 470, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_custom_kvec, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "euclidemu2.pyx":469
 * 
 *         # Convert single kvec input argument to array
 *         if isinstance(custom_kvec, (int, float)):             # <<<<<<<<<<<<<<
 *             custom_kvec = np.asarray([custom_kvec])
 *         else:
 */
    goto __pyx_L11;
  }

  /* "euclidemu2.pyx":472
 *             custom_kvec = np.asarray([custom_kvec])
 *         else:
 *             custom_kvec = np.asarray(custom_kvec)             # <<<<<<<<<<<<<<
 * 
 *         # "Stringify" the input arrays to be understandable for classy.
 */
  /*else*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 472, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_asarray); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 472, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_1, __pyx_v_custom_kvec) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_custom_kvec);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 472, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_custom_kvec, __pyx_t_3);
    __pyx_t_3 = 0;
  }
  __pyx_L11:;

  /* "euclidemu2.pyx":475
 * 
 *         # "Stringify" the input arrays to be understandable for classy.
 *         z_str=str(redshifts[0])             # <<<<<<<<<<<<<<
 * 
 *         if len(redshifts)>1:
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_redshifts, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_z_str = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "euclidemu2.pyx":477
 *         z_str=str(redshifts[0])
 * 
 *         if len(redshifts)>1:             # <<<<<<<<<<<<<<
 *           for i in range(1,len(redshifts)):
 *             z_str+=','+str(redshifts[i])
 */
  __pyx_t_8 = PyObject_Length(__pyx_v_redshifts); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 477, __pyx_L1_error)
  __pyx_t_5 = ((__pyx_t_8 > 1) != 0);
  if (__pyx_t_5) {

    /* "euclidemu2.pyx":478
 * 
 *         if len(redshifts)>1:
 *           for i in range(1,len(redshifts)):             # <<<<<<<<<<<<<<
 *             z_str+=','+str(redshifts[i])
 * 
 */
    __pyx_t_8 = PyObject_Length(__pyx_v_redshifts); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 478, __pyx_L1_error)
    __pyx_t_10 = __pyx_t_8;
    for (__pyx_t_11 = 1; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
      __pyx_v_i = __pyx_t_11;

      /* "euclidemu2.pyx":479
 *         if len(redshifts)>1:
 *           for i in range(1,len(redshifts)):
 *             z_str+=','+str(redshifts[i])             # <<<<<<<<<<<<<<
 * 
 *         # Convert the input dictionary into a Class-compatible dictionary
 */
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_redshifts, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 479, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 479, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyUnicode_Concat(__pyx_kp_u__13, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 479, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_z_str, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 479, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF_SET(__pyx_v_z_str, __pyx_t_3);
      __pyx_t_3 = 0;
    }

    /* "euclidemu2.pyx":477
 *         z_str=str(redshifts[0])
 * 
 *         if len(redshifts)>1:             # <<<<<<<<<<<<<<
 *           for i in range(1,len(redshifts)):
 *             z_str+=','+str(redshifts[i])
 */
  }

  /* "euclidemu2.pyx":482
 * 
 *         # Convert the input dictionary into a Class-compatible dictionary
 *         cosmo_par = self.convert_to_emu(emu_pars_dict)             # <<<<<<<<<<<<<<
 * 
 *         # When no value for Omega_cdm is given, this is computed
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_convert_to_emu); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_1, __pyx_v_emu_pars_dict) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_emu_pars_dict);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_cosmo_par = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "euclidemu2.pyx":485
 * 
 *         # When no value for Omega_cdm is given, this is computed
 *         if cosmo_par['Omega_cdm']==0:             # <<<<<<<<<<<<<<
 *             cosmo_par['Omega_cdm']=cosmo_par['Omega_m']-cosmo_par['Omega_b']-cosmo_par['m_ncdm']/93.14/cosmo_par['h']**2
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_cosmo_par, __pyx_n_u_Omega_cdm); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyInt_EqObjC(__pyx_t_3, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 485, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_5) {

    /* "euclidemu2.pyx":486
 *         # When no value for Omega_cdm is given, this is computed
 *         if cosmo_par['Omega_cdm']==0:
 *             cosmo_par['Omega_cdm']=cosmo_par['Omega_m']-cosmo_par['Omega_b']-cosmo_par['m_ncdm']/93.14/cosmo_par['h']**2             # <<<<<<<<<<<<<<
 * 
 *         # This parameter is eliminated as classy does not accept it.
 */
    __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_cosmo_par, __pyx_n_u_Omega_m); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 486, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_cosmo_par, __pyx_n_u_Omega_b); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 486, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyNumber_Subtract(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 486, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_cosmo_par, __pyx_n_u_m_ncdm); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 486, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyFloat_TrueDivideObjC(__pyx_t_3, __pyx_float_93_14, 93.14, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 486, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_cosmo_par, __pyx_n_u_h); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 486, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = PyNumber_Power(__pyx_t_3, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 486, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_t_2, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 486, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyNumber_Subtract(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 486, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(PyObject_SetItem(__pyx_v_cosmo_par, __pyx_n_u_Omega_cdm, __pyx_t_7) < 0)) __PYX_ERR(0, 486, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "euclidemu2.pyx":485
 * 
 *         # When no value for Omega_cdm is given, this is computed
 *         if cosmo_par['Omega_cdm']==0:             # <<<<<<<<<<<<<<
 *             cosmo_par['Omega_cdm']=cosmo_par['Omega_m']-cosmo_par['Omega_b']-cosmo_par['m_ncdm']/93.14/cosmo_par['h']**2
 * 
 */
  }

  /* "euclidemu2.pyx":489
 * 
 *         # This parameter is eliminated as classy does not accept it.
 *         del cosmo_par['Omega_m']             # <<<<<<<<<<<<<<
 * 
 *         # Extend the input Class-compatible dictionary by the additional
 */
  if (unlikely(PyObject_DelItem(__pyx_v_cosmo_par, __pyx_n_u_Omega_m) < 0)) __PYX_ERR(0, 489, __pyx_L1_error)

  /* "euclidemu2.pyx":493
 *         # Extend the input Class-compatible dictionary by the additional
 *         # information requested by classy.
 *         classy_pars = cosmo_par             # <<<<<<<<<<<<<<
 *         classy_pars['Omega_Lambda'] = 0.0
 *         classy_pars['output'] = 'mPk'
 */
  __Pyx_INCREF(__pyx_v_cosmo_par);
  __pyx_v_classy_pars = __pyx_v_cosmo_par;

  /* "euclidemu2.pyx":494
 *         # information requested by classy.
 *         classy_pars = cosmo_par
 *         classy_pars['Omega_Lambda'] = 0.0             # <<<<<<<<<<<<<<
 *         classy_pars['output'] = 'mPk'
 *         classy_pars['P_k_max_1/Mpc'] = custom_kvec[-1]*cosmo_par['h']
 */
  if (unlikely(PyObject_SetItem(__pyx_v_classy_pars, __pyx_n_u_Omega_Lambda, __pyx_float_0_0) < 0)) __PYX_ERR(0, 494, __pyx_L1_error)

  /* "euclidemu2.pyx":495
 *         classy_pars = cosmo_par
 *         classy_pars['Omega_Lambda'] = 0.0
 *         classy_pars['output'] = 'mPk'             # <<<<<<<<<<<<<<
 *         classy_pars['P_k_max_1/Mpc'] = custom_kvec[-1]*cosmo_par['h']
 *         classy_pars['z_pk'] = z_str
 */
  if (unlikely(PyObject_SetItem(__pyx_v_classy_pars, __pyx_n_u_output, __pyx_n_u_mPk) < 0)) __PYX_ERR(0, 495, __pyx_L1_error)

  /* "euclidemu2.pyx":496
 *         classy_pars['Omega_Lambda'] = 0.0
 *         classy_pars['output'] = 'mPk'
 *         classy_pars['P_k_max_1/Mpc'] = custom_kvec[-1]*cosmo_par['h']             # <<<<<<<<<<<<<<
 *         classy_pars['z_pk'] = z_str
 *         # Assuming a single massive neutrino with all the mass
 */
  __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_custom_kvec, -1L, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_cosmo_par, __pyx_n_u_h); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_7, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(PyObject_SetItem(__pyx_v_classy_pars, __pyx_kp_u_P_k_max_1_Mpc, __pyx_t_1) < 0)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "euclidemu2.pyx":497
 *         classy_pars['output'] = 'mPk'
 *         classy_pars['P_k_max_1/Mpc'] = custom_kvec[-1]*cosmo_par['h']
 *         classy_pars['z_pk'] = z_str             # <<<<<<<<<<<<<<
 *         # Assuming a single massive neutrino with all the mass
 *         classy_pars['N_ur']=2.0308
 */
  if (unlikely(PyObject_SetItem(__pyx_v_classy_pars, __pyx_n_u_z_pk, __pyx_v_z_str) < 0)) __PYX_ERR(0, 497, __pyx_L1_error)

  /* "euclidemu2.pyx":499
 *         classy_pars['z_pk'] = z_str
 *         # Assuming a single massive neutrino with all the mass
 *         classy_pars['N_ur']=2.0308             # <<<<<<<<<<<<<<
 *         classy_pars['N_ncdm']=1
 * 
 */
  if (unlikely(PyObject_SetItem(__pyx_v_classy_pars, __pyx_n_u_N_ur, __pyx_float_2_0308) < 0)) __PYX_ERR(0, 499, __pyx_L1_error)

  /* "euclidemu2.pyx":500
 *         # Assuming a single massive neutrino with all the mass
 *         classy_pars['N_ur']=2.0308
 *         classy_pars['N_ncdm']=1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (unlikely(PyObject_SetItem(__pyx_v_classy_pars, __pyx_n_u_N_ncdm, __pyx_int_1) < 0)) __PYX_ERR(0, 500, __pyx_L1_error)

  /* "euclidemu2.pyx":505
 *         # Create a "Class" instance called "cosmo" and run classy to compute
 *         # the cosmological quantities.
 *         cosmo = _Class()             # <<<<<<<<<<<<<<
 *         cosmo.set(classy_pars)
 *         cosmo.compute()
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Class); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_cosmo = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "euclidemu2.pyx":506
 *         # the cosmological quantities.
 *         cosmo = _Class()
 *         cosmo.set(classy_pars)             # <<<<<<<<<<<<<<
 *         cosmo.compute()
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_cosmo, __pyx_n_s_set); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_7, __pyx_v_classy_pars) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_classy_pars);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "euclidemu2.pyx":507
 *         cosmo = _Class()
 *         cosmo.set(classy_pars)
 *         cosmo.compute()             # <<<<<<<<<<<<<<
 * 
 *         # Convert k units: h/Mpc to 1/Mpc
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_cosmo, __pyx_n_s_compute); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_7) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "euclidemu2.pyx":510
 * 
 *         # Convert k units: h/Mpc to 1/Mpc
 *         h = classy_pars['h']             # <<<<<<<<<<<<<<
 *         k_classy_arr = h*custom_kvec
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_classy_pars, __pyx_n_u_h); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 510, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_h = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "euclidemu2.pyx":511
 *         # Convert k units: h/Mpc to 1/Mpc
 *         h = classy_pars['h']
 *         k_classy_arr = h*custom_kvec             # <<<<<<<<<<<<<<
 * 
 *         # Get shape of k vector
 */
  __pyx_t_1 = PyNumber_Multiply(__pyx_v_h, __pyx_v_custom_kvec); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 511, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_k_classy_arr = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "euclidemu2.pyx":514
 * 
 *         # Get shape of k vector
 *         k_shape = k_classy_arr.shape             # <<<<<<<<<<<<<<
 * 
 *         # Get power spectrum at tabulated z and k in units of Mpc^3
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_k_classy_arr, __pyx_n_s_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 514, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_k_shape = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "euclidemu2.pyx":517
 * 
 *         # Get power spectrum at tabulated z and k in units of Mpc^3
 *         linpower = {i:             # <<<<<<<<<<<<<<
 *                         np.array([cosmo.pk(k, z)*h*h*h
 *                                    for k in k_classy_arr]).reshape(k_shape)
 */
  { /* enter inner scope */
    __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 517, __pyx_L20_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_int_0);
    __pyx_t_3 = __pyx_int_0;

    /* "euclidemu2.pyx":520
 *                         np.array([cosmo.pk(k, z)*h*h*h
 *                                    for k in k_classy_arr]).reshape(k_shape)
 *                         for i, z in enumerate(redshifts)}             # <<<<<<<<<<<<<<
 * 
 *         return custom_kvec, linpower
 */
    if (likely(PyList_CheckExact(__pyx_v_redshifts)) || PyTuple_CheckExact(__pyx_v_redshifts)) {
      __pyx_t_7 = __pyx_v_redshifts; __Pyx_INCREF(__pyx_t_7); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
    } else {
      __pyx_t_8 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_v_redshifts); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 520, __pyx_L20_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_9 = Py_TYPE(__pyx_t_7)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 520, __pyx_L20_error)
    }
    for (;;) {
      if (likely(!__pyx_t_9)) {
        if (likely(PyList_CheckExact(__pyx_t_7))) {
          if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_7)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_8); __Pyx_INCREF(__pyx_t_2); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 520, __pyx_L20_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_7, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 520, __pyx_L20_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        } else {
          if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_7)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_8); __Pyx_INCREF(__pyx_t_2); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 520, __pyx_L20_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_7, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 520, __pyx_L20_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        }
      } else {
        __pyx_t_2 = __pyx_t_9(__pyx_t_7);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 520, __pyx_L20_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_2);
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr3__pyx_v_z, __pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_XDECREF_SET(__pyx_8genexpr3__pyx_v_i, __pyx_t_3);
      __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_t_3, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 520, __pyx_L20_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3);
      __pyx_t_3 = __pyx_t_2;
      __pyx_t_2 = 0;

      /* "euclidemu2.pyx":518
 *         # Get power spectrum at tabulated z and k in units of Mpc^3
 *         linpower = {i:
 *                         np.array([cosmo.pk(k, z)*h*h*h             # <<<<<<<<<<<<<<
 *                                    for k in k_classy_arr]).reshape(k_shape)
 *                         for i, z in enumerate(redshifts)}
 */
      __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_np); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 518, __pyx_L20_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_array); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 518, __pyx_L20_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      { /* enter inner scope */
        __pyx_t_13 = PyList_New(0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 518, __pyx_L25_error)
        __Pyx_GOTREF(__pyx_t_13);

        /* "euclidemu2.pyx":519
 *         linpower = {i:
 *                         np.array([cosmo.pk(k, z)*h*h*h
 *                                    for k in k_classy_arr]).reshape(k_shape)             # <<<<<<<<<<<<<<
 *                         for i, z in enumerate(redshifts)}
 * 
 */
        if (likely(PyList_CheckExact(__pyx_v_k_classy_arr)) || PyTuple_CheckExact(__pyx_v_k_classy_arr)) {
          __pyx_t_15 = __pyx_v_k_classy_arr; __Pyx_INCREF(__pyx_t_15); __pyx_t_10 = 0;
          __pyx_t_16 = NULL;
        } else {
          __pyx_t_10 = -1; __pyx_t_15 = PyObject_GetIter(__pyx_v_k_classy_arr); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 519, __pyx_L25_error)
          __Pyx_GOTREF(__pyx_t_15);
          __pyx_t_16 = Py_TYPE(__pyx_t_15)->tp_iternext; if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 519, __pyx_L25_error)
        }
        for (;;) {
          if (likely(!__pyx_t_16)) {
            if (likely(PyList_CheckExact(__pyx_t_15))) {
              if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_15)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_17 = PyList_GET_ITEM(__pyx_t_15, __pyx_t_10); __Pyx_INCREF(__pyx_t_17); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(0, 519, __pyx_L25_error)
              #else
              __pyx_t_17 = PySequence_ITEM(__pyx_t_15, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 519, __pyx_L25_error)
              __Pyx_GOTREF(__pyx_t_17);
              #endif
            } else {
              if (__pyx_t_10 >= PyTuple_GET_SIZE(__pyx_t_15)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_17 = PyTuple_GET_ITEM(__pyx_t_15, __pyx_t_10); __Pyx_INCREF(__pyx_t_17); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(0, 519, __pyx_L25_error)
              #else
              __pyx_t_17 = PySequence_ITEM(__pyx_t_15, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 519, __pyx_L25_error)
              __Pyx_GOTREF(__pyx_t_17);
              #endif
            }
          } else {
            __pyx_t_17 = __pyx_t_16(__pyx_t_15);
            if (unlikely(!__pyx_t_17)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 519, __pyx_L25_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_17);
          }
          __Pyx_XDECREF_SET(__pyx_8genexpr4__pyx_v_k, __pyx_t_17);
          __pyx_t_17 = 0;

          /* "euclidemu2.pyx":518
 *         # Get power spectrum at tabulated z and k in units of Mpc^3
 *         linpower = {i:
 *                         np.array([cosmo.pk(k, z)*h*h*h             # <<<<<<<<<<<<<<
 *                                    for k in k_classy_arr]).reshape(k_shape)
 *                         for i, z in enumerate(redshifts)}
 */
          __pyx_t_18 = __Pyx_PyObject_GetAttrStr(__pyx_v_cosmo, __pyx_n_s_pk); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 518, __pyx_L25_error)
          __Pyx_GOTREF(__pyx_t_18);
          __pyx_t_19 = NULL;
          __pyx_t_20 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_18))) {
            __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_18);
            if (likely(__pyx_t_19)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_18);
              __Pyx_INCREF(__pyx_t_19);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_18, function);
              __pyx_t_20 = 1;
            }
          }
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_18)) {
            PyObject *__pyx_temp[3] = {__pyx_t_19, __pyx_8genexpr4__pyx_v_k, __pyx_8genexpr3__pyx_v_z};
            __pyx_t_17 = __Pyx_PyFunction_FastCall(__pyx_t_18, __pyx_temp+1-__pyx_t_20, 2+__pyx_t_20); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 518, __pyx_L25_error)
            __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
            __Pyx_GOTREF(__pyx_t_17);
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_18)) {
            PyObject *__pyx_temp[3] = {__pyx_t_19, __pyx_8genexpr4__pyx_v_k, __pyx_8genexpr3__pyx_v_z};
            __pyx_t_17 = __Pyx_PyCFunction_FastCall(__pyx_t_18, __pyx_temp+1-__pyx_t_20, 2+__pyx_t_20); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 518, __pyx_L25_error)
            __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
            __Pyx_GOTREF(__pyx_t_17);
          } else
          #endif
          {
            __pyx_t_21 = PyTuple_New(2+__pyx_t_20); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 518, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_21);
            if (__pyx_t_19) {
              __Pyx_GIVEREF(__pyx_t_19); PyTuple_SET_ITEM(__pyx_t_21, 0, __pyx_t_19); __pyx_t_19 = NULL;
            }
            __Pyx_INCREF(__pyx_8genexpr4__pyx_v_k);
            __Pyx_GIVEREF(__pyx_8genexpr4__pyx_v_k);
            PyTuple_SET_ITEM(__pyx_t_21, 0+__pyx_t_20, __pyx_8genexpr4__pyx_v_k);
            __Pyx_INCREF(__pyx_8genexpr3__pyx_v_z);
            __Pyx_GIVEREF(__pyx_8genexpr3__pyx_v_z);
            PyTuple_SET_ITEM(__pyx_t_21, 1+__pyx_t_20, __pyx_8genexpr3__pyx_v_z);
            __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_18, __pyx_t_21, NULL); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 518, __pyx_L25_error)
            __Pyx_GOTREF(__pyx_t_17);
            __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
          }
          __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
          __pyx_t_18 = PyNumber_Multiply(__pyx_t_17, __pyx_v_h); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 518, __pyx_L25_error)
          __Pyx_GOTREF(__pyx_t_18);
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          __pyx_t_17 = PyNumber_Multiply(__pyx_t_18, __pyx_v_h); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 518, __pyx_L25_error)
          __Pyx_GOTREF(__pyx_t_17);
          __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
          __pyx_t_18 = PyNumber_Multiply(__pyx_t_17, __pyx_v_h); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 518, __pyx_L25_error)
          __Pyx_GOTREF(__pyx_t_18);
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_13, (PyObject*)__pyx_t_18))) __PYX_ERR(0, 518, __pyx_L25_error)
          __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;

          /* "euclidemu2.pyx":519
 *         linpower = {i:
 *                         np.array([cosmo.pk(k, z)*h*h*h
 *                                    for k in k_classy_arr]).reshape(k_shape)             # <<<<<<<<<<<<<<
 *                         for i, z in enumerate(redshifts)}
 * 
 */
        }
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_k); __pyx_8genexpr4__pyx_v_k = 0;
        goto __pyx_L28_exit_scope;
        __pyx_L25_error:;
        __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_k); __pyx_8genexpr4__pyx_v_k = 0;
        goto __pyx_L20_error;
        __pyx_L28_exit_scope:;
      } /* exit inner scope */
      __pyx_t_15 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_14))) {
        __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_14);
        if (likely(__pyx_t_15)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
          __Pyx_INCREF(__pyx_t_15);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_14, function);
        }
      }
      __pyx_t_12 = (__pyx_t_15) ? __Pyx_PyObject_Call2Args(__pyx_t_14, __pyx_t_15, __pyx_t_13) : __Pyx_PyObject_CallOneArg(__pyx_t_14, __pyx_t_13);
      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 518, __pyx_L20_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_reshape); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 519, __pyx_L20_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_12 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_14))) {
        __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_14);
        if (likely(__pyx_t_12)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_14, function);
        }
      }
      __pyx_t_2 = (__pyx_t_12) ? __Pyx_PyObject_Call2Args(__pyx_t_14, __pyx_t_12, __pyx_v_k_shape) : __Pyx_PyObject_CallOneArg(__pyx_t_14, __pyx_v_k_shape);
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 519, __pyx_L20_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      if (unlikely(PyDict_SetItem(__pyx_t_1, (PyObject*)__pyx_8genexpr3__pyx_v_i, (PyObject*)__pyx_t_2))) __PYX_ERR(0, 517, __pyx_L20_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "euclidemu2.pyx":520
 *                         np.array([cosmo.pk(k, z)*h*h*h
 *                                    for k in k_classy_arr]).reshape(k_shape)
 *                         for i, z in enumerate(redshifts)}             # <<<<<<<<<<<<<<
 * 
 *         return custom_kvec, linpower
 */
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_i); __pyx_8genexpr3__pyx_v_i = 0;
    __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_z); __pyx_8genexpr3__pyx_v_z = 0;
    goto __pyx_L29_exit_scope;
    __pyx_L20_error:;
    __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_i); __pyx_8genexpr3__pyx_v_i = 0;
    __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_z); __pyx_8genexpr3__pyx_v_z = 0;
    goto __pyx_L1_error;
    __pyx_L29_exit_scope:;
  } /* exit inner scope */
  __pyx_v_linpower = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "euclidemu2.pyx":522
 *                         for i, z in enumerate(redshifts)}
 * 
 *         return custom_kvec, linpower             # <<<<<<<<<<<<<<
 * 
 *     def get_pnonlin(self,emu_pars_dict, redshifts, custom_kvec=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 522, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_custom_kvec);
  __Pyx_GIVEREF(__pyx_v_custom_kvec);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_custom_kvec);
  __Pyx_INCREF(__pyx_v_linpower);
  __Pyx_GIVEREF(__pyx_v_linpower);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_linpower);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "euclidemu2.pyx":452
 * 
 * 
 *     def get_plin(self, emu_pars_dict, custom_kvec, redshifts):             # <<<<<<<<<<<<<<
 * 
 *         if _Class.__module__ not in _sys.modules:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_AddTraceback("euclidemu2.PyEuclidEmulator.get_plin", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_z);
  __Pyx_XDECREF(__pyx_v_z_str);
  __Pyx_XDECREF(__pyx_v_cosmo_par);
  __Pyx_XDECREF(__pyx_v_classy_pars);
  __Pyx_XDECREF(__pyx_v_cosmo);
  __Pyx_XDECREF(__pyx_v_h);
  __Pyx_XDECREF(__pyx_v_k_classy_arr);
  __Pyx_XDECREF(__pyx_v_k_shape);
  __Pyx_XDECREF(__pyx_v_linpower);
  __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_i);
  __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_z);
  __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_k);
  __Pyx_XDECREF(__pyx_v_custom_kvec);
  __Pyx_XDECREF(__pyx_v_redshifts);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "euclidemu2.pyx":524
 *         return custom_kvec, linpower
 * 
 *     def get_pnonlin(self,emu_pars_dict, redshifts, custom_kvec=None):             # <<<<<<<<<<<<<<
 * 
 *         if _Class.__module__ not in _sys.modules:
 */

/* Python wrapper */
static PyObject *__pyx_pw_10euclidemu2_16PyEuclidEmulator_17get_pnonlin(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10euclidemu2_16PyEuclidEmulator_17get_pnonlin(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_emu_pars_dict = 0;
  PyObject *__pyx_v_redshifts = 0;
  PyObject *__pyx_v_custom_kvec = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_pnonlin (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_emu_pars_dict,&__pyx_n_s_redshifts,&__pyx_n_s_custom_kvec,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_emu_pars_dict)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_redshifts)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_pnonlin", 0, 2, 3, 1); __PYX_ERR(0, 524, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_custom_kvec);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_pnonlin") < 0)) __PYX_ERR(0, 524, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_emu_pars_dict = values[0];
    __pyx_v_redshifts = values[1];
    __pyx_v_custom_kvec = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_pnonlin", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 524, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("euclidemu2.PyEuclidEmulator.get_pnonlin", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10euclidemu2_16PyEuclidEmulator_16get_pnonlin(((struct __pyx_obj_10euclidemu2_PyEuclidEmulator *)__pyx_v_self), __pyx_v_emu_pars_dict, __pyx_v_redshifts, __pyx_v_custom_kvec);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10euclidemu2_16PyEuclidEmulator_16get_pnonlin(struct __pyx_obj_10euclidemu2_PyEuclidEmulator *__pyx_v_self, PyObject *__pyx_v_emu_pars_dict, PyObject *__pyx_v_redshifts, PyObject *__pyx_v_custom_kvec) {
  PyObject *__pyx_v_kvec = NULL;
  PyObject *__pyx_v_Bk = NULL;
  PyObject *__pyx_v_plin = NULL;
  PyObject *__pyx_v_pnonlin = NULL;
  PyObject *__pyx_v_i = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_z = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  Py_ssize_t __pyx_t_10;
  PyObject *(*__pyx_t_11)(PyObject *);
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_pnonlin", 0);
  __Pyx_INCREF(__pyx_v_redshifts);

  /* "euclidemu2.pyx":526
 *     def get_pnonlin(self,emu_pars_dict, redshifts, custom_kvec=None):
 * 
 *         if _Class.__module__ not in _sys.modules:             # <<<<<<<<<<<<<<
 *             print("You have not imported neither classee nor classy.\n \
 *                    Emulating full power spectrum is hence not possible.")
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Class); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 526, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_module); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 526, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_sys); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 526, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_modules); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 526, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = (__Pyx_PySequence_ContainsTF(__pyx_t_2, __pyx_t_3, Py_NE)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 526, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "euclidemu2.pyx":527
 * 
 *         if _Class.__module__ not in _sys.modules:
 *             print("You have not imported neither classee nor classy.\n \             # <<<<<<<<<<<<<<
 *                    Emulating full power spectrum is hence not possible.")
 *             return None
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 527, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "euclidemu2.pyx":529
 *             print("You have not imported neither classee nor classy.\n \
 *                    Emulating full power spectrum is hence not possible.")
 *             return None             # <<<<<<<<<<<<<<
 * 
 *         # Convert single redshift input argument to array
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "euclidemu2.pyx":526
 *     def get_pnonlin(self,emu_pars_dict, redshifts, custom_kvec=None):
 * 
 *         if _Class.__module__ not in _sys.modules:             # <<<<<<<<<<<<<<
 *             print("You have not imported neither classee nor classy.\n \
 *                    Emulating full power spectrum is hence not possible.")
 */
  }

  /* "euclidemu2.pyx":532
 * 
 *         # Convert single redshift input argument to array
 *         if isinstance(redshifts, (int, float)):             # <<<<<<<<<<<<<<
 *             redshifts = np.asarray([redshifts])
 *         else:
 */
  __pyx_t_4 = PyInt_Check(__pyx_v_redshifts); 
  __pyx_t_6 = (__pyx_t_4 != 0);
  if (!__pyx_t_6) {
  } else {
    __pyx_t_5 = __pyx_t_6;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_6 = PyFloat_Check(__pyx_v_redshifts); 
  __pyx_t_4 = (__pyx_t_6 != 0);
  __pyx_t_5 = __pyx_t_4;
  __pyx_L5_bool_binop_done:;
  __pyx_t_4 = (__pyx_t_5 != 0);
  if (__pyx_t_4) {

    /* "euclidemu2.pyx":533
 *         # Convert single redshift input argument to array
 *         if isinstance(redshifts, (int, float)):
 *             redshifts = np.asarray([redshifts])             # <<<<<<<<<<<<<<
 *         else:
 *             redshifts = np.asarray(redshifts)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 533, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_asarray); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 533, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 533, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_redshifts);
    __Pyx_GIVEREF(__pyx_v_redshifts);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_v_redshifts);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_3 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_7, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 533, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_redshifts, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "euclidemu2.pyx":532
 * 
 *         # Convert single redshift input argument to array
 *         if isinstance(redshifts, (int, float)):             # <<<<<<<<<<<<<<
 *             redshifts = np.asarray([redshifts])
 *         else:
 */
    goto __pyx_L4;
  }

  /* "euclidemu2.pyx":535
 *             redshifts = np.asarray([redshifts])
 *         else:
 *             redshifts = np.asarray(redshifts)             # <<<<<<<<<<<<<<
 * 
 *         kvec, Bk = self.get_boost(emu_pars_dict, redshifts, custom_kvec)
 */
  /*else*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 535, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_asarray); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 535, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_1, __pyx_v_redshifts) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_redshifts);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 535, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_redshifts, __pyx_t_3);
    __pyx_t_3 = 0;
  }
  __pyx_L4:;

  /* "euclidemu2.pyx":537
 *             redshifts = np.asarray(redshifts)
 * 
 *         kvec, Bk = self.get_boost(emu_pars_dict, redshifts, custom_kvec)             # <<<<<<<<<<<<<<
 * 
 *         plin = self.get_plin(emu_pars_dict, kvec, redshifts)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_boost); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 537, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_1, __pyx_v_emu_pars_dict, __pyx_v_redshifts, __pyx_v_custom_kvec};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 537, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_1, __pyx_v_emu_pars_dict, __pyx_v_redshifts, __pyx_v_custom_kvec};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 537, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(3+__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 537, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_1) {
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_1); __pyx_t_1 = NULL;
    }
    __Pyx_INCREF(__pyx_v_emu_pars_dict);
    __Pyx_GIVEREF(__pyx_v_emu_pars_dict);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_8, __pyx_v_emu_pars_dict);
    __Pyx_INCREF(__pyx_v_redshifts);
    __Pyx_GIVEREF(__pyx_v_redshifts);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_8, __pyx_v_redshifts);
    __Pyx_INCREF(__pyx_v_custom_kvec);
    __Pyx_GIVEREF(__pyx_v_custom_kvec);
    PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_8, __pyx_v_custom_kvec);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 537, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
    PyObject* sequence = __pyx_t_3;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 537, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_7);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 537, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 537, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_1 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 537, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_9 = Py_TYPE(__pyx_t_1)->tp_iternext;
    index = 0; __pyx_t_2 = __pyx_t_9(__pyx_t_1); if (unlikely(!__pyx_t_2)) goto __pyx_L7_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_7 = __pyx_t_9(__pyx_t_1); if (unlikely(!__pyx_t_7)) goto __pyx_L7_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_7);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_1), 2) < 0) __PYX_ERR(0, 537, __pyx_L1_error)
    __pyx_t_9 = NULL;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L8_unpacking_done;
    __pyx_L7_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_9 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 537, __pyx_L1_error)
    __pyx_L8_unpacking_done:;
  }
  __pyx_v_kvec = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_Bk = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "euclidemu2.pyx":539
 *         kvec, Bk = self.get_boost(emu_pars_dict, redshifts, custom_kvec)
 * 
 *         plin = self.get_plin(emu_pars_dict, kvec, redshifts)             # <<<<<<<<<<<<<<
 *         plin = plin[1]
 * 
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_plin); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 539, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_2 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_7)) {
    PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_emu_pars_dict, __pyx_v_kvec, __pyx_v_redshifts};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 539, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
    PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_emu_pars_dict, __pyx_v_kvec, __pyx_v_redshifts};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 539, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  {
    __pyx_t_1 = PyTuple_New(3+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 539, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_emu_pars_dict);
    __Pyx_GIVEREF(__pyx_v_emu_pars_dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_8, __pyx_v_emu_pars_dict);
    __Pyx_INCREF(__pyx_v_kvec);
    __Pyx_GIVEREF(__pyx_v_kvec);
    PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_8, __pyx_v_kvec);
    __Pyx_INCREF(__pyx_v_redshifts);
    __Pyx_GIVEREF(__pyx_v_redshifts);
    PyTuple_SET_ITEM(__pyx_t_1, 2+__pyx_t_8, __pyx_v_redshifts);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 539, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_plin = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "euclidemu2.pyx":540
 * 
 *         plin = self.get_plin(emu_pars_dict, kvec, redshifts)
 *         plin = plin[1]             # <<<<<<<<<<<<<<
 * 
 *         pnonlin = {}
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_plin, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 540, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF_SET(__pyx_v_plin, __pyx_t_3);
  __pyx_t_3 = 0;

  /* "euclidemu2.pyx":542
 *         plin = plin[1]
 * 
 *         pnonlin = {}             # <<<<<<<<<<<<<<
 *         for i, z in enumerate(redshifts):
 *                 pnonlin[i] = plin[i]*Bk[i]
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_pnonlin = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "euclidemu2.pyx":543
 * 
 *         pnonlin = {}
 *         for i, z in enumerate(redshifts):             # <<<<<<<<<<<<<<
 *                 pnonlin[i] = plin[i]*Bk[i]
 * 
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_3 = __pyx_int_0;
  if (likely(PyList_CheckExact(__pyx_v_redshifts)) || PyTuple_CheckExact(__pyx_v_redshifts)) {
    __pyx_t_7 = __pyx_v_redshifts; __Pyx_INCREF(__pyx_t_7); __pyx_t_10 = 0;
    __pyx_t_11 = NULL;
  } else {
    __pyx_t_10 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_v_redshifts); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 543, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_11 = Py_TYPE(__pyx_t_7)->tp_iternext; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 543, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_11)) {
      if (likely(PyList_CheckExact(__pyx_t_7))) {
        if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_7)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_10); __Pyx_INCREF(__pyx_t_1); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(0, 543, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_7, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 543, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_10 >= PyTuple_GET_SIZE(__pyx_t_7)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_10); __Pyx_INCREF(__pyx_t_1); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(0, 543, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_7, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 543, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_11(__pyx_t_7);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 543, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_z, __pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_3);
    __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_t_3, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 543, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3);
    __pyx_t_3 = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "euclidemu2.pyx":544
 *         pnonlin = {}
 *         for i, z in enumerate(redshifts):
 *                 pnonlin[i] = plin[i]*Bk[i]             # <<<<<<<<<<<<<<
 * 
 *         return kvec, pnonlin, plin, Bk
 */
    __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_plin, __pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 544, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_v_Bk, __pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 544, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_12 = PyNumber_Multiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 544, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(PyDict_SetItem(__pyx_v_pnonlin, __pyx_v_i, __pyx_t_12) < 0)) __PYX_ERR(0, 544, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

    /* "euclidemu2.pyx":543
 * 
 *         pnonlin = {}
 *         for i, z in enumerate(redshifts):             # <<<<<<<<<<<<<<
 *                 pnonlin[i] = plin[i]*Bk[i]
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "euclidemu2.pyx":546
 *                 pnonlin[i] = plin[i]*Bk[i]
 * 
 *         return kvec, pnonlin, plin, Bk             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyTuple_New(4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 546, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_kvec);
  __Pyx_GIVEREF(__pyx_v_kvec);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_kvec);
  __Pyx_INCREF(__pyx_v_pnonlin);
  __Pyx_GIVEREF(__pyx_v_pnonlin);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_pnonlin);
  __Pyx_INCREF(__pyx_v_plin);
  __Pyx_GIVEREF(__pyx_v_plin);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_plin);
  __Pyx_INCREF(__pyx_v_Bk);
  __Pyx_GIVEREF(__pyx_v_Bk);
  PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_v_Bk);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "euclidemu2.pyx":524
 *         return custom_kvec, linpower
 * 
 *     def get_pnonlin(self,emu_pars_dict, redshifts, custom_kvec=None):             # <<<<<<<<<<<<<<
 * 
 *         if _Class.__module__ not in _sys.modules:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("euclidemu2.PyEuclidEmulator.get_pnonlin", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_kvec);
  __Pyx_XDECREF(__pyx_v_Bk);
  __Pyx_XDECREF(__pyx_v_plin);
  __Pyx_XDECREF(__pyx_v_pnonlin);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_z);
  __Pyx_XDECREF(__pyx_v_redshifts);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10euclidemu2_16PyEuclidEmulator_19__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10euclidemu2_16PyEuclidEmulator_19__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10euclidemu2_16PyEuclidEmulator_18__reduce_cython__(((struct __pyx_obj_10euclidemu2_PyEuclidEmulator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10euclidemu2_16PyEuclidEmulator_18__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_10euclidemu2_PyEuclidEmulator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("euclidemu2.PyEuclidEmulator.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_10euclidemu2_16PyEuclidEmulator_21__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_10euclidemu2_16PyEuclidEmulator_21__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10euclidemu2_16PyEuclidEmulator_20__setstate_cython__(((struct __pyx_obj_10euclidemu2_PyEuclidEmulator *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10euclidemu2_16PyEuclidEmulator_20__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_10euclidemu2_PyEuclidEmulator *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("euclidemu2.PyEuclidEmulator.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_double")
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<double>  __pyx_convert_vector_from_py_double(PyObject *__pyx_v_o) {
  std::vector<double>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<double>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_double", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_item); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 48, __pyx_L1_error)
    __pyx_v_v.push_back(((double)__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_double")
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char const *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":14
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0             # <<<<<<<<<<<<<<
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)
 */
  __pyx_v_length = 0;

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == ((char const *)NULL))) __PYX_ERR(1, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "carray.to_py":112
 * 
 * @cname("__Pyx_carray_to_py_double")
 * cdef inline list __Pyx_carray_to_py_double(base_type *v, Py_ssize_t length):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     cdef object value
 */

static CYTHON_INLINE PyObject *__Pyx_carray_to_py_double(double *__pyx_v_v, Py_ssize_t __pyx_v_length) {
  size_t __pyx_v_i;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_l = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_carray_to_py_double", 0);

  /* "carray.to_py":115
 *     cdef size_t i
 *     cdef object value
 *     l = PyList_New(length)             # <<<<<<<<<<<<<<
 *     for i in range(<size_t>length):
 *         value = v[i]
 */
  __pyx_t_1 = PyList_New(__pyx_v_length); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_l = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "carray.to_py":116
 *     cdef object value
 *     l = PyList_New(length)
 *     for i in range(<size_t>length):             # <<<<<<<<<<<<<<
 *         value = v[i]
 *         Py_INCREF(value)
 */
  __pyx_t_2 = ((size_t)__pyx_v_length);
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "carray.to_py":117
 *     l = PyList_New(length)
 *     for i in range(<size_t>length):
 *         value = v[i]             # <<<<<<<<<<<<<<
 *         Py_INCREF(value)
 *         PyList_SET_ITEM(l, i, value)
 */
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 117, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "carray.to_py":118
 *     for i in range(<size_t>length):
 *         value = v[i]
 *         Py_INCREF(value)             # <<<<<<<<<<<<<<
 *         PyList_SET_ITEM(l, i, value)
 *     return l
 */
    Py_INCREF(__pyx_v_value);

    /* "carray.to_py":119
 *         value = v[i]
 *         Py_INCREF(value)
 *         PyList_SET_ITEM(l, i, value)             # <<<<<<<<<<<<<<
 *     return l
 * 
 */
    PyList_SET_ITEM(__pyx_v_l, __pyx_v_i, __pyx_v_value);
  }

  /* "carray.to_py":120
 *         Py_INCREF(value)
 *         PyList_SET_ITEM(l, i, value)
 *     return l             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_l);
  __pyx_r = __pyx_v_l;
  goto __pyx_L0;

  /* "carray.to_py":112
 * 
 * @cname("__Pyx_carray_to_py_double")
 * cdef inline list __Pyx_carray_to_py_double(base_type *v, Py_ssize_t length):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     cdef object value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("carray.to_py.__Pyx_carray_to_py_double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XDECREF(__pyx_v_l);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "carray.to_py":124
 * 
 * @cname("__Pyx_carray_to_tuple_double")
 * cdef inline tuple __Pyx_carray_to_tuple_double(base_type *v, Py_ssize_t length):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     cdef object value
 */

static CYTHON_INLINE PyObject *__Pyx_carray_to_tuple_double(double *__pyx_v_v, Py_ssize_t __pyx_v_length) {
  size_t __pyx_v_i;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_carray_to_tuple_double", 0);

  /* "carray.to_py":127
 *     cdef size_t i
 *     cdef object value
 *     t = PyTuple_New(length)             # <<<<<<<<<<<<<<
 *     for i in range(<size_t>length):
 *         value = v[i]
 */
  __pyx_t_1 = PyTuple_New(__pyx_v_length); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_t = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "carray.to_py":128
 *     cdef object value
 *     t = PyTuple_New(length)
 *     for i in range(<size_t>length):             # <<<<<<<<<<<<<<
 *         value = v[i]
 *         Py_INCREF(value)
 */
  __pyx_t_2 = ((size_t)__pyx_v_length);
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "carray.to_py":129
 *     t = PyTuple_New(length)
 *     for i in range(<size_t>length):
 *         value = v[i]             # <<<<<<<<<<<<<<
 *         Py_INCREF(value)
 *         PyTuple_SET_ITEM(t, i, value)
 */
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 129, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "carray.to_py":130
 *     for i in range(<size_t>length):
 *         value = v[i]
 *         Py_INCREF(value)             # <<<<<<<<<<<<<<
 *         PyTuple_SET_ITEM(t, i, value)
 *     return t
 */
    Py_INCREF(__pyx_v_value);

    /* "carray.to_py":131
 *         value = v[i]
 *         Py_INCREF(value)
 *         PyTuple_SET_ITEM(t, i, value)             # <<<<<<<<<<<<<<
 *     return t
 */
    PyTuple_SET_ITEM(__pyx_v_t, __pyx_v_i, __pyx_v_value);
  }

  /* "carray.to_py":132
 *         Py_INCREF(value)
 *         PyTuple_SET_ITEM(t, i, value)
 *     return t             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_t);
  __pyx_r = __pyx_v_t;
  goto __pyx_L0;

  /* "carray.to_py":124
 * 
 * @cname("__Pyx_carray_to_tuple_double")
 * cdef inline tuple __Pyx_carray_to_tuple_double(base_type *v, Py_ssize_t length):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     cdef object value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("carray.to_py.__Pyx_carray_to_tuple_double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "carray.from_py":77
 * 
 * @cname("__Pyx_carray_from_py_double")
 * cdef int __Pyx_carray_from_py_double(object o, base_type *v, Py_ssize_t length) except -1:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t i = length
 *     try:
 */

static int __Pyx_carray_from_py_double(PyObject *__pyx_v_o, double *__pyx_v_v, Py_ssize_t __pyx_v_length) {
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_v_item = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  PyObject *__pyx_t_10 = NULL;
  double __pyx_t_11;
  char const *__pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_carray_from_py_double", 0);

  /* "carray.from_py":78
 * @cname("__Pyx_carray_from_py_double")
 * cdef int __Pyx_carray_from_py_double(object o, base_type *v, Py_ssize_t length) except -1:
 *     cdef Py_ssize_t i = length             # <<<<<<<<<<<<<<
 *     try:
 *         i = len(o)
 */
  __pyx_v_i = __pyx_v_length;

  /* "carray.from_py":79
 * cdef int __Pyx_carray_from_py_double(object o, base_type *v, Py_ssize_t length) except -1:
 *     cdef Py_ssize_t i = length
 *     try:             # <<<<<<<<<<<<<<
 *         i = len(o)
 *     except (TypeError, OverflowError):
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "carray.from_py":80
 *     cdef Py_ssize_t i = length
 *     try:
 *         i = len(o)             # <<<<<<<<<<<<<<
 *     except (TypeError, OverflowError):
 *         pass
 */
      __pyx_t_4 = PyObject_Length(__pyx_v_o); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(1, 80, __pyx_L3_error)
      __pyx_v_i = __pyx_t_4;

      /* "carray.from_py":79
 * cdef int __Pyx_carray_from_py_double(object o, base_type *v, Py_ssize_t length) except -1:
 *     cdef Py_ssize_t i = length
 *     try:             # <<<<<<<<<<<<<<
 *         i = len(o)
 *     except (TypeError, OverflowError):
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "carray.from_py":81
 *     try:
 *         i = len(o)
 *     except (TypeError, OverflowError):             # <<<<<<<<<<<<<<
 *         pass
 *     if i == length:
 */
    __pyx_t_5 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError) || __Pyx_PyErr_ExceptionMatches(__pyx_builtin_OverflowError);
    if (__pyx_t_5) {
      __Pyx_ErrRestore(0,0,0);
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "carray.from_py":79
 * cdef int __Pyx_carray_from_py_double(object o, base_type *v, Py_ssize_t length) except -1:
 *     cdef Py_ssize_t i = length
 *     try:             # <<<<<<<<<<<<<<
 *         i = len(o)
 *     except (TypeError, OverflowError):
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L8_try_end:;
  }

  /* "carray.from_py":83
 *     except (TypeError, OverflowError):
 *         pass
 *     if i == length:             # <<<<<<<<<<<<<<
 *         for i, item in enumerate(o):
 *             if i >= length:
 */
  __pyx_t_6 = ((__pyx_v_i == __pyx_v_length) != 0);
  if (__pyx_t_6) {

    /* "carray.from_py":84
 *         pass
 *     if i == length:
 *         for i, item in enumerate(o):             # <<<<<<<<<<<<<<
 *             if i >= length:
 *                 break
 */
    __pyx_t_4 = 0;
    if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
      __pyx_t_7 = __pyx_v_o; __Pyx_INCREF(__pyx_t_7); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
    } else {
      __pyx_t_8 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 84, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_9 = Py_TYPE(__pyx_t_7)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 84, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_9)) {
        if (likely(PyList_CheckExact(__pyx_t_7))) {
          if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_7)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_10 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_8); __Pyx_INCREF(__pyx_t_10); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(1, 84, __pyx_L1_error)
          #else
          __pyx_t_10 = PySequence_ITEM(__pyx_t_7, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 84, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          #endif
        } else {
          if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_7)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_10 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_8); __Pyx_INCREF(__pyx_t_10); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(1, 84, __pyx_L1_error)
          #else
          __pyx_t_10 = PySequence_ITEM(__pyx_t_7, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 84, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          #endif
        }
      } else {
        __pyx_t_10 = __pyx_t_9(__pyx_t_7);
        if (unlikely(!__pyx_t_10)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 84, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_10);
      }
      __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_10);
      __pyx_t_10 = 0;
      __pyx_v_i = __pyx_t_4;
      __pyx_t_4 = (__pyx_t_4 + 1);

      /* "carray.from_py":85
 *     if i == length:
 *         for i, item in enumerate(o):
 *             if i >= length:             # <<<<<<<<<<<<<<
 *                 break
 *             v[i] = item
 */
      __pyx_t_6 = ((__pyx_v_i >= __pyx_v_length) != 0);
      if (__pyx_t_6) {

        /* "carray.from_py":86
 *         for i, item in enumerate(o):
 *             if i >= length:
 *                 break             # <<<<<<<<<<<<<<
 *             v[i] = item
 *         else:
 */
        goto __pyx_L11_break;

        /* "carray.from_py":85
 *     if i == length:
 *         for i, item in enumerate(o):
 *             if i >= length:             # <<<<<<<<<<<<<<
 *                 break
 *             v[i] = item
 */
      }

      /* "carray.from_py":87
 *             if i >= length:
 *                 break
 *             v[i] = item             # <<<<<<<<<<<<<<
 *         else:
 *             i += 1  # convert index to length
 */
      __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_v_item); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 87, __pyx_L1_error)
      (__pyx_v_v[__pyx_v_i]) = __pyx_t_11;

      /* "carray.from_py":84
 *         pass
 *     if i == length:
 *         for i, item in enumerate(o):             # <<<<<<<<<<<<<<
 *             if i >= length:
 *                 break
 */
    }
    /*else*/ {

      /* "carray.from_py":89
 *             v[i] = item
 *         else:
 *             i += 1  # convert index to length             # <<<<<<<<<<<<<<
 *             if i == length:
 *                 return 0
 */
      __pyx_v_i = (__pyx_v_i + 1);

      /* "carray.from_py":90
 *         else:
 *             i += 1  # convert index to length
 *             if i == length:             # <<<<<<<<<<<<<<
 *                 return 0
 * 
 */
      __pyx_t_6 = ((__pyx_v_i == __pyx_v_length) != 0);
      if (__pyx_t_6) {

        /* "carray.from_py":91
 *             i += 1  # convert index to length
 *             if i == length:
 *                 return 0             # <<<<<<<<<<<<<<
 * 
 *     PyErr_Format(
 */
        __pyx_r = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        goto __pyx_L0;

        /* "carray.from_py":90
 *         else:
 *             i += 1  # convert index to length
 *             if i == length:             # <<<<<<<<<<<<<<
 *                 return 0
 * 
 */
      }
    }

    /* "carray.from_py":84
 *         pass
 *     if i == length:
 *         for i, item in enumerate(o):             # <<<<<<<<<<<<<<
 *             if i >= length:
 *                 break
 */
    __pyx_L11_break:;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "carray.from_py":83
 *     except (TypeError, OverflowError):
 *         pass
 *     if i == length:             # <<<<<<<<<<<<<<
 *         for i, item in enumerate(o):
 *             if i >= length:
 */
  }

  /* "carray.from_py":96
 *         IndexError,
 *         ("too many values found during array assignment, expected %zd"
 *          if i >= length else             # <<<<<<<<<<<<<<
 *          "not enough values found during array assignment, expected %zd, got %zd"),
 *         length, i)
 */
  if (((__pyx_v_i >= __pyx_v_length) != 0)) {
    __pyx_t_12 = ((char const *)"too many values found during array assignment, expected %zd");
  } else {
    __pyx_t_12 = ((char const *)"not enough values found during array assignment, expected %zd, got %zd");
  }

  /* "carray.from_py":93
 *                 return 0
 * 
 *     PyErr_Format(             # <<<<<<<<<<<<<<
 *         IndexError,
 *         ("too many values found during array assignment, expected %zd"
 */
  __pyx_t_7 = PyErr_Format(__pyx_builtin_IndexError, __pyx_t_12, __pyx_v_length, __pyx_v_i); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "carray.from_py":77
 * 
 * @cname("__Pyx_carray_from_py_double")
 * cdef int __Pyx_carray_from_py_double(object o, base_type *v, Py_ssize_t length) except -1:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t i = length
 *     try:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("carray.from_py.__Pyx_carray_from_py_double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "carray.to_py":112
 * 
 * @cname("__Pyx_carray_to_py_double___5b_0x265_5d_")
 * cdef inline list __Pyx_carray_to_py_double___5b_0x265_5d_(base_type *v, Py_ssize_t length):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     cdef object value
 */

static CYTHON_INLINE PyObject *__Pyx_carray_to_py_double___5b_0x265_5d_(double (*__pyx_v_v)[0x265], Py_ssize_t __pyx_v_length) {
  size_t __pyx_v_i;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_l = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_carray_to_py_double___5b_0x265_5d_", 0);

  /* "carray.to_py":115
 *     cdef size_t i
 *     cdef object value
 *     l = PyList_New(length)             # <<<<<<<<<<<<<<
 *     for i in range(<size_t>length):
 *         value = v[i]
 */
  __pyx_t_1 = PyList_New(__pyx_v_length); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_l = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "carray.to_py":116
 *     cdef object value
 *     l = PyList_New(length)
 *     for i in range(<size_t>length):             # <<<<<<<<<<<<<<
 *         value = v[i]
 *         Py_INCREF(value)
 */
  __pyx_t_2 = ((size_t)__pyx_v_length);
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "carray.to_py":117
 *     l = PyList_New(length)
 *     for i in range(<size_t>length):
 *         value = v[i]             # <<<<<<<<<<<<<<
 *         Py_INCREF(value)
 *         PyList_SET_ITEM(l, i, value)
 */
    __pyx_t_1 = __Pyx_carray_to_py_double((__pyx_v_v[__pyx_v_i]), 0x265); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 117, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "carray.to_py":118
 *     for i in range(<size_t>length):
 *         value = v[i]
 *         Py_INCREF(value)             # <<<<<<<<<<<<<<
 *         PyList_SET_ITEM(l, i, value)
 *     return l
 */
    Py_INCREF(__pyx_v_value);

    /* "carray.to_py":119
 *         value = v[i]
 *         Py_INCREF(value)
 *         PyList_SET_ITEM(l, i, value)             # <<<<<<<<<<<<<<
 *     return l
 * 
 */
    PyList_SET_ITEM(__pyx_v_l, __pyx_v_i, __pyx_v_value);
  }

  /* "carray.to_py":120
 *         Py_INCREF(value)
 *         PyList_SET_ITEM(l, i, value)
 *     return l             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_l);
  __pyx_r = __pyx_v_l;
  goto __pyx_L0;

  /* "carray.to_py":112
 * 
 * @cname("__Pyx_carray_to_py_double___5b_0x265_5d_")
 * cdef inline list __Pyx_carray_to_py_double___5b_0x265_5d_(base_type *v, Py_ssize_t length):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     cdef object value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("carray.to_py.__Pyx_carray_to_py_double___5b_0x265_5d_", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XDECREF(__pyx_v_l);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "carray.to_py":124
 * 
 * @cname("__Pyx_carray_to_tuple_double___5b_0x265_5d_")
 * cdef inline tuple __Pyx_carray_to_tuple_double___5b_0x265_5d_(base_type *v, Py_ssize_t length):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     cdef object value
 */

static CYTHON_INLINE PyObject *__Pyx_carray_to_tuple_double___5b_0x265_5d_(double (*__pyx_v_v)[0x265], Py_ssize_t __pyx_v_length) {
  size_t __pyx_v_i;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_carray_to_tuple_double___5b_0x265_5d_", 0);

  /* "carray.to_py":127
 *     cdef size_t i
 *     cdef object value
 *     t = PyTuple_New(length)             # <<<<<<<<<<<<<<
 *     for i in range(<size_t>length):
 *         value = v[i]
 */
  __pyx_t_1 = PyTuple_New(__pyx_v_length); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_t = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "carray.to_py":128
 *     cdef object value
 *     t = PyTuple_New(length)
 *     for i in range(<size_t>length):             # <<<<<<<<<<<<<<
 *         value = v[i]
 *         Py_INCREF(value)
 */
  __pyx_t_2 = ((size_t)__pyx_v_length);
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "carray.to_py":129
 *     t = PyTuple_New(length)
 *     for i in range(<size_t>length):
 *         value = v[i]             # <<<<<<<<<<<<<<
 *         Py_INCREF(value)
 *         PyTuple_SET_ITEM(t, i, value)
 */
    __pyx_t_1 = __Pyx_carray_to_py_double((__pyx_v_v[__pyx_v_i]), 0x265); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 129, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "carray.to_py":130
 *     for i in range(<size_t>length):
 *         value = v[i]
 *         Py_INCREF(value)             # <<<<<<<<<<<<<<
 *         PyTuple_SET_ITEM(t, i, value)
 *     return t
 */
    Py_INCREF(__pyx_v_value);

    /* "carray.to_py":131
 *         value = v[i]
 *         Py_INCREF(value)
 *         PyTuple_SET_ITEM(t, i, value)             # <<<<<<<<<<<<<<
 *     return t
 */
    PyTuple_SET_ITEM(__pyx_v_t, __pyx_v_i, __pyx_v_value);
  }

  /* "carray.to_py":132
 *         Py_INCREF(value)
 *         PyTuple_SET_ITEM(t, i, value)
 *     return t             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_t);
  __pyx_r = __pyx_v_t;
  goto __pyx_L0;

  /* "carray.to_py":124
 * 
 * @cname("__Pyx_carray_to_tuple_double___5b_0x265_5d_")
 * cdef inline tuple __Pyx_carray_to_tuple_double___5b_0x265_5d_(base_type *v, Py_ssize_t length):             # <<<<<<<<<<<<<<
 *     cdef size_t i
 *     cdef object value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("carray.to_py.__Pyx_carray_to_tuple_double___5b_0x265_5d_", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "carray.from_py":77
 * 
 * @cname("__Pyx_carray_from_py_double___5b_0x265_5d_")
 * cdef int __Pyx_carray_from_py_double___5b_0x265_5d_(object o, base_type *v, Py_ssize_t length) except -1:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t i = length
 *     try:
 */

static int __Pyx_carray_from_py_double___5b_0x265_5d_(PyObject *__pyx_v_o, double (*__pyx_v_v)[0x265], Py_ssize_t __pyx_v_length) {
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_v_item = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  PyObject *__pyx_t_10 = NULL;
  double __pyx_t_11[0x265];
  char const *__pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_carray_from_py_double___5b_0x265_5d_", 0);

  /* "carray.from_py":78
 * @cname("__Pyx_carray_from_py_double___5b_0x265_5d_")
 * cdef int __Pyx_carray_from_py_double___5b_0x265_5d_(object o, base_type *v, Py_ssize_t length) except -1:
 *     cdef Py_ssize_t i = length             # <<<<<<<<<<<<<<
 *     try:
 *         i = len(o)
 */
  __pyx_v_i = __pyx_v_length;

  /* "carray.from_py":79
 * cdef int __Pyx_carray_from_py_double___5b_0x265_5d_(object o, base_type *v, Py_ssize_t length) except -1:
 *     cdef Py_ssize_t i = length
 *     try:             # <<<<<<<<<<<<<<
 *         i = len(o)
 *     except (TypeError, OverflowError):
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "carray.from_py":80
 *     cdef Py_ssize_t i = length
 *     try:
 *         i = len(o)             # <<<<<<<<<<<<<<
 *     except (TypeError, OverflowError):
 *         pass
 */
      __pyx_t_4 = PyObject_Length(__pyx_v_o); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(1, 80, __pyx_L3_error)
      __pyx_v_i = __pyx_t_4;

      /* "carray.from_py":79
 * cdef int __Pyx_carray_from_py_double___5b_0x265_5d_(object o, base_type *v, Py_ssize_t length) except -1:
 *     cdef Py_ssize_t i = length
 *     try:             # <<<<<<<<<<<<<<
 *         i = len(o)
 *     except (TypeError, OverflowError):
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "carray.from_py":81
 *     try:
 *         i = len(o)
 *     except (TypeError, OverflowError):             # <<<<<<<<<<<<<<
 *         pass
 *     if i == length:
 */
    __pyx_t_5 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError) || __Pyx_PyErr_ExceptionMatches(__pyx_builtin_OverflowError);
    if (__pyx_t_5) {
      __Pyx_ErrRestore(0,0,0);
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "carray.from_py":79
 * cdef int __Pyx_carray_from_py_double___5b_0x265_5d_(object o, base_type *v, Py_ssize_t length) except -1:
 *     cdef Py_ssize_t i = length
 *     try:             # <<<<<<<<<<<<<<
 *         i = len(o)
 *     except (TypeError, OverflowError):
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L8_try_end:;
  }

  /* "carray.from_py":83
 *     except (TypeError, OverflowError):
 *         pass
 *     if i == length:             # <<<<<<<<<<<<<<
 *         for i, item in enumerate(o):
 *             if i >= length:
 */
  __pyx_t_6 = ((__pyx_v_i == __pyx_v_length) != 0);
  if (__pyx_t_6) {

    /* "carray.from_py":84
 *         pass
 *     if i == length:
 *         for i, item in enumerate(o):             # <<<<<<<<<<<<<<
 *             if i >= length:
 *                 break
 */
    __pyx_t_4 = 0;
    if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
      __pyx_t_7 = __pyx_v_o; __Pyx_INCREF(__pyx_t_7); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
    } else {
      __pyx_t_8 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 84, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_9 = Py_TYPE(__pyx_t_7)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 84, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_9)) {
        if (likely(PyList_CheckExact(__pyx_t_7))) {
          if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_7)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_10 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_8); __Pyx_INCREF(__pyx_t_10); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(1, 84, __pyx_L1_error)
          #else
          __pyx_t_10 = PySequence_ITEM(__pyx_t_7, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 84, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          #endif
        } else {
          if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_7)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_10 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_8); __Pyx_INCREF(__pyx_t_10); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(1, 84, __pyx_L1_error)
          #else
          __pyx_t_10 = PySequence_ITEM(__pyx_t_7, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 84, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          #endif
        }
      } else {
        __pyx_t_10 = __pyx_t_9(__pyx_t_7);
        if (unlikely(!__pyx_t_10)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 84, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_10);
      }
      __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_10);
      __pyx_t_10 = 0;
      __pyx_v_i = __pyx_t_4;
      __pyx_t_4 = (__pyx_t_4 + 1);

      /* "carray.from_py":85
 *     if i == length:
 *         for i, item in enumerate(o):
 *             if i >= length:             # <<<<<<<<<<<<<<
 *                 break
 *             v[i] = item
 */
      __pyx_t_6 = ((__pyx_v_i >= __pyx_v_length) != 0);
      if (__pyx_t_6) {

        /* "carray.from_py":86
 *         for i, item in enumerate(o):
 *             if i >= length:
 *                 break             # <<<<<<<<<<<<<<
 *             v[i] = item
 *         else:
 */
        goto __pyx_L11_break;

        /* "carray.from_py":85
 *     if i == length:
 *         for i, item in enumerate(o):
 *             if i >= length:             # <<<<<<<<<<<<<<
 *                 break
 *             v[i] = item
 */
      }

      /* "carray.from_py":87
 *             if i >= length:
 *                 break
 *             v[i] = item             # <<<<<<<<<<<<<<
 *         else:
 *             i += 1  # convert index to length
 */
      if (unlikely(__Pyx_carray_from_py_double(__pyx_v_item, __pyx_t_11, 0x265) < 0)) __PYX_ERR(1, 87, __pyx_L1_error)
      if (unlikely((0x265) != (0x265))) {
        PyErr_Format(PyExc_ValueError, "Assignment to slice of wrong length, expected %" CYTHON_FORMAT_SSIZE_T "d, got %" CYTHON_FORMAT_SSIZE_T "d", (Py_ssize_t)(0x265), (Py_ssize_t)(0x265));
        __PYX_ERR(1, 87, __pyx_L1_error)
      }
      memcpy(&((__pyx_v_v[__pyx_v_i])[0]), __pyx_t_11, sizeof((__pyx_v_v[__pyx_v_i])[0]) * (0x265));

      /* "carray.from_py":84
 *         pass
 *     if i == length:
 *         for i, item in enumerate(o):             # <<<<<<<<<<<<<<
 *             if i >= length:
 *                 break
 */
    }
    /*else*/ {

      /* "carray.from_py":89
 *             v[i] = item
 *         else:
 *             i += 1  # convert index to length             # <<<<<<<<<<<<<<
 *             if i == length:
 *                 return 0
 */
      __pyx_v_i = (__pyx_v_i + 1);

      /* "carray.from_py":90
 *         else:
 *             i += 1  # convert index to length
 *             if i == length:             # <<<<<<<<<<<<<<
 *                 return 0
 * 
 */
      __pyx_t_6 = ((__pyx_v_i == __pyx_v_length) != 0);
      if (__pyx_t_6) {

        /* "carray.from_py":91
 *             i += 1  # convert index to length
 *             if i == length:
 *                 return 0             # <<<<<<<<<<<<<<
 * 
 *     PyErr_Format(
 */
        __pyx_r = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        goto __pyx_L0;

        /* "carray.from_py":90
 *         else:
 *             i += 1  # convert index to length
 *             if i == length:             # <<<<<<<<<<<<<<
 *                 return 0
 * 
 */
      }
    }

    /* "carray.from_py":84
 *         pass
 *     if i == length:
 *         for i, item in enumerate(o):             # <<<<<<<<<<<<<<
 *             if i >= length:
 *                 break
 */
    __pyx_L11_break:;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "carray.from_py":83
 *     except (TypeError, OverflowError):
 *         pass
 *     if i == length:             # <<<<<<<<<<<<<<
 *         for i, item in enumerate(o):
 *             if i >= length:
 */
  }

  /* "carray.from_py":96
 *         IndexError,
 *         ("too many values found during array assignment, expected %zd"
 *          if i >= length else             # <<<<<<<<<<<<<<
 *          "not enough values found during array assignment, expected %zd, got %zd"),
 *         length, i)
 */
  if (((__pyx_v_i >= __pyx_v_length) != 0)) {
    __pyx_t_12 = ((char const *)"too many values found during array assignment, expected %zd");
  } else {
    __pyx_t_12 = ((char const *)"not enough values found during array assignment, expected %zd, got %zd");
  }

  /* "carray.from_py":93
 *                 return 0
 * 
 *     PyErr_Format(             # <<<<<<<<<<<<<<
 *         IndexError,
 *         ("too many values found during array assignment, expected %zd"
 */
  __pyx_t_7 = PyErr_Format(__pyx_builtin_IndexError, __pyx_t_12, __pyx_v_length, __pyx_v_i); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "carray.from_py":77
 * 
 * @cname("__Pyx_carray_from_py_double___5b_0x265_5d_")
 * cdef int __Pyx_carray_from_py_double___5b_0x265_5d_(object o, base_type *v, Py_ssize_t length) except -1:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t i = length
 *     try:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("carray.from_py.__Pyx_carray_from_py_double___5b_0x265_5d_", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_10euclidemu2_PyCosmology(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_10euclidemu2_11PyCosmology_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_10euclidemu2_PyCosmology(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_10euclidemu2_11PyCosmology_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_10euclidemu2_PyCosmology[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_10euclidemu2_11PyCosmology_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_10euclidemu2_11PyCosmology_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_10euclidemu2_PyCosmology = {
  PyVarObject_HEAD_INIT(0, 0)
  "euclidemu2.PyCosmology", /*tp_name*/
  sizeof(struct __pyx_obj_10euclidemu2_PyCosmology), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10euclidemu2_PyCosmology, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10euclidemu2_PyCosmology, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10euclidemu2_PyCosmology, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_10euclidemu2_PyEuclidEmulator(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_10euclidemu2_16PyEuclidEmulator_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_10euclidemu2_PyEuclidEmulator(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_10euclidemu2_16PyEuclidEmulator_7__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_10euclidemu2_16PyEuclidEmulator_kvec(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10euclidemu2_16PyEuclidEmulator_4kvec_1__get__(o);
}

static int __pyx_setprop_10euclidemu2_16PyEuclidEmulator_kvec(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10euclidemu2_16PyEuclidEmulator_4kvec_3__set__(o, v);
  }
  else {
    return __pyx_pw_10euclidemu2_16PyEuclidEmulator_4kvec_5__del__(o);
  }
}

static PyObject *__pyx_getprop_10euclidemu2_16PyEuclidEmulator_Bvec(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10euclidemu2_16PyEuclidEmulator_4Bvec_1__get__(o);
}

static int __pyx_setprop_10euclidemu2_16PyEuclidEmulator_Bvec(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10euclidemu2_16PyEuclidEmulator_4Bvec_3__set__(o, v);
  }
  else {
    return __pyx_pw_10euclidemu2_16PyEuclidEmulator_4Bvec_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_10euclidemu2_PyEuclidEmulator[] = {
  {"compute_nlc", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10euclidemu2_16PyEuclidEmulator_3compute_nlc, METH_VARARGS|METH_KEYWORDS, 0},
  {"write_nlc2file", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10euclidemu2_16PyEuclidEmulator_5write_nlc2file, METH_VARARGS|METH_KEYWORDS, 0},
  {"check_param_range", (PyCFunction)__pyx_pw_10euclidemu2_16PyEuclidEmulator_9check_param_range, METH_O, __pyx_doc_10euclidemu2_16PyEuclidEmulator_8check_param_range},
  {"convert_to_emu", (PyCFunction)__pyx_pw_10euclidemu2_16PyEuclidEmulator_11convert_to_emu, METH_O, __pyx_doc_10euclidemu2_16PyEuclidEmulator_10convert_to_emu},
  {"get_boost", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10euclidemu2_16PyEuclidEmulator_13get_boost, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_plin", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10euclidemu2_16PyEuclidEmulator_15get_plin, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_pnonlin", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10euclidemu2_16PyEuclidEmulator_17get_pnonlin, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_10euclidemu2_16PyEuclidEmulator_19__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_10euclidemu2_16PyEuclidEmulator_21__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_10euclidemu2_PyEuclidEmulator[] = {
  {(char *)"kvec", __pyx_getprop_10euclidemu2_16PyEuclidEmulator_kvec, __pyx_setprop_10euclidemu2_16PyEuclidEmulator_kvec, (char *)0, 0},
  {(char *)"Bvec", __pyx_getprop_10euclidemu2_16PyEuclidEmulator_Bvec, __pyx_setprop_10euclidemu2_16PyEuclidEmulator_Bvec, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_10euclidemu2_PyEuclidEmulator = {
  PyVarObject_HEAD_INIT(0, 0)
  "euclidemu2.PyEuclidEmulator", /*tp_name*/
  sizeof(struct __pyx_obj_10euclidemu2_PyEuclidEmulator), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10euclidemu2_PyEuclidEmulator, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10euclidemu2_PyEuclidEmulator, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_10euclidemu2_PyEuclidEmulator, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10euclidemu2_PyEuclidEmulator, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_euclidemu2(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_euclidemu2},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "euclidemu2",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_A_s, __pyx_k_A_s, sizeof(__pyx_k_A_s), 0, 0, 1, 1},
  {&__pyx_n_u_A_s, __pyx_k_A_s, sizeof(__pyx_k_A_s), 0, 1, 0, 1},
  {&__pyx_n_u_As, __pyx_k_As, sizeof(__pyx_k_As), 0, 1, 0, 1},
  {&__pyx_n_s_Bvec, __pyx_k_Bvec, sizeof(__pyx_k_Bvec), 0, 0, 1, 1},
  {&__pyx_n_s_Class, __pyx_k_Class, sizeof(__pyx_k_Class), 0, 0, 1, 1},
  {&__pyx_n_s_Class_2, __pyx_k_Class_2, sizeof(__pyx_k_Class_2), 0, 0, 1, 1},
  {&__pyx_kp_u_Class_with_just_make_instead_of, __pyx_k_Class_with_just_make_instead_of, sizeof(__pyx_k_Class_with_just_make_instead_of), 0, 1, 0, 0},
  {&__pyx_kp_u_Classy_could_not_be_found_in_yo, __pyx_k_Classy_could_not_be_found_in_yo, sizeof(__pyx_k_Classy_could_not_be_found_in_yo), 0, 1, 0, 0},
  {&__pyx_n_s_CubicSpline, __pyx_k_CubicSpline, sizeof(__pyx_k_CubicSpline), 0, 0, 1, 1},
  {&__pyx_n_s_CubicSpline_2, __pyx_k_CubicSpline_2, sizeof(__pyx_k_CubicSpline_2), 0, 0, 1, 1},
  {&__pyx_kp_u_Download_the_Class_from_class_c, __pyx_k_Download_the_Class_from_class_c, sizeof(__pyx_k_Download_the_Class_from_class_c), 0, 1, 0, 0},
  {&__pyx_kp_u_EuclidEmulator2_allows_only_reds, __pyx_k_EuclidEmulator2_allows_only_reds, sizeof(__pyx_k_EuclidEmulator2_allows_only_reds), 0, 1, 0, 0},
  {&__pyx_n_u_H0, __pyx_k_H0, sizeof(__pyx_k_H0), 0, 1, 0, 1},
  {&__pyx_kp_u_Here_are_some_suggestions, __pyx_k_Here_are_some_suggestions, sizeof(__pyx_k_Here_are_some_suggestions), 0, 1, 0, 0},
  {&__pyx_kp_u_If_you_know_that_Class_is_insta, __pyx_k_If_you_know_that_Class_is_insta, sizeof(__pyx_k_If_you_know_that_Class_is_insta), 0, 1, 0, 0},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_n_s_IndexError, __pyx_k_IndexError, sizeof(__pyx_k_IndexError), 0, 0, 1, 1},
  {&__pyx_n_s_KeyError, __pyx_k_KeyError, sizeof(__pyx_k_KeyError), 0, 0, 1, 1},
  {&__pyx_kp_u_Missing_parameter_A_s_or_ln10_10, __pyx_k_Missing_parameter_A_s_or_ln10_10, sizeof(__pyx_k_Missing_parameter_A_s_or_ln10_10), 0, 1, 0, 0},
  {&__pyx_kp_u_Missing_parameter_Omega_b_Can_t, __pyx_k_Missing_parameter_Omega_b_Can_t, sizeof(__pyx_k_Missing_parameter_Omega_b_Can_t), 0, 1, 0, 0},
  {&__pyx_kp_u_Missing_parameter_Omega_m_or_Ome, __pyx_k_Missing_parameter_Omega_m_or_Ome, sizeof(__pyx_k_Missing_parameter_Omega_m_or_Ome), 0, 1, 0, 0},
  {&__pyx_kp_u_Missing_parameter_h_Can_t_procee, __pyx_k_Missing_parameter_h_Can_t_procee, sizeof(__pyx_k_Missing_parameter_h_Can_t_procee), 0, 1, 0, 0},
  {&__pyx_kp_u_Missing_parameter_m_nu_Will_set, __pyx_k_Missing_parameter_m_nu_Will_set, sizeof(__pyx_k_Missing_parameter_m_nu_Will_set), 0, 1, 0, 0},
  {&__pyx_kp_u_Missing_parameter_n_s_Can_t_proc, __pyx_k_Missing_parameter_n_s_Can_t_proc, sizeof(__pyx_k_Missing_parameter_n_s_Can_t_proc), 0, 1, 0, 0},
  {&__pyx_kp_u_Missing_parameter_w0_Will_set_to, __pyx_k_Missing_parameter_w0_Will_set_to, sizeof(__pyx_k_Missing_parameter_w0_Will_set_to), 0, 1, 0, 0},
  {&__pyx_kp_u_Missing_parameter_wa_Will_set_to, __pyx_k_Missing_parameter_wa_Will_set_to, sizeof(__pyx_k_Missing_parameter_wa_Will_set_to), 0, 1, 0, 0},
  {&__pyx_kp_u_NOTICE_Even_without_classy_you_c, __pyx_k_NOTICE_Even_without_classy_you_c, sizeof(__pyx_k_NOTICE_Even_without_classy_you_c), 0, 1, 0, 0},
  {&__pyx_n_u_N_ncdm, __pyx_k_N_ncdm, sizeof(__pyx_k_N_ncdm), 0, 1, 0, 1},
  {&__pyx_n_u_N_ur, __pyx_k_N_ur, sizeof(__pyx_k_N_ur), 0, 1, 0, 1},
  {&__pyx_n_u_Omb, __pyx_k_Omb, sizeof(__pyx_k_Omb), 0, 1, 0, 1},
  {&__pyx_n_u_Omc, __pyx_k_Omc, sizeof(__pyx_k_Omc), 0, 1, 0, 1},
  {&__pyx_n_u_Omega_Lambda, __pyx_k_Omega_Lambda, sizeof(__pyx_k_Omega_Lambda), 0, 1, 0, 1},
  {&__pyx_n_s_Omega_b, __pyx_k_Omega_b, sizeof(__pyx_k_Omega_b), 0, 0, 1, 1},
  {&__pyx_n_u_Omega_b, __pyx_k_Omega_b, sizeof(__pyx_k_Omega_b), 0, 1, 0, 1},
  {&__pyx_n_u_Omega_baryon, __pyx_k_Omega_baryon, sizeof(__pyx_k_Omega_baryon), 0, 1, 0, 1},
  {&__pyx_n_u_Omega_cdm, __pyx_k_Omega_cdm, sizeof(__pyx_k_Omega_cdm), 0, 1, 0, 1},
  {&__pyx_n_s_Omega_m, __pyx_k_Omega_m, sizeof(__pyx_k_Omega_m), 0, 0, 1, 1},
  {&__pyx_n_u_Omega_m, __pyx_k_Omega_m, sizeof(__pyx_k_Omega_m), 0, 1, 0, 1},
  {&__pyx_n_u_Omega_matter, __pyx_k_Omega_matter, sizeof(__pyx_k_Omega_matter), 0, 1, 0, 1},
  {&__pyx_n_u_Omm, __pyx_k_Omm, sizeof(__pyx_k_Omm), 0, 1, 0, 1},
  {&__pyx_n_s_OverflowError, __pyx_k_OverflowError, sizeof(__pyx_k_OverflowError), 0, 0, 1, 1},
  {&__pyx_kp_u_P_k_max_1_Mpc, __pyx_k_P_k_max_1_Mpc, sizeof(__pyx_k_P_k_max_1_Mpc), 0, 1, 0, 0},
  {&__pyx_kp_u_Parameter_range_violation_A_s_is, __pyx_k_Parameter_range_violation_A_s_is, sizeof(__pyx_k_Parameter_range_violation_A_s_is), 0, 1, 0, 0},
  {&__pyx_kp_u_Parameter_range_violation_Omega, __pyx_k_Parameter_range_violation_Omega, sizeof(__pyx_k_Parameter_range_violation_Omega), 0, 1, 0, 0},
  {&__pyx_kp_u_Parameter_range_violation_Omega_2, __pyx_k_Parameter_range_violation_Omega_2, sizeof(__pyx_k_Parameter_range_violation_Omega_2), 0, 1, 0, 0},
  {&__pyx_kp_u_Parameter_range_violation_h_is_s, __pyx_k_Parameter_range_violation_h_is_s, sizeof(__pyx_k_Parameter_range_violation_h_is_s), 0, 1, 0, 0},
  {&__pyx_kp_u_Parameter_range_violation_m_ncdm, __pyx_k_Parameter_range_violation_m_ncdm, sizeof(__pyx_k_Parameter_range_violation_m_ncdm), 0, 1, 0, 0},
  {&__pyx_kp_u_Parameter_range_violation_n_s_is, __pyx_k_Parameter_range_violation_n_s_is, sizeof(__pyx_k_Parameter_range_violation_n_s_is), 0, 1, 0, 0},
  {&__pyx_kp_u_Parameter_range_violation_w_0_is, __pyx_k_Parameter_range_violation_w_0_is, sizeof(__pyx_k_Parameter_range_violation_w_0_is), 0, 1, 0, 0},
  {&__pyx_kp_u_Parameter_range_violation_w_a_is, __pyx_k_Parameter_range_violation_w_a_is, sizeof(__pyx_k_Parameter_range_violation_w_a_is), 0, 1, 0, 0},
  {&__pyx_n_s_PyCosmology, __pyx_k_PyCosmology, sizeof(__pyx_k_PyCosmology), 0, 0, 1, 1},
  {&__pyx_n_s_PyEuclidEmulator, __pyx_k_PyEuclidEmulator, sizeof(__pyx_k_PyEuclidEmulator), 0, 0, 1, 1},
  {&__pyx_n_s_Sum_m_nu, __pyx_k_Sum_m_nu, sizeof(__pyx_k_Sum_m_nu), 0, 0, 1, 1},
  {&__pyx_kp_u_The_cosmological_parameters_must, __pyx_k_The_cosmological_parameters_must, sizeof(__pyx_k_The_cosmological_parameters_must), 0, 1, 0, 0},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_kp_u_Warning_EuclidEmulator2_emulates, __pyx_k_Warning_EuclidEmulator2_emulates, sizeof(__pyx_k_Warning_EuclidEmulator2_emulates), 0, 1, 0, 0},
  {&__pyx_kp_u_Warning_EuclidEmulator2_emulates_2, __pyx_k_Warning_EuclidEmulator2_emulates_2, sizeof(__pyx_k_Warning_EuclidEmulator2_emulates_2), 0, 1, 0, 0},
  {&__pyx_kp_u_You_have_not_imported_neither_cl, __pyx_k_You_have_not_imported_neither_cl, sizeof(__pyx_k_You_have_not_imported_neither_cl), 0, 1, 0, 0},
  {&__pyx_kp_u_You_have_not_imported_neither_cl_2, __pyx_k_You_have_not_imported_neither_cl_2, sizeof(__pyx_k_You_have_not_imported_neither_cl_2), 0, 1, 0, 0},
  {&__pyx_kp_u__13, __pyx_k__13, sizeof(__pyx_k__13), 0, 1, 0, 0},
  {&__pyx_kp_u_and_yet_classy_could_not_be_ins, __pyx_k_and_yet_classy_could_not_be_ins, sizeof(__pyx_k_and_yet_classy_could_not_be_ins), 0, 1, 0, 0},
  {&__pyx_n_s_any, __pyx_k_any, sizeof(__pyx_k_any), 0, 0, 1, 1},
  {&__pyx_kp_u_arg_A_s_wrong_type, __pyx_k_arg_A_s_wrong_type, sizeof(__pyx_k_arg_A_s_wrong_type), 0, 1, 0, 0},
  {&__pyx_kp_u_arg_Omega_b_wrong_type, __pyx_k_arg_Omega_b_wrong_type, sizeof(__pyx_k_arg_Omega_b_wrong_type), 0, 1, 0, 0},
  {&__pyx_kp_u_arg_Omega_m_wrong_type, __pyx_k_arg_Omega_m_wrong_type, sizeof(__pyx_k_arg_Omega_m_wrong_type), 0, 1, 0, 0},
  {&__pyx_kp_u_arg_Sum_m_nu_wrong_type, __pyx_k_arg_Sum_m_nu_wrong_type, sizeof(__pyx_k_arg_Sum_m_nu_wrong_type), 0, 1, 0, 0},
  {&__pyx_kp_u_arg_h_wrong_type, __pyx_k_arg_h_wrong_type, sizeof(__pyx_k_arg_h_wrong_type), 0, 1, 0, 0},
  {&__pyx_kp_u_arg_n_s_wrong_type, __pyx_k_arg_n_s_wrong_type, sizeof(__pyx_k_arg_n_s_wrong_type), 0, 1, 0, 0},
  {&__pyx_kp_u_arg_w_0_wrong_type, __pyx_k_arg_w_0_wrong_type, sizeof(__pyx_k_arg_w_0_wrong_type), 0, 1, 0, 0},
  {&__pyx_kp_u_arg_w_a_wrong_type, __pyx_k_arg_w_a_wrong_type, sizeof(__pyx_k_arg_w_a_wrong_type), 0, 1, 0, 0},
  {&__pyx_n_s_array, __pyx_k_array, sizeof(__pyx_k_array), 0, 0, 1, 1},
  {&__pyx_n_s_asarray, __pyx_k_asarray, sizeof(__pyx_k_asarray), 0, 0, 1, 1},
  {&__pyx_n_s_check_param_range, __pyx_k_check_param_range, sizeof(__pyx_k_check_param_range), 0, 0, 1, 1},
  {&__pyx_n_s_classy, __pyx_k_classy, sizeof(__pyx_k_classy), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_compute, __pyx_k_compute, sizeof(__pyx_k_compute), 0, 0, 1, 1},
  {&__pyx_n_s_compute_nlc, __pyx_k_compute_nlc, sizeof(__pyx_k_compute_nlc), 0, 0, 1, 1},
  {&__pyx_n_s_concatenate, __pyx_k_concatenate, sizeof(__pyx_k_concatenate), 0, 0, 1, 1},
  {&__pyx_n_s_convert_to_emu, __pyx_k_convert_to_emu, sizeof(__pyx_k_convert_to_emu), 0, 0, 1, 1},
  {&__pyx_n_s_cosmo_par_in, __pyx_k_cosmo_par_in, sizeof(__pyx_k_cosmo_par_in), 0, 0, 1, 1},
  {&__pyx_n_s_csm, __pyx_k_csm, sizeof(__pyx_k_csm), 0, 0, 1, 1},
  {&__pyx_n_s_custom_kvec, __pyx_k_custom_kvec, sizeof(__pyx_k_custom_kvec), 0, 0, 1, 1},
  {&__pyx_n_s_emu_pars_dict, __pyx_k_emu_pars_dict, sizeof(__pyx_k_emu_pars_dict), 0, 0, 1, 1},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_exp, __pyx_k_exp, sizeof(__pyx_k_exp), 0, 0, 1, 1},
  {&__pyx_n_s_filename, __pyx_k_filename, sizeof(__pyx_k_filename), 0, 0, 1, 1},
  {&__pyx_kp_u_full_power_spectra_though, __pyx_k_full_power_spectra_though, sizeof(__pyx_k_full_power_spectra_though), 0, 1, 0, 0},
  {&__pyx_n_s_get_boost, __pyx_k_get_boost, sizeof(__pyx_k_get_boost), 0, 0, 1, 1},
  {&__pyx_n_s_get_plin, __pyx_k_get_plin, sizeof(__pyx_k_get_plin), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_h, __pyx_k_h, sizeof(__pyx_k_h), 0, 0, 1, 1},
  {&__pyx_n_u_h, __pyx_k_h, sizeof(__pyx_k_h), 0, 1, 0, 1},
  {&__pyx_n_u_hubble, __pyx_k_hubble, sizeof(__pyx_k_hubble), 0, 1, 0, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_kvec, __pyx_k_kvec, sizeof(__pyx_k_kvec), 0, 0, 1, 1},
  {&__pyx_kp_u_ln10_10_A_s, __pyx_k_ln10_10_A_s, sizeof(__pyx_k_ln10_10_A_s), 0, 1, 0, 0},
  {&__pyx_n_s_log10, __pyx_k_log10, sizeof(__pyx_k_log10), 0, 0, 1, 1},
  {&__pyx_n_u_mPk, __pyx_k_mPk, sizeof(__pyx_k_mPk), 0, 1, 0, 1},
  {&__pyx_n_u_m_ncdm, __pyx_k_m_ncdm, sizeof(__pyx_k_m_ncdm), 0, 1, 0, 1},
  {&__pyx_n_u_m_nu, __pyx_k_m_nu, sizeof(__pyx_k_m_nu), 0, 1, 0, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_kp_u_make_class, __pyx_k_make_class, sizeof(__pyx_k_make_class), 0, 1, 0, 0},
  {&__pyx_n_s_max, __pyx_k_max, sizeof(__pyx_k_max), 0, 0, 1, 1},
  {&__pyx_n_s_min, __pyx_k_min, sizeof(__pyx_k_min), 0, 0, 1, 1},
  {&__pyx_n_u_mnu, __pyx_k_mnu, sizeof(__pyx_k_mnu), 0, 1, 0, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_modules, __pyx_k_modules, sizeof(__pyx_k_modules), 0, 0, 1, 1},
  {&__pyx_n_s_n_redshift, __pyx_k_n_redshift, sizeof(__pyx_k_n_redshift), 0, 0, 1, 1},
  {&__pyx_n_s_n_s, __pyx_k_n_s, sizeof(__pyx_k_n_s), 0, 0, 1, 1},
  {&__pyx_n_u_n_s, __pyx_k_n_s, sizeof(__pyx_k_n_s), 0, 1, 0, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_u_neutrino_mass, __pyx_k_neutrino_mass, sizeof(__pyx_k_neutrino_mass), 0, 1, 0, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_u_ns, __pyx_k_ns, sizeof(__pyx_k_ns), 0, 1, 0, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_n_u_om_b, __pyx_k_om_b, sizeof(__pyx_k_om_b), 0, 1, 0, 1},
  {&__pyx_n_u_om_m, __pyx_k_om_m, sizeof(__pyx_k_om_m), 0, 1, 0, 1},
  {&__pyx_n_u_ombh2, __pyx_k_ombh2, sizeof(__pyx_k_ombh2), 0, 1, 0, 1},
  {&__pyx_n_u_omch2, __pyx_k_omch2, sizeof(__pyx_k_omch2), 0, 1, 0, 1},
  {&__pyx_n_u_omega_b, __pyx_k_omega_b, sizeof(__pyx_k_omega_b), 0, 1, 0, 1},
  {&__pyx_n_u_omega_cdm, __pyx_k_omega_cdm, sizeof(__pyx_k_omega_cdm), 0, 1, 0, 1},
  {&__pyx_n_u_omega_m, __pyx_k_omega_m, sizeof(__pyx_k_omega_m), 0, 1, 0, 1},
  {&__pyx_n_u_ommh2, __pyx_k_ommh2, sizeof(__pyx_k_ommh2), 0, 1, 0, 1},
  {&__pyx_n_s_ones_like, __pyx_k_ones_like, sizeof(__pyx_k_ones_like), 0, 0, 1, 1},
  {&__pyx_n_u_output, __pyx_k_output, sizeof(__pyx_k_output), 0, 1, 0, 1},
  {&__pyx_n_s_pk, __pyx_k_pk, sizeof(__pyx_k_pk), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_redshift, __pyx_k_redshift, sizeof(__pyx_k_redshift), 0, 0, 1, 1},
  {&__pyx_n_s_redshifts, __pyx_k_redshifts, sizeof(__pyx_k_redshifts), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_reshape, __pyx_k_reshape, sizeof(__pyx_k_reshape), 0, 0, 1, 1},
  {&__pyx_n_s_scipy_interpolate, __pyx_k_scipy_interpolate, sizeof(__pyx_k_scipy_interpolate), 0, 0, 1, 1},
  {&__pyx_n_s_set, __pyx_k_set, sizeof(__pyx_k_set), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_shape, __pyx_k_shape, sizeof(__pyx_k_shape), 0, 0, 1, 1},
  {&__pyx_n_s_sys, __pyx_k_sys, sizeof(__pyx_k_sys), 0, 0, 1, 1},
  {&__pyx_n_s_sys_2, __pyx_k_sys_2, sizeof(__pyx_k_sys_2), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_kp_u_to_emulate_boost_factors_You_wo, __pyx_k_to_emulate_boost_factors_You_wo, sizeof(__pyx_k_to_emulate_boost_factors_You_wo), 0, 1, 0, 0},
  {&__pyx_kp_u_together_with_its_wrapper_class, __pyx_k_together_with_its_wrapper_class, sizeof(__pyx_k_together_with_its_wrapper_class), 0, 1, 0, 0},
  {&__pyx_n_u_w, __pyx_k_w, sizeof(__pyx_k_w), 0, 1, 0, 1},
  {&__pyx_n_u_w0, __pyx_k_w0, sizeof(__pyx_k_w0), 0, 1, 0, 1},
  {&__pyx_n_u_w0_fld, __pyx_k_w0_fld, sizeof(__pyx_k_w0_fld), 0, 1, 0, 1},
  {&__pyx_n_s_w_0, __pyx_k_w_0, sizeof(__pyx_k_w_0), 0, 0, 1, 1},
  {&__pyx_n_u_w_0, __pyx_k_w_0, sizeof(__pyx_k_w_0), 0, 1, 0, 1},
  {&__pyx_n_s_w_a, __pyx_k_w_a, sizeof(__pyx_k_w_a), 0, 0, 1, 1},
  {&__pyx_n_u_w_a, __pyx_k_w_a, sizeof(__pyx_k_w_a), 0, 1, 0, 1},
  {&__pyx_n_u_wa, __pyx_k_wa, sizeof(__pyx_k_wa), 0, 1, 0, 1},
  {&__pyx_n_u_wa_fld, __pyx_k_wa_fld, sizeof(__pyx_k_wa_fld), 0, 1, 0, 1},
  {&__pyx_n_s_warnings, __pyx_k_warnings, sizeof(__pyx_k_warnings), 0, 0, 1, 1},
  {&__pyx_n_s_warnings_2, __pyx_k_warnings_2, sizeof(__pyx_k_warnings_2), 0, 0, 1, 1},
  {&__pyx_n_u_z_pk, __pyx_k_z_pk, sizeof(__pyx_k_z_pk), 0, 1, 0, 1},
  {&__pyx_n_s_zip, __pyx_k_zip, sizeof(__pyx_k_zip), 0, 0, 1, 1},
  {&__pyx_n_s_zvec, __pyx_k_zvec, sizeof(__pyx_k_zvec), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(0, 19, __pyx_L1_error)
  __pyx_builtin_print = __Pyx_GetBuiltinName(__pyx_n_s_print); if (!__pyx_builtin_print) __PYX_ERR(0, 20, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 179, __pyx_L1_error)
  __pyx_builtin_KeyError = __Pyx_GetBuiltinName(__pyx_n_s_KeyError); if (!__pyx_builtin_KeyError) __PYX_ERR(0, 234, __pyx_L1_error)
  __pyx_builtin_max = __Pyx_GetBuiltinName(__pyx_n_s_max); if (!__pyx_builtin_max) __PYX_ERR(0, 395, __pyx_L1_error)
  __pyx_builtin_min = __Pyx_GetBuiltinName(__pyx_n_s_min); if (!__pyx_builtin_min) __PYX_ERR(0, 396, __pyx_L1_error)
  __pyx_builtin_any = __Pyx_GetBuiltinName(__pyx_n_s_any); if (!__pyx_builtin_any) __PYX_ERR(0, 402, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 424, __pyx_L1_error)
  __pyx_builtin_zip = __Pyx_GetBuiltinName(__pyx_n_s_zip); if (!__pyx_builtin_zip) __PYX_ERR(0, 397, __pyx_L1_error)
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(0, 520, __pyx_L1_error)
  __pyx_builtin_OverflowError = __Pyx_GetBuiltinName(__pyx_n_s_OverflowError); if (!__pyx_builtin_OverflowError) __PYX_ERR(1, 81, __pyx_L1_error)
  __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) __PYX_ERR(1, 94, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple_)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "euclidemu2.pyx":225
 *         """
 *         if not isinstance(class_pars_dict, dict):
 *             raise TypeError("The cosmological parameters must be passed as a python dictionary.")             # <<<<<<<<<<<<<<
 * 
 *         if 'h' in class_pars_dict:
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_u_The_cosmological_parameters_must); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "euclidemu2.pyx":234
 *             h = class_pars_dict['H0']/100.
 *         else:
 *             raise KeyError("Missing parameter h. Can't proceed.")             # <<<<<<<<<<<<<<
 * 
 *         if 'Omega_b' in class_pars_dict:
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_u_Missing_parameter_h_Can_t_procee); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "euclidemu2.pyx":249
 *             Om_b = class_pars_dict['ombh2']/h**2
 *         else:
 *             raise KeyError("Missing parameter Omega_b. Can't proceed.")             # <<<<<<<<<<<<<<
 * 
 *         # Currently only allowing this way of passing the neutrino mass
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_u_Missing_parameter_Omega_b_Can_t); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "euclidemu2.pyx":262
 *             m_ncdm = class_pars_dict['neutrino_mass']
 *         else:
 *             print("Missing parameter m_nu. Will set to 0.")             # <<<<<<<<<<<<<<
 *             m_ncdm=0.0
 * 
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_u_Missing_parameter_m_nu_Will_set); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "euclidemu2.pyx":292
 *             Om_m = Om_b + Om_cdm
 *         else:
 *             raise KeyError("Missing parameter Omega_m or Omega_cdm. Can't proceed.")             # <<<<<<<<<<<<<<
 * 
 *         if 'n_s' in class_pars_dict:
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_u_Missing_parameter_Omega_m_or_Ome); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "euclidemu2.pyx":299
 *             n_s = class_pars_dict['ns']
 *         else:
 *             raise KeyError("Missing parameter n_s. Can't proceed.")             # <<<<<<<<<<<<<<
 * 
 *         if 'A_s' in class_pars_dict:
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_u_Missing_parameter_n_s_Can_t_proc); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "euclidemu2.pyx":308
 *             A_s = np.exp(class_pars_dict['ln10^{10}A_s'])*1.0e-10
 *         else:
 *             raise KeyError("Missing parameter A_s or ln10^{10}A_s. Can't proceed.")             # <<<<<<<<<<<<<<
 * 
 *         # Using default values for DE params for LCDM case.
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_u_Missing_parameter_A_s_or_ln10_10); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "euclidemu2.pyx":320
 *             w0_fld = class_pars_dict['w']
 *         else:
 *             print("Missing parameter w0. Will set to -1.")             # <<<<<<<<<<<<<<
 *             w0_fld=-1.0
 * 
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_u_Missing_parameter_w0_Will_set_to); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "euclidemu2.pyx":330
 *             wa_fld = class_pars_dict['w_a']
 *         else:
 *             print("Missing parameter wa. Will set to 0.")             # <<<<<<<<<<<<<<
 *             wa_fld=0.0
 * 
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_u_Missing_parameter_wa_Will_set_to); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "euclidemu2.pyx":455
 * 
 *         if _Class.__module__ not in _sys.modules:
 *             print("You have not imported neither classee nor classy.\n \             # <<<<<<<<<<<<<<
 *                    Computing linear power spectrum is hence not possible.")
 *             return None
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_u_You_have_not_imported_neither_cl); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 455, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "euclidemu2.pyx":527
 * 
 *         if _Class.__module__ not in _sys.modules:
 *             print("You have not imported neither classee nor classy.\n \             # <<<<<<<<<<<<<<
 *                    Emulating full power spectrum is hence not possible.")
 *             return None
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_u_You_have_not_imported_neither_cl_2); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 527, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "euclidemu2.pyx":20
 *     from classy import Class as _Class
 * except ImportError:
 *     print("\nClassy could not be found in your system.")             # <<<<<<<<<<<<<<
 *     print("Here are some suggestions:\n")
 *     print("\t -Download the Class from class-code.net and install it")
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_u_Classy_could_not_be_found_in_yo); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "euclidemu2.pyx":21
 * except ImportError:
 *     print("\nClassy could not be found in your system.")
 *     print("Here are some suggestions:\n")             # <<<<<<<<<<<<<<
 *     print("\t -Download the Class from class-code.net and install it")
 *     print("\t  together with its wrapper classy (type 'make' instead of")
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_u_Here_are_some_suggestions); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "euclidemu2.pyx":22
 *     print("\nClassy could not be found in your system.")
 *     print("Here are some suggestions:\n")
 *     print("\t -Download the Class from class-code.net and install it")             # <<<<<<<<<<<<<<
 *     print("\t  together with its wrapper classy (type 'make' instead of")
 *     print("\t  'make class'")
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_u_Download_the_Class_from_class_c); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "euclidemu2.pyx":23
 *     print("Here are some suggestions:\n")
 *     print("\t -Download the Class from class-code.net and install it")
 *     print("\t  together with its wrapper classy (type 'make' instead of")             # <<<<<<<<<<<<<<
 *     print("\t  'make class'")
 *     print("\t -If you know that Class is installed on your system")
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_u_together_with_its_wrapper_class); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "euclidemu2.pyx":24
 *     print("\t -Download the Class from class-code.net and install it")
 *     print("\t  together with its wrapper classy (type 'make' instead of")
 *     print("\t  'make class'")             # <<<<<<<<<<<<<<
 *     print("\t -If you know that Class is installed on your system")
 *     print("\t  and yet classy could not be installed, try re-compiling")
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_u_make_class); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "euclidemu2.pyx":25
 *     print("\t  together with its wrapper classy (type 'make' instead of")
 *     print("\t  'make class'")
 *     print("\t -If you know that Class is installed on your system")             # <<<<<<<<<<<<<<
 *     print("\t  and yet classy could not be installed, try re-compiling")
 *     print("\t  Class with just ''make'' instead of ''make class''")
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_u_If_you_know_that_Class_is_insta); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "euclidemu2.pyx":26
 *     print("\t  'make class'")
 *     print("\t -If you know that Class is installed on your system")
 *     print("\t  and yet classy could not be installed, try re-compiling")             # <<<<<<<<<<<<<<
 *     print("\t  Class with just ''make'' instead of ''make class''")
 *     print("NOTICE: Even without classy you can still use EuclidEmulator2")
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_u_and_yet_classy_could_not_be_ins); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "euclidemu2.pyx":27
 *     print("\t -If you know that Class is installed on your system")
 *     print("\t  and yet classy could not be installed, try re-compiling")
 *     print("\t  Class with just ''make'' instead of ''make class''")             # <<<<<<<<<<<<<<
 *     print("NOTICE: Even without classy you can still use EuclidEmulator2")
 *     print("        to emulate boost factors. You won't be able to compute")
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_kp_u_Class_with_just_make_instead_of); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "euclidemu2.pyx":28
 *     print("\t  and yet classy could not be installed, try re-compiling")
 *     print("\t  Class with just ''make'' instead of ''make class''")
 *     print("NOTICE: Even without classy you can still use EuclidEmulator2")             # <<<<<<<<<<<<<<
 *     print("        to emulate boost factors. You won't be able to compute")
 *     print("        full power spectra, though.")
 */
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_kp_u_NOTICE_Even_without_classy_you_c); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "euclidemu2.pyx":29
 *     print("\t  Class with just ''make'' instead of ''make class''")
 *     print("NOTICE: Even without classy you can still use EuclidEmulator2")
 *     print("        to emulate boost factors. You won't be able to compute")             # <<<<<<<<<<<<<<
 *     print("        full power spectra, though.")
 * 
 */
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_kp_u_to_emulate_boost_factors_You_wo); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "euclidemu2.pyx":30
 *     print("NOTICE: Even without classy you can still use EuclidEmulator2")
 *     print("        to emulate boost factors. You won't be able to compute")
 *     print("        full power spectra, though.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_kp_u_full_power_spectra_though); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_0_0 = PyFloat_FromDouble(0.0); if (unlikely(!__pyx_float_0_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_0_5 = PyFloat_FromDouble(0.5); if (unlikely(!__pyx_float_0_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_10_ = PyFloat_FromDouble(10.); if (unlikely(!__pyx_float_10_)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_0_00 = PyFloat_FromDouble(0.00); if (unlikely(!__pyx_float_0_00)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_0_04 = PyFloat_FromDouble(0.04); if (unlikely(!__pyx_float_0_04)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_0_06 = PyFloat_FromDouble(0.06); if (unlikely(!__pyx_float_0_06)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_0_15 = PyFloat_FromDouble(0.15); if (unlikely(!__pyx_float_0_15)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_0_24 = PyFloat_FromDouble(0.24); if (unlikely(!__pyx_float_0_24)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_0_40 = PyFloat_FromDouble(0.40); if (unlikely(!__pyx_float_0_40)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_0_61 = PyFloat_FromDouble(0.61); if (unlikely(!__pyx_float_0_61)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_0_73 = PyFloat_FromDouble(0.73); if (unlikely(!__pyx_float_0_73)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_0_92 = PyFloat_FromDouble(0.92); if (unlikely(!__pyx_float_0_92)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1_00 = PyFloat_FromDouble(1.00); if (unlikely(!__pyx_float_1_00)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_10_0 = PyFloat_FromDouble(10.0); if (unlikely(!__pyx_float_10_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_100_ = PyFloat_FromDouble(100.); if (unlikely(!__pyx_float_100_)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_93_14 = PyFloat_FromDouble(93.14); if (unlikely(!__pyx_float_93_14)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1_7eneg_9 = PyFloat_FromDouble(1.7e-9); if (unlikely(!__pyx_float_1_7eneg_9)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_2_0308 = PyFloat_FromDouble(2.0308); if (unlikely(!__pyx_float_2_0308)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_2_5eneg_9 = PyFloat_FromDouble(2.5e-9); if (unlikely(!__pyx_float_2_5eneg_9)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1_0eneg_10 = PyFloat_FromDouble(1.0e-10); if (unlikely(!__pyx_float_1_0eneg_10)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_0_7 = PyFloat_FromDouble(-0.7); if (unlikely(!__pyx_float_neg_0_7)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_1_0 = PyFloat_FromDouble(-1.0); if (unlikely(!__pyx_float_neg_1_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_1_3 = PyFloat_FromDouble(-1.3); if (unlikely(!__pyx_float_neg_1_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_10euclidemu2_PyCosmology) < 0) __PYX_ERR(0, 72, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10euclidemu2_PyCosmology.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10euclidemu2_PyCosmology.tp_dictoffset && __pyx_type_10euclidemu2_PyCosmology.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10euclidemu2_PyCosmology.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PyCosmology, (PyObject *)&__pyx_type_10euclidemu2_PyCosmology) < 0) __PYX_ERR(0, 72, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_10euclidemu2_PyCosmology) < 0) __PYX_ERR(0, 72, __pyx_L1_error)
  __pyx_ptype_10euclidemu2_PyCosmology = &__pyx_type_10euclidemu2_PyCosmology;
  if (PyType_Ready(&__pyx_type_10euclidemu2_PyEuclidEmulator) < 0) __PYX_ERR(0, 94, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_10euclidemu2_PyEuclidEmulator.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10euclidemu2_PyEuclidEmulator.tp_dictoffset && __pyx_type_10euclidemu2_PyEuclidEmulator.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10euclidemu2_PyEuclidEmulator.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_PyEuclidEmulator, (PyObject *)&__pyx_type_10euclidemu2_PyEuclidEmulator) < 0) __PYX_ERR(0, 94, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_10euclidemu2_PyEuclidEmulator) < 0) __PYX_ERR(0, 94, __pyx_L1_error)
  __pyx_ptype_10euclidemu2_PyEuclidEmulator = &__pyx_type_10euclidemu2_PyEuclidEmulator;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initeuclidemu2(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initeuclidemu2(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_euclidemu2(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_euclidemu2(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_euclidemu2(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'euclidemu2' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_euclidemu2(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("euclidemu2", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_euclidemu2) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "euclidemu2")) {
      if (unlikely(PyDict_SetItemString(modules, "euclidemu2", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_type_import_code();
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "euclidemu2.pyx":17
 * # along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * try:             # <<<<<<<<<<<<<<
 *     from classy import Class as _Class
 * except ImportError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "euclidemu2.pyx":18
 * 
 * try:
 *     from classy import Class as _Class             # <<<<<<<<<<<<<<
 * except ImportError:
 *     print("\nClassy could not be found in your system.")
 */
      __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 18, __pyx_L2_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_n_s_Class_2);
      __Pyx_GIVEREF(__pyx_n_s_Class_2);
      PyList_SET_ITEM(__pyx_t_4, 0, __pyx_n_s_Class_2);
      __pyx_t_5 = __Pyx_Import(__pyx_n_s_classy, __pyx_t_4, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 18, __pyx_L2_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_ImportFrom(__pyx_t_5, __pyx_n_s_Class_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 18, __pyx_L2_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_Class, __pyx_t_4) < 0) __PYX_ERR(0, 18, __pyx_L2_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "euclidemu2.pyx":17
 * # along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * try:             # <<<<<<<<<<<<<<
 *     from classy import Class as _Class
 * except ImportError:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L7_try_end;
    __pyx_L2_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "euclidemu2.pyx":19
 * try:
 *     from classy import Class as _Class
 * except ImportError:             # <<<<<<<<<<<<<<
 *     print("\nClassy could not be found in your system.")
 *     print("Here are some suggestions:\n")
 */
    __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ImportError);
    if (__pyx_t_6) {
      __Pyx_AddTraceback("euclidemu2", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_4, &__pyx_t_7) < 0) __PYX_ERR(0, 19, __pyx_L4_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_t_7);

      /* "euclidemu2.pyx":20
 *     from classy import Class as _Class
 * except ImportError:
 *     print("\nClassy could not be found in your system.")             # <<<<<<<<<<<<<<
 *     print("Here are some suggestions:\n")
 *     print("\t -Download the Class from class-code.net and install it")
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 20, __pyx_L4_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "euclidemu2.pyx":21
 * except ImportError:
 *     print("\nClassy could not be found in your system.")
 *     print("Here are some suggestions:\n")             # <<<<<<<<<<<<<<
 *     print("\t -Download the Class from class-code.net and install it")
 *     print("\t  together with its wrapper classy (type 'make' instead of")
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 21, __pyx_L4_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "euclidemu2.pyx":22
 *     print("\nClassy could not be found in your system.")
 *     print("Here are some suggestions:\n")
 *     print("\t -Download the Class from class-code.net and install it")             # <<<<<<<<<<<<<<
 *     print("\t  together with its wrapper classy (type 'make' instead of")
 *     print("\t  'make class'")
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 22, __pyx_L4_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "euclidemu2.pyx":23
 *     print("Here are some suggestions:\n")
 *     print("\t -Download the Class from class-code.net and install it")
 *     print("\t  together with its wrapper classy (type 'make' instead of")             # <<<<<<<<<<<<<<
 *     print("\t  'make class'")
 *     print("\t -If you know that Class is installed on your system")
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 23, __pyx_L4_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "euclidemu2.pyx":24
 *     print("\t -Download the Class from class-code.net and install it")
 *     print("\t  together with its wrapper classy (type 'make' instead of")
 *     print("\t  'make class'")             # <<<<<<<<<<<<<<
 *     print("\t -If you know that Class is installed on your system")
 *     print("\t  and yet classy could not be installed, try re-compiling")
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 24, __pyx_L4_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "euclidemu2.pyx":25
 *     print("\t  together with its wrapper classy (type 'make' instead of")
 *     print("\t  'make class'")
 *     print("\t -If you know that Class is installed on your system")             # <<<<<<<<<<<<<<
 *     print("\t  and yet classy could not be installed, try re-compiling")
 *     print("\t  Class with just ''make'' instead of ''make class''")
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 25, __pyx_L4_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "euclidemu2.pyx":26
 *     print("\t  'make class'")
 *     print("\t -If you know that Class is installed on your system")
 *     print("\t  and yet classy could not be installed, try re-compiling")             # <<<<<<<<<<<<<<
 *     print("\t  Class with just ''make'' instead of ''make class''")
 *     print("NOTICE: Even without classy you can still use EuclidEmulator2")
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 26, __pyx_L4_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "euclidemu2.pyx":27
 *     print("\t -If you know that Class is installed on your system")
 *     print("\t  and yet classy could not be installed, try re-compiling")
 *     print("\t  Class with just ''make'' instead of ''make class''")             # <<<<<<<<<<<<<<
 *     print("NOTICE: Even without classy you can still use EuclidEmulator2")
 *     print("        to emulate boost factors. You won't be able to compute")
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 27, __pyx_L4_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "euclidemu2.pyx":28
 *     print("\t  and yet classy could not be installed, try re-compiling")
 *     print("\t  Class with just ''make'' instead of ''make class''")
 *     print("NOTICE: Even without classy you can still use EuclidEmulator2")             # <<<<<<<<<<<<<<
 *     print("        to emulate boost factors. You won't be able to compute")
 *     print("        full power spectra, though.")
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 28, __pyx_L4_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "euclidemu2.pyx":29
 *     print("\t  Class with just ''make'' instead of ''make class''")
 *     print("NOTICE: Even without classy you can still use EuclidEmulator2")
 *     print("        to emulate boost factors. You won't be able to compute")             # <<<<<<<<<<<<<<
 *     print("        full power spectra, though.")
 * 
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 29, __pyx_L4_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "euclidemu2.pyx":30
 *     print("NOTICE: Even without classy you can still use EuclidEmulator2")
 *     print("        to emulate boost factors. You won't be able to compute")
 *     print("        full power spectra, though.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 30, __pyx_L4_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L3_exception_handled;
    }
    goto __pyx_L4_except_error;
    __pyx_L4_except_error:;

    /* "euclidemu2.pyx":17
 * # along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * try:             # <<<<<<<<<<<<<<
 *     from classy import Class as _Class
 * except ImportError:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L3_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L7_try_end:;
  }

  /* "euclidemu2.pyx":40
 * from cython.operator cimport dereference as deref
 * 
 * import sys as _sys             # <<<<<<<<<<<<<<
 * import numpy as np
 * from scipy.interpolate import CubicSpline as _CubicSpline
 */
  __pyx_t_7 = __Pyx_Import(__pyx_n_s_sys_2, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sys, __pyx_t_7) < 0) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "euclidemu2.pyx":41
 * 
 * import sys as _sys
 * import numpy as np             # <<<<<<<<<<<<<<
 * from scipy.interpolate import CubicSpline as _CubicSpline
 * import warnings as _warnings
 */
  __pyx_t_7 = __Pyx_Import(__pyx_n_s_numpy, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_7) < 0) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "euclidemu2.pyx":42
 * import sys as _sys
 * import numpy as np
 * from scipy.interpolate import CubicSpline as _CubicSpline             # <<<<<<<<<<<<<<
 * import warnings as _warnings
 * 
 */
  __pyx_t_7 = PyList_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(__pyx_n_s_CubicSpline_2);
  __Pyx_GIVEREF(__pyx_n_s_CubicSpline_2);
  PyList_SET_ITEM(__pyx_t_7, 0, __pyx_n_s_CubicSpline_2);
  __pyx_t_4 = __Pyx_Import(__pyx_n_s_scipy_interpolate, __pyx_t_7, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_CubicSpline_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CubicSpline, __pyx_t_7) < 0) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "euclidemu2.pyx":43
 * import numpy as np
 * from scipy.interpolate import CubicSpline as _CubicSpline
 * import warnings as _warnings             # <<<<<<<<<<<<<<
 * 
 * # distutils: language = c++
 */
  __pyx_t_4 = __Pyx_Import(__pyx_n_s_warnings, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_warnings_2, __pyx_t_4) < 0) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "euclidemu2.pyx":1
 * # This file is part of EuclidEmulator2             # <<<<<<<<<<<<<<
 * # Copyright (c) 2018-2021 Mischa Knabenhans, Pedro Carrilho
 * #
 */
  __pyx_t_4 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_4) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "carray.from_py":77
 * 
 * @cname("__Pyx_carray_from_py_double___5b_0x265_5d_")
 * cdef int __Pyx_carray_from_py_double___5b_0x265_5d_(object o, base_type *v, Py_ssize_t length) except -1:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t i = length
 *     try:
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init euclidemu2", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init euclidemu2");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_FAST_THREAD_STATE
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#else
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* DictGetItem */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (__Pyx_PyFastCFunction_Check(func)) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyFloatBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_TrueDivideObjC(PyObject *op1, PyObject *op2, double floatval, int inplace, int zerodivision_check) {
    const double b = floatval;
    double a, result;
    (void)inplace;
    (void)zerodivision_check;
    if (likely(PyFloat_CheckExact(op1))) {
        a = PyFloat_AS_DOUBLE(op1);
        
    } else
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        a = (double) PyInt_AS_LONG(op1);
        
    } else
    #endif
    if (likely(PyLong_CheckExact(op1))) {
        #if CYTHON_USE_PYLONG_INTERNALS
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        switch (size) {
            case  0: a = 0.0; break;
            case -1: a = -(double) digits[0]; break;
            case  1: a = (double) digits[0]; break;
            case -2:
            case 2:
                if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (1 * PyLong_SHIFT < 53))) {
                    a = (double) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53) || (a < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -2)
                            a = -a;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            case -3:
            case 3:
                if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53))) {
                    a = (double) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53) || (a < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -3)
                            a = -a;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            case -4:
            case 4:
                if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53))) {
                    a = (double) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (4 * PyLong_SHIFT < 53) || (a < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -4)
                            a = -a;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            default:
        #else
        {
        #endif
            a = PyLong_AsDouble(op1);
            if (unlikely(a == -1.0 && PyErr_Occurred())) return NULL;
            
        }
    } else {
        return (inplace ? PyNumber_InPlaceTrueDivide : PyNumber_TrueDivide)(op1, op2);
    }
        
        PyFPE_START_PROTECT("divide", return NULL)
        result = a / b;
        PyFPE_END_PROTECT(result)
        return PyFloat_FromDouble(result);
}
#endif

/* PyDictVersioning */
  #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
  #if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyObjectCall2Args */
  static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyIntCompare */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED long inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = Py_SIZE(op1);
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        if (intval == 0) {
            if (size == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
        } else if (intval < 0) {
            if (size >= 0)
                Py_RETURN_FALSE;
            intval = -intval;
            size = -size;
        } else {
            if (size <= 0)
                Py_RETURN_FALSE;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        if (unequal == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
        if ((double)a == (double)b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    return (
        PyObject_RichCompare(op1, op2, Py_EQ));
}

/* SliceObject */
  static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(PyObject* obj,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {
#if CYTHON_USE_TYPE_SLOTS
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                    goto bad;
                PyErr_Clear();
            }
        }
        return ms->sq_slice(obj, cstart, cstop);
    }
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_subscript))
#endif
    {
        PyObject* result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_USE_TYPE_SLOTS
        result = mp->mp_subscript(obj, py_slice);
#else
        result = PyObject_GetItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    PyErr_Format(PyExc_TypeError,
        "'%.200s' object is unsliceable", Py_TYPE(obj)->tp_name);
bad:
    return NULL;
}

/* RaiseTooManyValuesToUnpack */
  static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
  static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
  static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
  static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    }
    return __Pyx_IterFinish();
}

/* ObjectGetItem */
  #if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr = NULL;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* None */
  static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* PyObjectCallNoArg */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#if defined(__Pyx_CyFunction_USED) && defined(NDEBUG)
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyIntBinop */
  #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* GetTopmostException */
  #if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
  #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* PyErrExceptionMatches */
  #if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* PyObject_GenericGetAttrNoDict */
  #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
  #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* PyObjectGetAttrStrNoError */
  static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* SetupReduce */
  static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_getstate = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
    PyObject *getstate = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    getstate = _PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate);
#else
    getstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_getstate);
    if (!getstate && PyErr_Occurred()) {
        goto __PYX_BAD;
    }
#endif
    if (getstate) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_getstate = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_getstate);
#else
        object_getstate = __Pyx_PyObject_GetAttrStrNoError((PyObject*)&PyBaseObject_Type, __pyx_n_s_getstate);
        if (!object_getstate && PyErr_Occurred()) {
            goto __PYX_BAD;
        }
#endif
        if (object_getstate != getstate) {
            goto __PYX_GOOD;
        }
    }
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
    Py_XDECREF(object_getstate);
    Py_XDECREF(getstate);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* Import */
  static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
  static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* GetException */
  #if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* CLineInTraceback */
  #ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
  static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
  #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);  // XDECREF since it's only set on Py3 if cline
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
  #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntFromPy */
  static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
  static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
  #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
  static int __Pyx_check_binary_version(void) {
    char ctversion[5];
    int same=1, i, found_dot;
    const char* rt_from_call = Py_GetVersion();
    PyOS_snprintf(ctversion, 5, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    found_dot = 0;
    for (i = 0; i < 4; i++) {
        if (!ctversion[i]) {
            same = (rt_from_call[i] < '0' || rt_from_call[i] > '9');
            break;
        }
        if (rt_from_call[i] != ctversion[i]) {
            same = 0;
            break;
        }
    }
    if (!same) {
        char rtversion[5] = {'\0'};
        char message[200];
        for (i=0; i<4; ++i) {
            if (rt_from_call[i] == '.') {
                if (found_dot) break;
                found_dot = 1;
            } else if (rt_from_call[i] < '0' || rt_from_call[i] > '9') {
                break;
            }
            rtversion[i] = rt_from_call[i];
        }
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
  static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
